import * as React from 'react';
import * as PropTypes from 'prop-types';
import { BaseComponent, IBaseProps } from './BaseComponent';
import { ICustomizations } from './Customizations';
export interface ICustomizerContext {
    customizations: ICustomizations;
}
export declare type ICustomizerProps = Partial<ICustomizations> & IBaseProps;
/**
 * The Customizer component allows for default props to be mixed into components which
 * are decorated with the customizable() decorator. This enables injection scenarios like:
 *
 * 1. render svg icons instead of the icon font within all buttons
 * 2. inject a custom theme object into a component
 *
 * Props are provided via the settings prop, which should be a json map which contains 1 or more
 * name/value pairs representing injectable props.
 *
 * @public
 */
export declare class Customizer extends BaseComponent<ICustomizerProps, ICustomizerContext> {
    static contextTypes: {
        customizations: PropTypes.Requireable<{}>;
    };
    static childContextTypes: {
        customizations: PropTypes.Requireable<{}>;
    };
    constructor(props: ICustomizerProps, context: any);
    getChildContext(): ICustomizerContext;
    componentWillReceiveProps(newProps: any, newContext: any): void;
    render(): React.ReactElement<{}>;
    private _getCustomizations(props, context);
}
