import * as React from 'react';
import { IStyleFunction } from './IStyleFunction';
export interface IPropsWithStyles<TStyleProps, TStyles> {
    getStyles?: IStyleFunction<TStyleProps, TStyles>;
    subComponents?: {
        [key: string]: IStyleFunction<{}, {}>;
    };
}
/**
 * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve
 * getStyles functional props, and mix customized props passed in using concatStyleSets. Example:
 *
 * ```tsx
 * export const Toggle = styled(
 *   ToggleBase,
 *   {
 *     getStyles: props => ({ root: { background: 'red' }})
 *   }
 * );
 * ```
 *
 */
export declare function styled<TComponentProps extends IPropsWithStyles<TStyleProps, TStyles>, TStyleProps, TStyles>(Component: React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>, getBaseStyles: (props: TStyleProps) => TStyles, getProps?: (props: TComponentProps) => Partial<TComponentProps>): (props: TComponentProps) => JSX.Element;
