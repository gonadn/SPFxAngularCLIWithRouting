{"version":3,"file":"Context.js","sourceRoot":"../src/","sources":["Context.tsx"],"names":[],"mappings":";AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,MAAM,yBACJ,YAA+C,EAC/C,iBAA8C;IAE9C;QAAuB,oCAAuB;QAA9C;;QAUA,CAAC;QAPQ,kCAAe,GAAtB;YACE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QAEM,yBAAM,GAAb;YACE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;QARsB,0BAAiB,GAAsC,YAAY,CAAC;QAS7F,eAAC;KAAA,AAVD,CAAuB,KAAK,CAAC,SAAS,GAUrC;IAED,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["\r\nimport * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\n\r\nexport function provideContext<TContext, TProps>(\r\n  contextTypes: PropTypes.ValidationMap<TContext>,\r\n  mapPropsToContext: (props: TProps) => TContext\r\n): React.ComponentType<TProps & React.Props<{}>> {\r\n  class Provider extends React.Component<TProps> {\r\n    public static readonly childContextTypes: PropTypes.ValidationMap<TContext> = contextTypes;\r\n\r\n    public getChildContext(): TContext {\r\n      return mapPropsToContext(this.props);\r\n    }\r\n\r\n    public render(): JSX.Element | null {\r\n      return React.Children.only(this.props.children);\r\n    }\r\n  }\r\n\r\n  return Provider;\r\n}\r\n"]}