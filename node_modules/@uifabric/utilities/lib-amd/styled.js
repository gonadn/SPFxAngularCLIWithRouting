define(["require", "exports", "tslib", "react", "@uifabric/merge-styles/lib/index"], function (require, exports, tslib_1, React, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve
     * getStyles functional props, and mix customized props passed in using concatStyleSets. Example:
     *
     * ```tsx
     * export const Toggle = styled(
     *   ToggleBase,
     *   {
     *     getStyles: props => ({ root: { background: 'red' }})
     *   }
     * );
     * ```
     *
     */
    function styled(Component, getBaseStyles, getProps) {
        var Wrapped = (function (componentProps) {
            var getStyles = function (styleProps) { return index_1.concatStyleSets(getBaseStyles && getBaseStyles(styleProps), componentProps && componentProps.getStyles && componentProps.getStyles(styleProps)); };
            var additionalProps = getProps ? getProps(componentProps) : {};
            return (React.createElement(Component, tslib_1.__assign({}, additionalProps, componentProps, { getStyles: getStyles })));
        });
        Wrapped.displayName = "Styled" + (Component.displayName || Component.name);
        return Wrapped;
    }
    exports.styled = styled;
});
//# sourceMappingURL=styled.js.map