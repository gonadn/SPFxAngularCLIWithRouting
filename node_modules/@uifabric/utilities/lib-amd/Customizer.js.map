{"version":3,"file":"Customizer.js","sourceRoot":"../src/","sources":["Customizer.tsx"],"names":[],"mappings":";;;IAWA;;;;;;;;;;;OAWG;IACH;QAAgC,sCAAmD;QAWjF,kCAAkC;QAClC,oBAAY,KAAuB,EAAE,OAAY;YAAjD,YACE,kBAAM,KAAK,CAAC,SAGb;YADC,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;QACvD,CAAC;QAEM,oCAAe,GAAtB;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;QAED,kCAAkC;QAC3B,8CAAyB,GAAhC,UAAiC,QAAa,EAAE,UAAe;YAC7D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;QAC/D,CAAC;QAEM,2BAAM,GAAb;YACE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;QAEO,uCAAkB,GAA1B,UACE,KAAuB,EACvB,OAA2B;YAGzB,IAAA,mBAAa,EAAb,kCAAa,EACb,yBAAmB,EAAnB,wCAAmB,CACX;YAER,IAAA,2BAAqD,EAArD,0EAAqD,CAC3C;YAEZ,IAAI,iBAAiB,wBAAQ,cAAc,CAAE,CAAC;YAE9C,GAAG,CAAC,CAAC,IAAI,MAAI,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC/C,EAAE,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,MAAI,CAAC,CAAC,CAAC,CAAC;oBACvD,iBAAiB,CAAC,MAAI,CAAC,wBAAQ,cAAc,CAAC,MAAI,CAAC,EAAK,cAAc,CAAC,cAAc,CAAC,MAAI,CAAC,CAAE,CAAC;gBAChG,CAAC;YACH,CAAC;YAED,MAAM,CAAC;gBACL,cAAc,EAAE;oBACd,QAAQ,uBACH,QAAQ,EACR,cAAc,CAAC,QAAQ,CAC3B;oBACD,cAAc,EAAE,iBAAiB;iBAClC;aACF,CAAC;QACJ,CAAC;QA3Da,uBAAY,GAEtB;YACF,cAAc,EAAE,SAAS,CAAC,MAAM;SACjC,CAAC;QAEY,4BAAiB,GAE3B,UAAU,CAAC,YAAY,CAAC;QAoD9B,iBAAC;KAAA,AA7DD,CAAgC,6BAAa,GA6D5C;IA7DY,gCAAU","sourcesContent":["import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { BaseComponent, IBaseProps } from './BaseComponent';\r\nimport { ICustomizations } from './Customizations';\r\n\r\nexport interface ICustomizerContext {\r\n  customizations: ICustomizations;\r\n}\r\n\r\nexport type ICustomizerProps = Partial<ICustomizations> & IBaseProps;\r\n\r\n/**\r\n * The Customizer component allows for default props to be mixed into components which\r\n * are decorated with the customizable() decorator. This enables injection scenarios like:\r\n *\r\n * 1. render svg icons instead of the icon font within all buttons\r\n * 2. inject a custom theme object into a component\r\n *\r\n * Props are provided via the settings prop, which should be a json map which contains 1 or more\r\n * name/value pairs representing injectable props.\r\n *\r\n * @public\r\n */\r\nexport class Customizer extends BaseComponent<ICustomizerProps, ICustomizerContext> {\r\n  public static contextTypes: {\r\n    customizations: PropTypes.Requireable<{}>;\r\n  } = {\r\n    customizations: PropTypes.object\r\n  };\r\n\r\n  public static childContextTypes: {\r\n    customizations: PropTypes.Requireable<{}>;\r\n  } = Customizer.contextTypes;\r\n\r\n  // tslint:disable-next-line:no-any\r\n  constructor(props: ICustomizerProps, context: any) {\r\n    super(props);\r\n\r\n    this.state = this._getCustomizations(props, context);\r\n  }\r\n\r\n  public getChildContext(): ICustomizerContext {\r\n    return this.state;\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public componentWillReceiveProps(newProps: any, newContext: any): void {\r\n    this.setState(this._getCustomizations(newProps, newContext));\r\n  }\r\n\r\n  public render(): React.ReactElement<{}> {\r\n    return React.Children.only(this.props.children);\r\n  }\r\n\r\n  private _getCustomizations(\r\n    props: ICustomizerProps,\r\n    context: ICustomizerContext\r\n  ): ICustomizerContext {\r\n    let {\r\n      settings = {},\r\n      scopedSettings = {}\r\n    } = props;\r\n    let {\r\n      customizations = { settings: {}, scopedSettings: {} }\r\n    } = context;\r\n\r\n    let newScopedSettings = { ...scopedSettings };\r\n\r\n    for (let name in customizations.scopedSettings) {\r\n      if (customizations.scopedSettings.hasOwnProperty(name)) {\r\n        newScopedSettings[name] = { ...scopedSettings[name], ...customizations.scopedSettings[name] };\r\n      }\r\n    }\r\n\r\n    return {\r\n      customizations: {\r\n        settings: {\r\n          ...settings,\r\n          ...customizations.settings\r\n        },\r\n        scopedSettings: newScopedSettings\r\n      }\r\n    };\r\n  }\r\n}\r\n"]}