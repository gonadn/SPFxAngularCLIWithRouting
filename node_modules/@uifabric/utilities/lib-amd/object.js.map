{"version":3,"file":"object.js","sourceRoot":"../src/","sources":["object.ts"],"names":[],"mappings":"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","sourcesContent":["// Initialize global window id.\r\nconst CURRENT_ID_PROPERTY = '__currentId__';\r\nconst DEFAULT_ID_STRING = 'id__';\r\n\r\ndeclare const process: {};\r\n\r\n// tslint:disable-next-line:no-any\r\nlet _global: any = (typeof window !== 'undefined' && window) || process;\r\n\r\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\r\n  _global[CURRENT_ID_PROPERTY] = 0;\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nfunction checkProperties(a: any, b: any): boolean {\r\n  for (let propName in a) {\r\n    if (a.hasOwnProperty(propName)) {\r\n      if (!b.hasOwnProperty(propName) || (b[propName] !== a[propName])) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Compares a to b and b to a.\r\n *\r\n * @public\r\n */\r\nexport function shallowCompare<TA, TB>(a: TA, b: TB): boolean {\r\n  return checkProperties(a, b) && checkProperties(b, a);\r\n}\r\n\r\n/**\r\n * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more\r\n * objects as arguments and they will be merged sequentially into the target. Note that this will\r\n * shallow merge; it will not create new cloned values for target members.\r\n *\r\n * @public\r\n * @param target - Target object to merge following object arguments into.\r\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\r\n * @returns Resulting merged target.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function assign(target: any, ...args: any[]): any {\r\n  return filteredAssign.apply(this, [null, target].concat(args));\r\n}\r\n\r\n/**\r\n * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter\r\n * the resulting merges. This allows for scenarios where you want to merge \"everything except that one thing\"\r\n * or \"properties that start with data-\". Note that this will shallow merge; it will not create new cloned\r\n * values for target members.\r\n *\r\n * @public\r\n * @param isAllowed - Callback to determine if the given propName is allowed in the result.\r\n * @param target - Target object to merge following object arguments into.\r\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\r\n * @returns Resulting merged target.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args: any[]): any {\r\n  target = target || {};\r\n\r\n  for (let sourceObject of args) {\r\n    if (sourceObject) {\r\n      for (let propName in sourceObject) {\r\n        if (\r\n          sourceObject.hasOwnProperty(propName) &&\r\n          (!isAllowed || isAllowed(propName))\r\n        ) {\r\n          target[propName] = sourceObject[propName];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\r\n *\r\n * @public\r\n */\r\nexport function getId(prefix?: string): string {\r\n  let index = _global[CURRENT_ID_PROPERTY]++;\r\n\r\n  return (prefix || DEFAULT_ID_STRING) + index;\r\n}\r\n\r\n/* Takes an enum and iterates over each value of the enum (as a string), running the callback on each, returning a mapped array.\r\n * The callback takes as a first parameter the string that represents the name of the entry, and the second parameter is the\r\n * value of that entry, which is the value you'd normally use when using the enum (usually a number).\r\n * */\r\nexport function mapEnumByName<T>(\r\n  // tslint:disable-next-line:no-any\r\n  theEnum: any,\r\n  callback: (name?: string, value?: string | number) => T | undefined\r\n): (T | undefined)[] | undefined {\r\n  // map<any> to satisfy compiler since it doesn't realize we strip out undefineds in the .filter() call\r\n  return Object.keys(theEnum).map<T | undefined>(\r\n    (p: string | number) => { // map on each property name as a string\r\n      if (String(Number(p)) !== p) { // if the property is not just a number (because enums in TypeScript will map both ways)\r\n        return callback(p as string, theEnum[p]);\r\n      }\r\n    }).filter((v: T | undefined) => !!v); // only return elements with values\r\n}"]}