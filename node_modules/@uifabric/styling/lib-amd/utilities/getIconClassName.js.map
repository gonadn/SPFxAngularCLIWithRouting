{"version":3,"file":"getIconClassName.js","sourceRoot":"../src/","sources":["utilities/getIconClassName.ts"],"names":[],"mappings":";;;IAKA,IAAM,iBAAiB,GAAG;QACxB,OAAO,EAAE,cAAc;KACxB,CAAC;IAEF;;;;;OAKG;IACH,0BAAiC,IAAY;QAC3C,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAM,IAAI,GAAG,eAAO,CAAC,IAAI,CAAC,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,SAAS,GAAG,mBAAW,CACrB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,iBAAiB,EACjB;gBACE,SAAS,EAAE;oBACT,UAAU,EAAE;wBACV,OAAO,EAAE,OAAI,IAAI,CAAC,IAAI,OAAG;qBAC1B;iBACF;aACF,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAlBD,4CAkBC","sourcesContent":["import {\r\n  mergeStyles\r\n} from '@uifabric/merge-styles/lib/index';\r\nimport { getIcon } from './icons';\r\n\r\nconst defaultIconStyles = {\r\n  display: 'inline-block'\r\n};\r\n\r\n/**\r\n * Gets an icon classname. You should be able to add this classname to an I tag with no\r\n * additional classnames, and render the icon.\r\n *\r\n * @public\r\n */\r\nexport function getIconClassName(name: string): string {\r\n  let className = '';\r\n  const icon = getIcon(name);\r\n\r\n  if (icon) {\r\n    className = mergeStyles(\r\n      icon.subset.className,\r\n      defaultIconStyles,\r\n      {\r\n        selectors: {\r\n          '::before': {\r\n            content: `\"${icon.code}\"`\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  return className;\r\n}\r\n"]}