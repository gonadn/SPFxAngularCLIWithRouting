{"version":3,"file":"icons.js","sourceRoot":"../src/","sources":["utilities/icons.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  warn\r\n} from '@uifabric/utilities/lib/warn';\r\nimport {\r\n  GlobalSettings\r\n} from '@uifabric/utilities/lib/GlobalSettings';\r\nimport {\r\n  IRawStyle,\r\n  IFontFace,\r\n  fontFace,\r\n  mergeStyles\r\n} from '@uifabric/merge-styles/lib/index';\r\n\r\nexport interface IIconSubset {\r\n  fontFace?: IFontFace;\r\n  icons: {\r\n    [key: string]: string | JSX.Element;\r\n  };\r\n\r\n  style?: IRawStyle;\r\n}\r\n\r\nexport interface IIconSubsetRecord extends IIconSubset {\r\n  isRegistered?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport interface IIconRecord {\r\n  code: string | undefined;\r\n  subset: IIconSubsetRecord;\r\n}\r\n\r\nexport interface IIconOptions {\r\n  /**\r\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\r\n   * registered, because this scenario can create unexpected consequences.\r\n   *\r\n   * Some scenarios include:\r\n   *\r\n   * Icon set was previously registered using a different base url.\r\n   * Icon set was previously registered but a different version was provided.\r\n   * Icons in a previous registered set overlap with a new set.\r\n   *\r\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\r\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\r\n   * However, consider whether the problems listed above will cause issues.\r\n   **/\r\n  disableWarnings: boolean;\r\n\r\n  /**\r\n   * @deprecated\r\n   * Use 'disableWarnings' instead.\r\n   */\r\n  warnOnMissingIcons?: boolean;\r\n}\r\n\r\nexport interface IIconRecords {\r\n  __options: IIconOptions;\r\n  __remapped: { [key: string]: string };\r\n  [key: string]: IIconRecord | {};\r\n}\r\n\r\nconst ICON_SETTING_NAME = 'icons';\r\n\r\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\r\n  __options: {\r\n    disableWarnings: false,\r\n    warnOnMissingIcons: true\r\n  },\r\n  __remapped: {}\r\n});\r\n\r\n/**\r\n * Registers a given subset of icons.\r\n *\r\n * @param iconSubset - the icon subset definition.\r\n */\r\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\r\n  let subset = {\r\n    ...iconSubset,\r\n    isRegistered: false,\r\n    className: undefined\r\n  };\r\n  let { icons } = iconSubset;\r\n\r\n  // Grab options, optionally mix user provided ones on top.\r\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\r\n\r\n  for (const iconName in icons) {\r\n    if (icons.hasOwnProperty(iconName)) {\r\n      const code = icons[iconName];\r\n      const normalizedIconName = iconName.toLowerCase();\r\n\r\n      if (_iconSettings[normalizedIconName]) {\r\n        if (!options.disableWarnings) {\r\n          warn(`Icon '${iconName} being re-registered. Ignoring duplicate registration.`);\r\n        }\r\n      } else {\r\n        _iconSettings[normalizedIconName] = {\r\n          code,\r\n          subset\r\n        };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Remaps one icon name to another.\r\n */\r\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\r\n  _iconSettings.__remapped[iconName.toLowerCase()] = mappedToName.toLowerCase();\r\n}\r\n\r\n/**\r\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\r\n * it will get registered immediately.\r\n *\r\n * @public\r\n * @param name - Name of icon.\r\n */\r\nexport function getIcon(name?: string): IIconRecord | undefined {\r\n  let icon: IIconRecord | undefined = undefined;\r\n  const options = _iconSettings.__options;\r\n\r\n  name = name ? name.toLowerCase() : '';\r\n  name = _iconSettings.__remapped[name] || name;\r\n\r\n  if (name) {\r\n    icon = _iconSettings[name!] as IIconRecord;\r\n\r\n    if (icon) {\r\n      let { subset } = icon;\r\n\r\n      if (subset.fontFace && !subset.isRegistered) {\r\n        // Register font face for given icons.\r\n        fontFace(subset.fontFace);\r\n\r\n        // Generate a base class name for the given font.\r\n        subset.className = mergeStyles(\r\n          subset.style,\r\n          {\r\n            fontFamily: subset.fontFace.fontFamily,\r\n            fontWeight: subset.fontFace.fontWeight || 'normal',\r\n            fontStyle: subset.fontFace.fontStyle || 'normal'\r\n          }).toString();\r\n\r\n        subset.isRegistered = true;\r\n      }\r\n    } else {\r\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\r\n        warn(`The icon \"${name}\" was used but not registered. See http://aka.ms/fabric-icon-usage for more information.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return icon;\r\n}\r\n\r\n/**\r\n * Sets the icon options.\r\n *\r\n * @public\r\n */\r\nexport function setIconOptions(options: Partial<IIconOptions>): void {\r\n  _iconSettings.__options = {\r\n    ..._iconSettings.__options,\r\n    ...options\r\n  };\r\n}\r\n"]}