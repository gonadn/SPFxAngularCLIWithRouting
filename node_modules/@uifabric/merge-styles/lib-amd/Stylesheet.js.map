{"version":3,"file":"Stylesheet.js","sourceRoot":"../src/","sources":["Stylesheet.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStyle } from './IStyle';\r\n/**\r\n * Injection mode for the stylesheet.\r\n *\r\n * @public\r\n */\r\nexport const enum InjectionMode {\r\n  /**\r\n   * Avoids style injection, use getRules() to read the styles.\r\n   */\r\n  none = 0,\r\n\r\n  /**\r\n   * Inserts rules using the insertRule api.\r\n   */\r\n  insertNode = 1,\r\n\r\n  /**\r\n   * Appends rules using appendChild.\r\n   */\r\n  appendChild = 2\r\n}\r\n\r\n/**\r\n * Stylesheet config.\r\n *\r\n * @public\r\n */\r\nexport interface IStyleSheetConfig {\r\n  /**\r\n   * Injection mode for how rules are inserted.\r\n   */\r\n  injectionMode?: InjectionMode;\r\n  /**\r\n   * Falls back to \"css\".\r\n   */\r\n  defaultPrefix?: string;\r\n  onInsertRule?: (rule: string) => void;\r\n}\r\n\r\nconst STYLESHEET_SETTING = '__stylesheet__';\r\n\r\nlet _stylesheet: Stylesheet;\r\n\r\n/**\r\n * Represents the state of styles registered in the page. Abstracts\r\n * the surface for adding styles to the stylesheet, exposes helpers\r\n * for reading the styles registered in server rendered scenarios.\r\n *\r\n * @public\r\n */\r\nexport class Stylesheet {\r\n  private _styleElement!: HTMLStyleElement;\r\n  private _rules!: string[];\r\n  private _config: IStyleSheetConfig;\r\n  private _rulesToInsert!: string[];\r\n  private _timerId!: number;\r\n  private _counter!: number;\r\n  private _keyToClassName!: { [key: string]: string };\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _classNameToArgs!: { [key: string]: { args: any, rules: string[] } };\r\n\r\n  /**\r\n   * Gets the singleton instance.\r\n   */\r\n  public static getInstance(): Stylesheet {\r\n    // tslint:disable-next-line:no-any\r\n    const win: any = typeof window !== 'undefined' ? window : {};\r\n    _stylesheet = win[STYLESHEET_SETTING] as Stylesheet;\r\n\r\n    if (!_stylesheet) {\r\n      // tslint:disable-next-line:no-string-literal\r\n      const fabricConfig = (win && win['FabricConfig']) || {};\r\n\r\n      _stylesheet = win[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\r\n    }\r\n\r\n    return _stylesheet;\r\n  }\r\n\r\n  constructor(config?: IStyleSheetConfig) {\r\n    this._config = {\r\n      injectionMode: InjectionMode.insertNode,\r\n      defaultPrefix: 'css',\r\n      ...config\r\n    };\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Configures the stylesheet.\r\n   */\r\n  public setConfig(config?: IStyleSheetConfig): void {\r\n    this._config = {\r\n      ...this._config,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates a unique classname.\r\n   *\r\n   * @param displayName - Optional value to use as a prefix.\r\n   */\r\n  public getClassName(displayName?: string): string {\r\n    const prefix = displayName || this._config.defaultPrefix;\r\n\r\n    return `${prefix}-${this._counter++}`;\r\n  }\r\n\r\n  /**\r\n   * Used internally to cache information about a class which was\r\n   * registered with the stylesheet.\r\n   */\r\n  public cacheClassName(\r\n    className: string,\r\n    key: string,\r\n    args: IStyle[],\r\n    rules: string[]\r\n  ): void {\r\n    this._keyToClassName[key] = className;\r\n    this._classNameToArgs[className] = {\r\n      args,\r\n      rules\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the appropriate classname given a key which was previously\r\n   * registered using cacheClassName.\r\n   */\r\n  public classNameFromKey(key: string): string | undefined {\r\n    return this._keyToClassName[key];\r\n  }\r\n\r\n  /**\r\n   * Gets the arguments associated with a given classname which was\r\n   * previously registered using cacheClassName.\r\n   */\r\n  public argsFromClassName(className: string): IStyle[] | undefined {\r\n    const entry = this._classNameToArgs[className];\r\n\r\n    return (entry && entry.args);\r\n  }\r\n\r\n  /**\r\n * Gets the arguments associated with a given classname which was\r\n * previously registered using cacheClassName.\r\n */\r\n  public insertedRulesFromClassName(className: string): string[] | undefined {\r\n    const entry = this._classNameToArgs[className];\r\n\r\n    return (entry && entry.rules);\r\n  }\r\n\r\n  /**\r\n   * Inserts a css rule into the stylesheet.\r\n   */\r\n  public insertRule(\r\n    rule: string\r\n  ): void {\r\n    const element = this._getElement();\r\n    const injectionMode = element ? this._config.injectionMode : InjectionMode.none;\r\n\r\n    switch (injectionMode) {\r\n      case InjectionMode.insertNode:\r\n        const { sheet } = element!;\r\n\r\n        try {\r\n          // tslint:disable-next-line:no-any\r\n          (sheet as any).insertRule(rule, (sheet as any).cssRules.length);\r\n        } catch (e) {\r\n          /* no-op on errors */\r\n        }\r\n        break;\r\n\r\n      case InjectionMode.appendChild:\r\n        _createStyleElement(rule);\r\n        break;\r\n\r\n      default:\r\n        this._rules.push(rule);\r\n        break;\r\n    }\r\n\r\n    if (this._config.onInsertRule) {\r\n      this._config.onInsertRule(rule);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all rules registered with the stylesheet; only valid when\r\n   * using InsertionMode.none.\r\n   */\r\n  public getRules(): string {\r\n    return (this._rules.join('') || '') + (this._rulesToInsert.join('') || '');\r\n  }\r\n\r\n  /**\r\n   * Resets the internal state of the stylesheet. Only used in server\r\n   * rendered scenarios where we're using InsertionMode.none.\r\n   */\r\n  public reset(): void {\r\n    this._rules = [];\r\n    this._rulesToInsert = [];\r\n    this._counter = 0;\r\n    this._classNameToArgs = {};\r\n    this._keyToClassName = {};\r\n\r\n    if (this._timerId) {\r\n      clearTimeout(this._timerId);\r\n      this._timerId = 0;\r\n    }\r\n  }\r\n\r\n  private _getElement(): HTMLStyleElement | undefined {\r\n    if (!this._styleElement && typeof document !== 'undefined') {\r\n      this._styleElement = _createStyleElement();\r\n    }\r\n    return this._styleElement;\r\n  }\r\n}\r\n\r\nfunction _createStyleElement(content?: string): HTMLStyleElement {\r\n  const styleElement = document.createElement('style');\r\n\r\n  styleElement.setAttribute('data-merge-styles', 'true');\r\n  styleElement.type = 'text/css';\r\n  if (content) {\r\n    styleElement.appendChild(document.createTextNode(content));\r\n  }\r\n  document.head.appendChild(styleElement);\r\n\r\n  return styleElement;\r\n}"]}