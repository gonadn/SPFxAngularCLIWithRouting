{"version":3,"file":"mergeStyleSets.js","sourceRoot":"../src/","sources":["mergeStyleSets.ts"],"names":[],"mappings":";;;IAKA;;;;;OAKG;IACH;QACE,iBAAuD;aAAvD,UAAuD,EAAvD,qBAAuD,EAAvD,IAAuD;YAAvD,4BAAuD;;QAEvD,kCAAkC;QAClC,IAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,IAAM,QAAQ,GAA8B,EAAE,CAAC;QAE/C,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,GAAG,iCAAe,eAAI,OAAO,CAAC,CAAC;YACvC,CAAC;YAED,IAAM,aAAa,GAAG,EAAE,CAAC;YAEzB,GAAG,CAAC,CAAC,IAAM,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;gBAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAChC,IAAM,IAAI,GAAW,MAAM,CAAC,IAAI,CAAC,CAAC;oBAElC,kCAAkC;oBAC5B,IAAA,gDAAqD,EAAnD,oBAAO,EAAE,oBAAO,CAAoC;oBAC5D,IAAM,YAAY,GAAG,sCAAmB,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;oBAEzE,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBAEjC,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBACjB,QAAQ,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC;wBACxC,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC1E,CAAC;gBACH,CAAC;YACH,CAAC;YAED,GAAG,CAAC,CAAuB,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa;gBAAnC,IAAM,YAAY,sBAAA;gBACrB,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACjB,oCAAiB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;gBAC5C,CAAC;aACF;QACH,CAAC;QAED,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IAzCD,wCAyCC","sourcesContent":["import { extractStyleParts } from './extractStyleParts';\r\nimport { concatStyleSets } from './concatStyleSets';\r\nimport { IStyle } from './IStyle';\r\nimport { styleToRegistration, applyRegistration } from './styleToClassName';\r\n\r\n/**\r\n * Allows you to pass in 1 or more sets of areas which will return a merged\r\n * set of classes.\r\n *\r\n * @public\r\n */\r\nexport function mergeStyleSets<K extends string>(\r\n  ...cssSets: ({[P in K]?: IStyle } | null | undefined)[]\r\n): {[P in K]: string} {\r\n  // tslint:disable-next-line:no-any\r\n  const classNameSet: any = {};\r\n  const classMap: { [key: string]: string } = {};\r\n\r\n  let cssSet = cssSets[0];\r\n\r\n  if (cssSet) {\r\n    if (cssSets.length > 1) {\r\n      cssSet = concatStyleSets(...cssSets);\r\n    }\r\n\r\n    const registrations = [];\r\n\r\n    for (const prop in cssSet) {\r\n      if (cssSet.hasOwnProperty(prop)) {\r\n        const args: IStyle = cssSet[prop];\r\n\r\n        // tslint:disable-next-line:no-any\r\n        const { classes, objects } = extractStyleParts(args as any);\r\n        const registration = styleToRegistration({ displayName: prop }, objects);\r\n\r\n        registrations.push(registration);\r\n\r\n        if (registration) {\r\n          classMap[prop] = registration.className;\r\n          classNameSet[prop] = classes.concat([registration.className]).join(' ');\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const registration of registrations) {\r\n      if (registration) {\r\n        applyRegistration(registration, classMap);\r\n      }\r\n    }\r\n  }\r\n\r\n  return classNameSet;\r\n}\r\n"]}