{"version":3,"file":"styleToClassName.js","sourceRoot":"../src/","sources":["styleToClassName.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRawStyle, IStyle } from './IStyle';\r\n\r\nimport { Stylesheet } from './Stylesheet';\r\nimport { kebabRules } from './transforms/kebabRules';\r\nimport { prefixRules } from './transforms/prefixRules';\r\nimport { provideUnits } from './transforms/provideUnits';\r\nimport { rtlifyRules } from './transforms/rtlifyRules';\r\n\r\nconst DISPLAY_NAME = 'displayName';\r\n\r\n// tslint:disable-next-line:no-any\r\ntype IDictionary = { [key: string]: any };\r\n\r\ninterface IRuleSet {\r\n  __order: string[];\r\n  [key: string]: IDictionary;\r\n}\r\n\r\nfunction getDisplayName(rules?: { [key: string]: IRawStyle }): string | undefined {\r\n  const rootStyle: IStyle = rules && rules['&'];\r\n\r\n  return rootStyle ? (rootStyle as IRawStyle).displayName : undefined;\r\n}\r\n\r\nfunction extractRules(\r\n  args: IStyle[],\r\n  rules: IRuleSet = { __order: [] },\r\n  currentSelector: string = '&'\r\n): IRuleSet {\r\n  const stylesheet = Stylesheet.getInstance();\r\n  let currentRules: IDictionary | undefined = rules[currentSelector] as IDictionary;\r\n\r\n  if (!currentRules) {\r\n    currentRules = {};\r\n    rules[currentSelector] = currentRules;\r\n    rules.__order.push(currentSelector);\r\n  }\r\n\r\n  for (const arg of args) {\r\n    // If the arg is a string, we need to look up the class map and merge.\r\n    if (typeof arg === 'string') {\r\n      const expandedRules = stylesheet.argsFromClassName(arg);\r\n\r\n      if (expandedRules) {\r\n        extractRules(expandedRules, rules, currentSelector);\r\n      }\r\n      // Else if the arg is an array, we need to recurse in.\r\n    } else if (Array.isArray(arg)) {\r\n      extractRules(arg, rules, currentSelector);\r\n    } else {\r\n      // tslint:disable-next-line:no-any\r\n      for (const prop in (arg as any)) {\r\n        if (prop === 'selectors') {\r\n          // tslint:disable-next-line:no-any\r\n          const selectors: { [key: string]: IStyle } = (arg as any).selectors;\r\n\r\n          for (let newSelector in selectors) {\r\n            if (selectors.hasOwnProperty(newSelector)) {\r\n              const selectorValue = selectors[newSelector];\r\n\r\n              if (newSelector.indexOf(':global(') === 0) {\r\n                newSelector = newSelector.replace(/:global\\(|\\)$/g, '');\r\n              } else if (newSelector.indexOf('@media') === 0) {\r\n                newSelector = newSelector + '{' + currentSelector;\r\n              } else if (newSelector.indexOf(':') === 0) {\r\n                newSelector = currentSelector + newSelector;\r\n              } else if (newSelector.indexOf('&') < 0) {\r\n                newSelector = currentSelector + ' ' + newSelector;\r\n              }\r\n\r\n              extractRules([selectorValue], rules, newSelector);\r\n            }\r\n          }\r\n        } else {\r\n          // Else, add the rule to the currentSelector.\r\n          if (prop === 'margin' || prop === 'padding') {\r\n            // tslint:disable-next-line:no-any\r\n            expandQuads(currentRules, prop, (arg as any)[prop]);\r\n          } else {\r\n            // tslint:disable-next-line:no-any\r\n            (currentRules as any)[prop] = (arg as any)[prop] as any;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return rules;\r\n}\r\n\r\nfunction expandQuads(\r\n  currentRules: IDictionary,\r\n  name: string,\r\n  value: string\r\n): void {\r\n  const parts = (typeof value === 'string') ? value.split(' ') : [value];\r\n\r\n  currentRules[name + 'Top'] = parts[0];\r\n  currentRules[name + 'Right'] = parts[1] || parts[0];\r\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\r\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\r\n}\r\n\r\nfunction getKeyForRules(rules: IRuleSet): string | undefined {\r\n  const serialized: string[] = [];\r\n  let hasProps = false;\r\n\r\n  for (const selector of rules.__order) {\r\n    serialized.push(selector);\r\n    const rulesForSelector = rules[selector];\r\n\r\n    for (const propName in rulesForSelector) {\r\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\r\n        hasProps = true;\r\n        serialized.push(propName, rulesForSelector[propName]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return hasProps ? serialized.join('') : undefined;\r\n}\r\n\r\nexport function serializeRuleEntries(ruleEntries: { [key: string]: string | number }): string {\r\n  if (!ruleEntries) {\r\n    return '';\r\n  }\r\n\r\n  const allEntries: (string | number)[] = [];\r\n\r\n  for (const entry in ruleEntries) {\r\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\r\n      allEntries.push(entry, ruleEntries[entry]);\r\n    }\r\n  }\r\n\r\n  // Apply transforms.\r\n  for (let i = 0; i < allEntries.length; i += 2) {\r\n    kebabRules(allEntries, i);\r\n    provideUnits(allEntries, i);\r\n    rtlifyRules(allEntries, i);\r\n    prefixRules(allEntries, i);\r\n  }\r\n\r\n  // Apply punctuation.\r\n  for (let i = 1; i < allEntries.length; i += 4) {\r\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\r\n  }\r\n\r\n  return allEntries.join('');\r\n}\r\n\r\nexport interface IRegistration {\r\n  className: string;\r\n  key: string;\r\n  args: IStyle[];\r\n  rulesToInsert: string[];\r\n}\r\n\r\nexport function styleToRegistration(...args: IStyle[]): IRegistration | undefined {\r\n  const rules: IRuleSet = extractRules(args);\r\n  const key = getKeyForRules(rules);\r\n\r\n  if (key) {\r\n    const stylesheet = Stylesheet.getInstance();\r\n    const registration: Partial<IRegistration> = {\r\n      className: stylesheet.classNameFromKey(key),\r\n      key,\r\n      args\r\n    };\r\n\r\n    if (!registration.className) {\r\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\r\n      const rulesToInsert: string[] = [];\r\n\r\n      for (const selector of rules.__order) {\r\n        rulesToInsert.push(\r\n          selector,\r\n          serializeRuleEntries(rules[selector])\r\n        );\r\n      }\r\n      registration.rulesToInsert = rulesToInsert;\r\n    }\r\n\r\n    return registration as IRegistration;\r\n  }\r\n}\r\n\r\nexport function applyRegistration(\r\n  registration: IRegistration,\r\n  classMap?: { [key: string]: string }\r\n): void {\r\n  const stylesheet = Stylesheet.getInstance();\r\n  const { className, key, args, rulesToInsert } = registration;\r\n\r\n  if (rulesToInsert) {\r\n    // rulesToInsert is an ordered array of selector/rule pairs.\r\n    for (let i = 0; i < rulesToInsert.length; i += 2) {\r\n      const rules = rulesToInsert[i + 1];\r\n      if (rules) {\r\n        let selector = rulesToInsert[i];\r\n\r\n        // Fix selector using map.\r\n        selector = selector.replace(/(&)|\\$([\\w-]+)\\b/g, (match: string, amp: string, cn: string): string => {\r\n          if (amp) {\r\n            return '.' + registration.className;\r\n          } else if (cn) {\r\n            return '.' + ((classMap && classMap[cn]) || cn);\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Insert. Note if a media query, we must close the query with a final bracket.\r\n        const processedRule = `${selector}{${rules}}${(selector.indexOf('@media') === 0) ? '}' : ''}`;\r\n\r\n        stylesheet.insertRule(processedRule);\r\n      }\r\n    }\r\n    stylesheet.cacheClassName(\r\n      className!,\r\n      key!,\r\n      args!,\r\n      rulesToInsert\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport function styleToClassName(...args: IStyle[]): string {\r\n  const registration = styleToRegistration(...args);\r\n  if (registration) {\r\n    applyRegistration(registration);\r\n\r\n    return registration.className;\r\n  }\r\n\r\n  return '';\r\n}\r\n"]}