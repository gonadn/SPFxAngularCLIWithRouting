{"version":3,"file":"Stylesheet.js","sourceRoot":"../src/","sources":["Stylesheet.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStyle } from './IStyle';\r\n/**\r\n * Injection mode for the stylesheet.\r\n *\r\n * @public\r\n */\r\nexport const enum InjectionMode {\r\n  /**\r\n   * Avoids style injection, use getRules() to read the styles.\r\n   */\r\n  none = 0,\r\n\r\n  /**\r\n   * Inserts rules using the insertRule api.\r\n   */\r\n  insertNode = 1,\r\n\r\n  /**\r\n   * Appends rules using appendChild.\r\n   */\r\n  appendChild = 2\r\n}\r\n\r\n/**\r\n * Stylesheet config.\r\n *\r\n * @public\r\n */\r\nexport interface IStyleSheetConfig {\r\n  /**\r\n   * Injection mode for how rules are inserted.\r\n   */\r\n  injectionMode?: InjectionMode;\r\n  /**\r\n   * Falls back to \"css\".\r\n   */\r\n  defaultPrefix?: string;\r\n  onInsertRule?: (rule: string) => void;\r\n}\r\n\r\nconst STYLESHEET_SETTING = '__stylesheet__';\r\n\r\nlet _stylesheet: Stylesheet;\r\n\r\n/**\r\n * Represents the state of styles registered in the page. Abstracts\r\n * the surface for adding styles to the stylesheet, exposes helpers\r\n * for reading the styles registered in server rendered scenarios.\r\n *\r\n * @public\r\n */\r\nexport class Stylesheet {\r\n  private _styleElement!: HTMLStyleElement;\r\n  private _rules!: string[];\r\n  private _config: IStyleSheetConfig;\r\n  private _rulesToInsert!: string[];\r\n  private _timerId!: number;\r\n  private _counter!: number;\r\n  private _keyToClassName!: { [key: string]: string };\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _classNameToArgs!: { [key: string]: { args: any, rules: string[] } };\r\n\r\n  /**\r\n   * Gets the singleton instance.\r\n   */\r\n  public static getInstance(): Stylesheet {\r\n    // tslint:disable-next-line:no-any\r\n    const win: any = typeof window !== 'undefined' ? window : {};\r\n    _stylesheet = win[STYLESHEET_SETTING] as Stylesheet;\r\n\r\n    if (!_stylesheet) {\r\n      // tslint:disable-next-line:no-string-literal\r\n      const fabricConfig = (win && win['FabricConfig']) || {};\r\n\r\n      _stylesheet = win[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\r\n    }\r\n\r\n    return _stylesheet;\r\n  }\r\n\r\n  constructor(config?: IStyleSheetConfig) {\r\n    this._config = {\r\n      injectionMode: InjectionMode.insertNode,\r\n      defaultPrefix: 'css',\r\n      ...config\r\n    };\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Configures the stylesheet.\r\n   */\r\n  public setConfig(config?: IStyleSheetConfig): void {\r\n    this._config = {\r\n      ...this._config,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates a unique classname.\r\n   *\r\n   * @param displayName - Optional value to use as a prefix.\r\n   */\r\n  public getClassName(displayName?: string): string {\r\n    const prefix = displayName || this._config.defaultPrefix;\r\n\r\n    return `${prefix}-${this._counter++}`;\r\n  }\r\n\r\n  /**\r\n   * Used internally to cache information about a class which was\r\n   * registered with the stylesheet.\r\n   */\r\n  public cacheClassName(\r\n    className: string,\r\n    key: string,\r\n    args: IStyle[],\r\n    rules: string[]\r\n  ): void {\r\n    this._keyToClassName[key] = className;\r\n    this._classNameToArgs[className] = {\r\n      args,\r\n      rules\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the appropriate classname given a key which was previously\r\n   * registered using cacheClassName.\r\n   */\r\n  public classNameFromKey(key: string): string | undefined {\r\n    return this._keyToClassName[key];\r\n  }\r\n\r\n  /**\r\n   * Gets the arguments associated with a given classname which was\r\n   * previously registered using cacheClassName.\r\n   */\r\n  public argsFromClassName(className: string): IStyle[] | undefined {\r\n    const entry = this._classNameToArgs[className];\r\n\r\n    return (entry && entry.args);\r\n  }\r\n\r\n  /**\r\n * Gets the arguments associated with a given classname which was\r\n * previously registered using cacheClassName.\r\n */\r\n  public insertedRulesFromClassName(className: string): string[] | undefined {\r\n    const entry = this._classNameToArgs[className];\r\n\r\n    return (entry && entry.rules);\r\n  }\r\n\r\n  /**\r\n   * Inserts a css rule into the stylesheet.\r\n   */\r\n  public insertRule(\r\n    rule: string\r\n  ): void {\r\n    const element = this._getElement();\r\n    const injectionMode = element ? this._config.injectionMode : InjectionMode.none;\r\n\r\n    switch (injectionMode) {\r\n      case InjectionMode.insertNode:\r\n        const { sheet } = element!;\r\n\r\n        try {\r\n          // tslint:disable-next-line:no-any\r\n          (sheet as any).insertRule(rule, (sheet as any).cssRules.length);\r\n        } catch (e) {\r\n          /* no-op on errors */\r\n        }\r\n        break;\r\n\r\n      case InjectionMode.appendChild:\r\n        _createStyleElement(rule);\r\n        break;\r\n\r\n      default:\r\n        this._rules.push(rule);\r\n        break;\r\n    }\r\n\r\n    if (this._config.onInsertRule) {\r\n      this._config.onInsertRule(rule);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all rules registered with the stylesheet; only valid when\r\n   * using InsertionMode.none.\r\n   */\r\n  public getRules(): string {\r\n    return (this._rules.join('') || '') + (this._rulesToInsert.join('') || '');\r\n  }\r\n\r\n  /**\r\n   * Resets the internal state of the stylesheet. Only used in server\r\n   * rendered scenarios where we're using InsertionMode.none.\r\n   */\r\n  public reset(): void {\r\n    this._rules = [];\r\n    this._rulesToInsert = [];\r\n    this._counter = 0;\r\n    this._classNameToArgs = {};\r\n    this._keyToClassName = {};\r\n\r\n    if (this._timerId) {\r\n      clearTimeout(this._timerId);\r\n      this._timerId = 0;\r\n    }\r\n  }\r\n\r\n  private _getElement(): HTMLStyleElement | undefined {\r\n    if (!this._styleElement && typeof document !== 'undefined') {\r\n      this._styleElement = _createStyleElement();\r\n    }\r\n    return this._styleElement;\r\n  }\r\n}\r\n\r\nfunction _createStyleElement(content?: string): HTMLStyleElement {\r\n  const styleElement = document.createElement('style');\r\n\r\n  styleElement.setAttribute('data-merge-styles', 'true');\r\n  styleElement.type = 'text/css';\r\n  if (content) {\r\n    styleElement.appendChild(document.createTextNode(content));\r\n  }\r\n  document.head.appendChild(styleElement);\r\n\r\n  return styleElement;\r\n}"]}