{"version":3,"file":"DateMath.js","sourceRoot":"../src/","sources":["utilities/dateMath/DateMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/DateValues';\r\nimport TimeConstants from '../dateValues/TimeConstants';\r\nimport { assertNever } from '../../Utilities';\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of days.\r\n * @param {Date} date - The origin date\r\n * @param {number} days - The number of days to offset. 'days' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of days\r\n */\r\nexport function addDays(date: Date, days: number): Date {\r\n  let result = new Date(date.getTime());\r\n  result.setDate(result.getDate() + days);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of weeks.\r\n * @param {Date} date - The origin date\r\n * @param {number} weeks - The number of weeks to offset. 'weeks' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of weeks\r\n */\r\nexport function addWeeks(date: Date, weeks: number): Date {\r\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of months.\r\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} months - The number of months to offset. 'months' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of months\r\n */\r\nexport function addMonths(date: Date, months: number): Date {\r\n  let result = new Date(date.getTime());\r\n  let newMonth = result.getMonth() + months;\r\n  result.setMonth(newMonth);\r\n\r\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\r\n  // Loop until we back up to a day the new month has.\r\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\r\n  if (result.getMonth() !== (newMonth % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\r\n    result = addDays(result, -result.getDate());\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of years.\r\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} years - The number of years to offset. 'years' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of years\r\n */\r\nexport function addYears(date: Date, years: number): Date {\r\n  let result = new Date(date.getTime());\r\n  result.setFullYear(date.getFullYear() + years);\r\n\r\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\r\n  // Loop until we back up to a day the new month has.\r\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\r\n  if (result.getMonth() !== (date.getMonth() % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\r\n    result = addDays(result, -result.getDate());\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date that is the first day of the month of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the first day of the month.\r\n */\r\nexport function getMonthStart(date: Date): Date {\r\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is the last day of the month of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the last day of the month.\r\n */\r\nexport function getMonthEnd(date: Date): Date {\r\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is the first day of the year of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the first day of the year.\r\n */\r\nexport function getYearStart(date: Date): Date {\r\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is the last day of the year of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the last day of the year.\r\n */\r\nexport function getYearEnd(date: Date): Date {\r\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\r\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} month - The 0-based index of the month to set on the date.\r\n * @return {Date} A new Date object with the given month set.\r\n */\r\nexport function setMonth(date: Date, month: number): Date {\r\n  return addMonths(date, month - date.getMonth());\r\n}\r\n\r\n/**\r\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\r\n * @return {boolean} True if the two dates represent the same date (regardless of time-of-day), false otherwise.\r\n */\r\nexport function compareDates(date1: Date, date2: Date): boolean {\r\n  if (!date1 && !date2) {\r\n    return true;\r\n  } else if (!date1 || !date2) {\r\n    return false;\r\n  } else {\r\n    return (date1.getFullYear() === date2.getFullYear()\r\n      && date1.getMonth() === date2.getMonth()\r\n      && date1.getDate() === date2.getDate());\r\n  }\r\n}\r\n\r\n/**\r\n * Compare the date parts of two dates\r\n * @param {Date} date1 - The first date to compare\r\n * @param {Date} date2 - The second date to compare\r\n * @returns {Number} A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\r\n * if date1 is later than date2.\r\n */\r\nexport function compareDatePart(date1: Date, date2: Date): Number {\r\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\r\n}\r\n\r\n/**\r\n * Gets the date range array including the specified date. The date range array is calculated as the list\r\n * of dates accounting for the specified first day of the week and date range type.\r\n * @param {Date} date - The input date\r\n * @param {DateRangeType} dateRangeType - The desired date range type, i.e., day, week, month, etc.\r\n * @param {DayOfWeek} dayOfWeek - The first day of the week.\r\n * @returns {Date[]} An array of dates representing the date range containing the specified date.\r\n */\r\nexport function getDateRangeArray(date: Date, dateRangeType: DateRangeType, firstDayOfWeek: DayOfWeek): Date[] {\r\n  let datesArray = new Array<Date>();\r\n  let startDate: Date;\r\n  let endDate = null;\r\n\r\n  switch (dateRangeType) {\r\n    case DateRangeType.Day:\r\n      startDate = getDatePart(date);\r\n      endDate = addDays(startDate, 1);\r\n      break;\r\n\r\n    case DateRangeType.Week:\r\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\r\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\r\n      break;\r\n\r\n    case DateRangeType.Month:\r\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\r\n      endDate = addMonths(startDate, 1);\r\n      break;\r\n    default:\r\n      return assertNever(dateRangeType);\r\n  }\r\n\r\n  // Populate the dates array with the dates in range\r\n  datesArray.push(startDate);\r\n  let nextDate = addDays(startDate, 1);\r\n  while (!compareDates(nextDate, endDate)) {\r\n    datesArray.push(nextDate);\r\n    nextDate = addDays(nextDate, 1);\r\n  }\r\n\r\n  return datesArray;\r\n}\r\n\r\n/**\r\n * Checks whether the specified date is in the given date range.\r\n * @param {Date} date - The origin date\r\n * @param {Date[]} dateRange - An array of dates to do the lookup on\r\n * @returns {bool} True if the date matches one of the dates in the specified array, false otherwise.\r\n */\r\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\r\n  for (let dateInRange of dateRange) {\r\n    if (compareDates(date, dateInRange)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns the week number for a date.\r\n * Week numbers are 1 - 52 (53) in a year\r\n * @param {navigatedDate} Date - A date to find the week number for.\r\n * @param {firstDayOfWeek} DayOfWeek - The first day of the week (0-6, Sunday = 0)\r\n * @param {firstWeekOfYear} FirstWeekOfYear - The first week of the year (1-2)\r\n * @return {weeksArray} The weeks number array for the current month.\r\n */\r\nexport function getWeekNumbersInMonth(\r\n  weeksInMonth: number,\r\n  firstDayOfWeek: DayOfWeek,\r\n  firstWeekOfYear: FirstWeekOfYear,\r\n  navigatedDate: Date) {\r\n  let selectedYear = navigatedDate.getFullYear();\r\n  let selectedMonth = navigatedDate.getMonth();\r\n  let dayOfMonth = 1;\r\n  let fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\r\n  let endOfFirstWeek = dayOfMonth\r\n    + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1)\r\n    - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\r\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\r\n  dayOfMonth = endOfWeekRange.getDate();\r\n\r\n  let weeksArray = [];\r\n  for (let i = 0; i < weeksInMonth; i++) {\r\n    // Get week number for end of week\r\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\r\n    dayOfMonth += TimeConstants.DaysInOneWeek;\r\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\r\n  }\r\n  return weeksArray;\r\n}\r\n\r\n/**\r\n * Returns the week number for a date.\r\n * Week numbers are 1 - 52 (53) in a year\r\n * @param {Date} date - A date to find the week number for.\r\n * @param {DayOfWeek} firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\r\n * @param {firstWeekOfYear} firstWeekOfYear - The first week of the year (1-2)\r\n * @return {Number} The week's number in the year.\r\n */\r\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear) {\r\n  // First four-day week of the year - minumum days count\r\n  const fourDayWeek = 4;\r\n\r\n  switch (firstWeekOfYear) {\r\n\r\n    case FirstWeekOfYear.FirstFullWeek:\r\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\r\n\r\n    case FirstWeekOfYear.FirstFourDayWeek:\r\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\r\n\r\n    default:\r\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\r\n * @param {Date} date - The origin date\r\n * @returns {Date} A new date with the time set to midnight\r\n */\r\nfunction getDatePart(date: Date): Date {\r\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n}\r\n\r\n/**\r\n * Gets the date for the first day of the week based on the given date assuming\r\n * the specified first day of the week.\r\n * @param {Date} date - The date to find the beginning of the week date for.\r\n * @return {Date} A new date object representing the first day of the week containing the input date.\r\n */\r\nfunction getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\r\n  let daysOffset = firstDayOfWeek - date.getDay();\r\n  if (daysOffset > 0) {\r\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\r\n    daysOffset -= TimeConstants.DaysInOneWeek;\r\n  }\r\n  return addDays(date, daysOffset);\r\n}\r\n\r\n/**\r\n * Helper function to assist in date comparisons\r\n */\r\nfunction getDatePartHashValue(date: Date) {\r\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\r\n  /* tslint:disable:no-bitwise */\r\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\r\n  /* tslint:enable:no-bitwise */\r\n}\r\n\r\n/**\r\n* Helper function for getWeekNumber.\r\n* Returns week number for a date\r\n* @param {date} Date - current selected date.\r\n* @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\r\n* @param {numberOfFullDays} number - week settings.\r\n* @return {Number} The week's number in the year.\r\n*/\r\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number) {\r\n  let dayOfYear = getDayOfYear(date) - 1;\r\n  let dateWeekDay = date.getDay();\r\n  let num = (date.getDay()) - (dayOfYear % TimeConstants.DaysInOneWeek);\r\n\r\n  let lastDayOfyear = new Date(date.getFullYear(), MonthOfYear.December, 31);\r\n  let daysInYear = getDayOfYear(lastDayOfyear) - 1;\r\n\r\n  let adjustedWeekDay = adjustWeekDay(firstDayOfWeek, dateWeekDay);\r\n\r\n  let num2 = ((firstDayOfWeek - num) + (2 * TimeConstants.DaysInOneWeek)) % TimeConstants.DaysInOneWeek;\r\n  if ((num2 !== 0) && (num2 >= numberOfFullDays)) {\r\n    num2 -= TimeConstants.DaysInOneWeek;\r\n  }\r\n\r\n  let num3 = dayOfYear - num2;\r\n  if (num3 < 0) {\r\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\r\n    num2 = ((firstDayOfWeek - num) + (2 * TimeConstants.DaysInOneWeek)) % TimeConstants.DaysInOneWeek;\r\n    if ((num2 !== 0) && (num2 + 1 >= numberOfFullDays)) {\r\n      num2 -= TimeConstants.DaysInOneWeek;\r\n    }\r\n\r\n    num3 = daysInYear - num2;\r\n  }\r\n\r\n  return Math.floor((num3 / TimeConstants.DaysInOneWeek) + 1);\r\n}\r\n\r\n/**\r\n* Helper function for getWeekNumber.\r\n* Returns week number for a date\r\n* @param {date} Date - current selected date.\r\n* @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\r\n* @return {Number} The week's number in the year.\r\n*/\r\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number) {\r\n  let num = getDayOfYear(date) - 1;\r\n  let num2 = (date.getDay()) - (num % TimeConstants.DaysInOneWeek);\r\n  let num3 = ((num2 - firstDayOfWeek) + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\r\n\r\n  return Math.floor(((num + num3) / TimeConstants.DaysInOneWeek) + 1);\r\n}\r\n\r\n/**\r\n* Helper function for getWeekNumber.\r\n* Returns adjusted week day number when firstDayOfWeek is other than Sunday\r\n* For Week Day Number comparison checks\r\n* @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\r\n* @param {dateWeekDay} DayOfWeek - shifts number forward to 1 week in case passed as true\r\n* @return {DayOfWeek} The day of week adjusted to firstDayOfWeek. E.g. when FirstDyOfWeek is Monday (1), Sunday becomes = 7 (7 > 1).\r\n*/\r\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek) {\r\n  return (firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek) ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\r\n}\r\n\r\n/**\r\n * Returns the day number for a date in a year\r\n * The number of days since January 1st in the particular year.\r\n * @param {Date} date - A date to find the day number for.\r\n * @return {Number} The day's number in the year.\r\n */\r\nfunction getDayOfYear(date: Date) {\r\n  let month = date.getMonth();\r\n  let year = date.getFullYear();\r\n  let daysUntilDate = 0;\r\n\r\n  for (let i = 0; i < month; i++) {\r\n    daysUntilDate += daysInMonth((i + 1), year);\r\n  }\r\n\r\n  daysUntilDate += date.getDate();\r\n\r\n  return daysUntilDate;\r\n}\r\n\r\n/**\r\n * Returns the number of days in the month\r\n * @param {number} month - The month number to target (months 1-12).\r\n * @param {number} year - The year to target.\r\n * @return {Number} The number of days in the month.\r\n */\r\nfunction daysInMonth(month: number, year: number) {\r\n  return new Date(year, month, 0).getDate();\r\n}"]}