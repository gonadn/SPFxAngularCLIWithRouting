{"version":3,"file":"Selection.js","sourceRoot":"../src/","sources":["utilities/selection/Selection.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { IObjectWithKey, ISelection, SELECTION_CHANGE, SelectionMode } from './interfaces';\r\nimport { EventGroup } from '../../Utilities';\r\n\r\nexport interface ISelectionOptions {\r\n  onSelectionChanged?: () => void;\r\n  getKey?: (item: IObjectWithKey, index?: number) => string | number;\r\n  canSelectItem?: (item: IObjectWithKey) => boolean;\r\n  selectionMode?: SelectionMode;\r\n}\r\n\r\nexport class Selection implements ISelection {\r\n  public count: number;\r\n  public readonly mode: SelectionMode;\r\n\r\n  private _getKey: (item: IObjectWithKey, index?: number) => string | number;\r\n  private _canSelectItem: (item: IObjectWithKey) => boolean;\r\n\r\n  private _changeEventSuppressionCount: number;\r\n  private _items: IObjectWithKey[];\r\n  private _selectedItems: IObjectWithKey[] | null;\r\n  private _selectedIndices: number[] | undefined;\r\n  private _isAllSelected: boolean;\r\n  private _exemptedIndices: { [index: string]: boolean };\r\n  private _exemptedCount: number;\r\n  private _keyToIndexMap: { [key: string]: number };\r\n  private _anchoredIndex: number;\r\n  private _onSelectionChanged: (() => void) | undefined;\r\n  private _hasChanged: boolean;\r\n  private _unselectableIndices: { [index: string]: boolean };\r\n  private _unselectableCount: number;\r\n  private _isModal: boolean;\r\n\r\n  constructor(options: ISelectionOptions = {}) {\r\n    const {\r\n      onSelectionChanged,\r\n      getKey,\r\n      canSelectItem = (item: IObjectWithKey) => true,\r\n      selectionMode = SelectionMode.multiple\r\n    } = options;\r\n\r\n    this.mode = selectionMode;\r\n\r\n    this._getKey = getKey || defaultGetKey;\r\n\r\n    this._changeEventSuppressionCount = 0;\r\n    this._exemptedCount = 0;\r\n    this._anchoredIndex = 0;\r\n    this._unselectableCount = 0;\r\n\r\n    this._onSelectionChanged = onSelectionChanged;\r\n    this._canSelectItem = canSelectItem;\r\n\r\n    this._isModal = false;\r\n\r\n    this.setItems([], true);\r\n  }\r\n\r\n  public canSelectItem(item: IObjectWithKey): boolean {\r\n    return this._canSelectItem(item);\r\n  }\r\n\r\n  public getKey(item: IObjectWithKey, index?: number): string {\r\n    const key = this._getKey(item, index);\r\n\r\n    return (typeof key === 'number' || key) ?\r\n      `${key}` :\r\n      '';\r\n  }\r\n\r\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean) {\r\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\r\n\r\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\r\n      this._hasChanged = false;\r\n\r\n      if (!suppressChange) {\r\n        this._change();\r\n      }\r\n    }\r\n  }\r\n\r\n  public isModal(): boolean {\r\n    return this._isModal;\r\n  }\r\n\r\n  public setModal(isModal: boolean): void {\r\n    if (this._isModal !== isModal) {\r\n      this.setChangeEvents(true);\r\n\r\n      this._isModal = isModal;\r\n\r\n      if (!isModal) {\r\n        this.setAllSelected(false);\r\n      }\r\n\r\n      this._change();\r\n\r\n      this.setChangeEvents(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selection needs the items, call this method to set them. If the set\r\n   * of items is the same, this will re-evaluate selection and index maps.\r\n   * Otherwise, shouldClear should be set to true, so that selection is\r\n   * cleared.\r\n   */\r\n  public setItems(items: IObjectWithKey[], shouldClear = true) {\r\n    let newKeyToIndexMap: { [key: string]: number } = {};\r\n    let newUnselectableIndices: { [key: string]: boolean } = {};\r\n    let hasSelectionChanged = false;\r\n\r\n    this.setChangeEvents(false);\r\n\r\n    // Reset the unselectable count.\r\n    this._unselectableCount = 0;\r\n\r\n    // Build lookup table for quick selection evaluation.\r\n    for (let i = 0; i < items.length; i++) {\r\n      let item = items[i];\r\n\r\n      if (item) {\r\n        const key = this.getKey(item, i);\r\n\r\n        if (key) {\r\n          newKeyToIndexMap[key] = i;\r\n        }\r\n      }\r\n\r\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\r\n      if (newUnselectableIndices[i]) {\r\n        this._unselectableCount++;\r\n      }\r\n    }\r\n\r\n    if (shouldClear) {\r\n      this.setAllSelected(false);\r\n    }\r\n\r\n    // Check the exemption list for discrepencies.\r\n    let newExemptedIndicies: { [key: string]: boolean } = {};\r\n\r\n    for (let indexProperty in this._exemptedIndices) {\r\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\r\n        let index = Number(indexProperty);\r\n        let item = this._items[index];\r\n        let exemptKey = item ? this.getKey(item, Number(index)) : undefined;\r\n        let newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\r\n\r\n        if (newIndex === undefined) {\r\n          // We don't know the index of the item any more so it's either moved or removed.\r\n          // In this case we reset the entire selection.\r\n          this.setAllSelected(false);\r\n          break;\r\n        } else {\r\n          // We know the new index of the item. update the existing exemption table.\r\n          newExemptedIndicies[newIndex] = true;\r\n          hasSelectionChanged = hasSelectionChanged || (newIndex !== index);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._exemptedIndices = newExemptedIndicies;\r\n    this._keyToIndexMap = newKeyToIndexMap;\r\n    this._unselectableIndices = newUnselectableIndices;\r\n    this._items = items || [];\r\n    this._selectedItems = null;\r\n\r\n    if (hasSelectionChanged) {\r\n      this._change();\r\n    }\r\n\r\n    this.setChangeEvents(true);\r\n  }\r\n\r\n  public getItems(): IObjectWithKey[] {\r\n    return this._items;\r\n  }\r\n\r\n  public getSelection(): IObjectWithKey[] {\r\n    if (!this._selectedItems) {\r\n      this._selectedItems = [];\r\n\r\n      const items = this._items;\r\n\r\n      if (items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n          if (this.isIndexSelected(i)) {\r\n            this._selectedItems.push(items[i]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return this._selectedItems;\r\n  }\r\n\r\n  public getSelectedCount(): number {\r\n    return this._isAllSelected ? (this._items.length - this._exemptedCount - this._unselectableCount) : (this._exemptedCount);\r\n  }\r\n\r\n  public getSelectedIndices(): number[] {\r\n    if (!this._selectedIndices) {\r\n      this._selectedIndices = [];\r\n\r\n      const items = this._items;\r\n\r\n      if (items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n          if (this.isIndexSelected(i)) {\r\n            this._selectedIndices.push(i);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return this._selectedIndices;\r\n  }\r\n\r\n  public isRangeSelected(fromIndex: number, count: number): boolean {\r\n    if (count === 0) {\r\n      return false;\r\n    }\r\n\r\n    let endIndex = fromIndex + count;\r\n\r\n    for (let i = fromIndex; i < endIndex; i++) {\r\n      if (!this.isIndexSelected(i)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isAllSelected(): boolean {\r\n    let selectableCount = this._items.length - this._unselectableCount;\r\n\r\n    // In single mode, we can only have a max of 1 item.\r\n    if (this.mode === SelectionMode.single) {\r\n      selectableCount = Math.min(selectableCount, 1);\r\n    }\r\n\r\n    return (\r\n      (this.count > 0) &&\r\n      (this._isAllSelected && this._exemptedCount === 0) ||\r\n      (!this._isAllSelected && (this._exemptedCount === selectableCount) && selectableCount > 0));\r\n  }\r\n\r\n  public isKeySelected(key: string): boolean {\r\n    let index = this._keyToIndexMap[key];\r\n\r\n    return this.isIndexSelected(index);\r\n  }\r\n\r\n  public isIndexSelected(index: number): boolean {\r\n    return !!(\r\n      (this.count > 0) &&\r\n      (this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\r\n      (!this._isAllSelected && this._exemptedIndices[index]));\r\n  }\r\n\r\n  public setAllSelected(isAllSelected: boolean): void {\r\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\r\n      return;\r\n    }\r\n\r\n    let selectableCount = this._items ? (this._items.length - this._unselectableCount) : 0;\r\n\r\n    this.setChangeEvents(false);\r\n\r\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\r\n      this._exemptedIndices = {};\r\n\r\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\r\n        this._exemptedCount = 0;\r\n        this._isAllSelected = isAllSelected;\r\n        this._change();\r\n      }\r\n\r\n      this._updateCount();\r\n    }\r\n\r\n    this.setChangeEvents(true);\r\n  }\r\n\r\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\r\n    let index = this._keyToIndexMap[key];\r\n\r\n    if (index >= 0) {\r\n      this.setIndexSelected(index, isSelected, shouldAnchor);\r\n    }\r\n  }\r\n\r\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\r\n    if (this.mode === SelectionMode.none) {\r\n      return;\r\n    }\r\n\r\n    // Clamp the index.\r\n    index = Math.min(Math.max(0, index), this._items.length - 1);\r\n\r\n    // No-op on out of bounds selections.\r\n    if (index < 0 || index >= this._items.length) {\r\n      return;\r\n    }\r\n\r\n    this.setChangeEvents(false);\r\n\r\n    let isExempt = this._exemptedIndices[index];\r\n    let hasChanged = false;\r\n    let canSelect = !this._unselectableIndices[index];\r\n\r\n    if (canSelect) {\r\n      if (isSelected && this.mode === SelectionMode.single) {\r\n        // If this is single-select, the previous selection should be removed.\r\n        this.setAllSelected(false);\r\n      }\r\n\r\n      // Determine if we need to remove the exemption.\r\n      if (isExempt && (\r\n        (isSelected && this._isAllSelected) ||\r\n        (!isSelected && !this._isAllSelected)\r\n      )) {\r\n        hasChanged = true;\r\n        delete this._exemptedIndices[index];\r\n        this._exemptedCount--;\r\n      }\r\n\r\n      // Determine if we need to add the exemption.\r\n      if (!isExempt && (\r\n        (isSelected && !this._isAllSelected) ||\r\n        (!isSelected && this._isAllSelected)\r\n      )) {\r\n        hasChanged = true;\r\n        this._exemptedIndices[index] = true;\r\n        this._exemptedCount++;\r\n      }\r\n\r\n      if (shouldAnchor) {\r\n        this._anchoredIndex = index;\r\n      }\r\n    }\r\n\r\n    this._updateCount();\r\n\r\n    this.setChangeEvents(true);\r\n  }\r\n\r\n  public selectToKey(key: string, clearSelection?: boolean): void {\r\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\r\n  }\r\n\r\n  public selectToIndex(index: number, clearSelection?: boolean): void {\r\n    if (this.mode === SelectionMode.none) {\r\n      return;\r\n    }\r\n\r\n    if (this.mode === SelectionMode.single) {\r\n      this.setIndexSelected(index, true, true);\r\n      return;\r\n    }\r\n\r\n    let anchorIndex = this._anchoredIndex || 0;\r\n    let startIndex = Math.min(index, anchorIndex);\r\n    let endIndex = Math.max(index, anchorIndex);\r\n\r\n    this.setChangeEvents(false);\r\n\r\n    if (clearSelection) {\r\n      this.setAllSelected(false);\r\n    }\r\n\r\n    for (; startIndex <= endIndex; startIndex++) {\r\n      this.setIndexSelected(startIndex, true, false);\r\n    }\r\n\r\n    this.setChangeEvents(true);\r\n  }\r\n\r\n  public toggleAllSelected(): void {\r\n    this.setAllSelected(!this.isAllSelected());\r\n  }\r\n\r\n  public toggleKeySelected(key: string): void {\r\n    this.setKeySelected(key, !this.isKeySelected(key), true);\r\n  }\r\n\r\n  public toggleIndexSelected(index: number): void {\r\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\r\n  }\r\n\r\n  public toggleRangeSelected(fromIndex: number, count: number): void {\r\n    if (this.mode === SelectionMode.none) {\r\n      return;\r\n    }\r\n\r\n    let isRangeSelected = this.isRangeSelected(fromIndex, count);\r\n    let endIndex = fromIndex + count;\r\n\r\n    if (this.mode === SelectionMode.single && count > 1) {\r\n      return;\r\n    }\r\n\r\n    this.setChangeEvents(false);\r\n    for (let i = fromIndex; i < endIndex; i++) {\r\n      this.setIndexSelected(i, !isRangeSelected, false);\r\n    }\r\n    this.setChangeEvents(true);\r\n  }\r\n\r\n  private _updateCount(): void {\r\n    const count = this.getSelectedCount();\r\n\r\n    if (count !== this.count) {\r\n      this.count = count;\r\n      this._change();\r\n    }\r\n\r\n    if (!this.count) {\r\n      this.setModal(false);\r\n    }\r\n  }\r\n\r\n  private _change(): void {\r\n    if (this._changeEventSuppressionCount === 0) {\r\n      this._selectedItems = null;\r\n      this._selectedIndices = undefined;\r\n\r\n      EventGroup.raise(this, SELECTION_CHANGE);\r\n\r\n      if (this._onSelectionChanged) {\r\n        this._onSelectionChanged();\r\n      }\r\n    } else {\r\n      this._hasChanged = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction defaultGetKey(item: IObjectWithKey, index?: number): string | number {\r\n  return item && item.key ?\r\n    item.key :\r\n    `${index}`;\r\n}\r\n"]}