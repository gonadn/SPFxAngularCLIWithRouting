{"version":3,"file":"Suggestions.Props.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/Suggestions.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { ISuggestionModel } from './SuggestionsController';\r\nimport { IRenderFunction, KeyCodes } from '../../../Utilities';\r\nimport { IPersonaProps } from '../../Persona/Persona.Props';\r\n\r\nexport interface ISuggestionsProps<T> extends React.Props<any> {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: () => void;\r\n\r\n  /**\r\n   * How the suggestion should look in the suggestion list.\r\n   */\r\n  onRenderSuggestion?: (props: T, suggestionItemProps: T) => JSX.Element;\r\n  /**\r\n   * What should occur when a suggestion is clicked\r\n   */\r\n  onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\r\n  /**\r\n   * The list of Suggestions that will be displayed\r\n   */\r\n  suggestions: ISuggestionModel<T>[];\r\n  /**\r\n  * How the \"no result found\" should look in the suggestion list.\r\n  */\r\n  onRenderNoResultFound?: IRenderFunction<void>;\r\n  /**\r\n   * The text that appears at the top of the suggestions list.\r\n   */\r\n  suggestionsHeaderText?: string;\r\n  /**\r\n   * The text that should appear at the top of the most recenty used box.\r\n   */\r\n  mostRecentlyUsedHeaderText?: string;\r\n  /**\r\n   * The text that appears indicating to the user that they can search for more results.\r\n   */\r\n  searchForMoreText?: string;\r\n  /**\r\n   * The callback that should be called when the user attempts to get more results\r\n   */\r\n  onGetMoreResults?: () => void;\r\n  /**\r\n   * The CSS classname of the suggestions list.\r\n   */\r\n  className?: string;\r\n  /**\r\n   * The text that should appear if there is a search error.\r\n   */\r\n  searchErrorText?: string;\r\n  /**\r\n   * The text that should appear if no results are found when searching.\r\n   */\r\n  noResultsFoundText?: string;\r\n  /**\r\n   * the classname of the suggestionitem.\r\n   */\r\n  suggestionsItemClassName?: string;\r\n  /**\r\n   * Used to indicate whether or not the user can request more suggestions.\r\n   * Dictates whether or not the searchForMore button is displayed.\r\n   */\r\n  moreSuggestionsAvailable?: boolean;\r\n  /**\r\n   * Used to indicate whether or not the suggestions are loading.\r\n   */\r\n  isLoading?: boolean;\r\n  /**\r\n   * Used to indicate whether or not the component is searching for more results.\r\n   */\r\n  isSearching?: boolean;\r\n  /**\r\n   * The text to display while the results are loading.\r\n   */\r\n  loadingText?: string;\r\n  /**\r\n   * The text to display while searching for more results in a limited sugesstions list.\r\n   */\r\n  searchingText?: string;\r\n  /**\r\n   * Indicates if a short list of recent suggestions should be shown.\r\n   */\r\n  isMostRecentlyUsedVisible?: boolean;\r\n  /**\r\n   * Function to fire when one of the optional remove buttons on a suggestion is clicked.\r\n   */\r\n  onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;\r\n  /**\r\n   * Indicates if the text in resultsFooter or resultsFooterFull should be shown at the end of the suggestion list.\r\n   */\r\n  isResultsFooterVisible?: boolean;\r\n  /**\r\n   * Maximum number of suggestions to show in the full suggestion list.\r\n   */\r\n  resultsMaximumNumber?: number;\r\n  /**\r\n   * A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.\r\n   */\r\n  resultsFooterFull?: (props: ISuggestionsProps<T>) => JSX.Element;\r\n  /**\r\n   * A renderer that adds an element at the end of the suggestions list it has fewer items than resultsMaximumNumber.\r\n   */\r\n  resultsFooter?: (props: ISuggestionsProps<T>) => JSX.Element;\r\n  /**\r\n   * Indicates whether to show a button with each suggestion to remove that suggestion.\r\n   */\r\n  showRemoveButtons?: boolean;\r\n  /**\r\n   * Screen reader message to read when there are suggestions available.\r\n   */\r\n  suggestionsAvailableAlertText?: string;\r\n  /**\r\n   * A function that resets focus to the expected item in the suggestion list\r\n   */\r\n  refocusSuggestions?: (keyCode: KeyCodes) => void;\r\n  /**\r\n   * An ARIA label for the container that is the parent of the suggestions.\r\n   */\r\n  suggestionsContainerAriaLabel?: string;\r\n}\r\n\r\nexport interface ISuggestionItemProps<T> {\r\n  componentRef?: () => void;\r\n  suggestionModel: ISuggestionModel<T>;\r\n  RenderSuggestion: (item: T, suggestionItemProps?: ISuggestionItemProps<T>) => JSX.Element;\r\n  onClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n  onRemoveItem: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n  className?: string;\r\n  id?: string;\r\n  showRemoveButton?: boolean;\r\n}"]}