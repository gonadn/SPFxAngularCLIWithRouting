{"version":3,"file":"Layer.Hosted.Example.js","sourceRoot":"../src/","sources":["components/Layer/examples/Layer.Hosted.Example.tsx"],"names":[],"mappings":";;;IAQA,IAAM,aAAa,GAAQ,mBAAmB,CAAC;IAE/C;QAAwC,8CAAyB;QAC/D;YAAA,YACE,iBAAO,SAKR;YAJC,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,IAAI;aACf,CAAC;;QACJ,CAAC;QAEM,mCAAM,GAAb;YACM,IAAA,eAAoC,EAAlC,wBAAS,EAAE,sBAAQ,CAAgB;YACzC,IAAI,OAAO,GAAG,CACZ,6BAAK,SAAS,EAAG,uBAAuB,GAAG,6BAAmB,CAAC,YAAY,qCAErE,CACP,CAAC;YAEF,MAAM,CAAC,CACL;gBACE,oBAAC,eAAM,IACL,KAAK,EAAC,WAAW,EACjB,OAAO,EAAG,QAAQ,EAClB,SAAS,EAAG,IAAI,CAAC,eAAe,GAChC;gBAEA,QAAQ,IAAI,CACZ,oBAAC,iBAAS,IAAC,EAAE,EAAC,YAAY,EAAC,SAAS,EAAC,yBAAyB,GAAG,CAClE;gBAED,2BAAG,EAAE,EAAC,KAAK,uUAEP;gBAEJ,oBAAC,mBAAQ,IACP,SAAS,EAAG,aAAa,CAAC,eAAe,EACzC,KAAK,EAAC,oEAAoE,EAC1E,OAAO,EAAG,SAAS,EACnB,QAAQ,EAAG,IAAI,CAAC,iBAAiB,GACjC;gBAEA,SAAS,CAAC,CAAC,CAAC,CACZ,oBAAC,aAAK,IACJ,MAAM,EAAC,YAAY,EACnB,eAAe,EAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,kBAAkB,EAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAE3C,OAAO,CACH,CACT,CAAC,CAAC,CAAC,OAAO;gBAEX,6BAAK,SAAS,EAAC,yBAAyB,uCAAuC,CAE3E,CACP,CAAC;QACJ,CAAC;QAEO,iCAAI,GAAZ,UAAa,IAAY;YACvB,MAAM,CAAC;gBACL,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC,CAAC;QACJ,CAAC;QAGO,8CAAiB,GAAzB,UAA0B,EAAmD,EAAE,OAAgB;YAC7F,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;QACxC,CAAC;QAGO,4CAAe,GAAvB,UAAwB,OAAgB;YACtC,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;QACvC,CAAC;QAPD;YADC,oBAAQ;mEAGR;QAGD;YADC,oBAAQ;iEAGR;QACH,yBAAC;KAAA,AAvED,CAAwC,KAAK,CAAC,SAAS,GAuEtD;IAvEY,gDAAkB","sourcesContent":["import * as React from 'react';\r\nimport { autobind } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Layer, LayerHost } from 'office-ui-fabric-react/lib/Layer';\r\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\r\nimport { AnimationClassNames } from '../../../Styling';\r\nimport './Layer.Example.scss';\r\nimport * as exampleStylesImport from '../../../common/_exampleStyles.scss';\r\nconst exampleStyles: any = exampleStylesImport;\r\n\r\nexport class LayerHostedExample extends React.Component<any, any> {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      showLayer: false,\r\n      showHost: true\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { showLayer, showHost } = this.state;\r\n    let content = (\r\n      <div className={ 'LayerExample-content ' + AnimationClassNames.scaleUpIn100 } >\r\n        This is example layer content.\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Toggle\r\n          label='Show host'\r\n          checked={ showHost }\r\n          onChanged={ this._onChangeToggle }\r\n        />\r\n\r\n        { showHost && (\r\n          <LayerHost id='layerhost1' className='LayerExample-customHost' />\r\n        ) }\r\n\r\n        <p id='foo'>\r\n          In some cases, you may need to contain layered content within an area. Create an instance of a LayerHost along with an id, and provide a hostId on the layer to render it within the specific host. (Note that it's important that you don't include children within the LayerHost. It's meant to contain Layered content only.)\r\n        </p>\r\n\r\n        <Checkbox\r\n          className={ exampleStyles.exampleCheckbox }\r\n          label='Render the box below in a Layer and target it at hostId=layerhost1'\r\n          checked={ showLayer }\r\n          onChange={ this._onChangeCheckbox }\r\n        />\r\n\r\n        { showLayer ? (\r\n          <Layer\r\n            hostId='layerhost1'\r\n            onLayerDidMount={ this._log('didmount') }\r\n            onLayerWillUnmount={ this._log('willunmount') }\r\n          >\r\n            { content }\r\n          </Layer>\r\n        ) : content }\r\n\r\n        <div className='LayerExample-nonLayered'>I am normally below the content.</div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _log(text: string): () => void {\r\n    return (): void => {\r\n      console.log(text);\r\n    };\r\n  }\r\n\r\n  @autobind\r\n  private _onChangeCheckbox(ev: React.FormEvent<HTMLElement | HTMLInputElement>, checked: boolean): void {\r\n    this.setState({ showLayer: checked });\r\n  }\r\n\r\n  @autobind\r\n  private _onChangeToggle(checked: boolean): void {\r\n    this.setState({ showHost: checked });\r\n  }\r\n}"]}