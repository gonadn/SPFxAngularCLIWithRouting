{"version":3,"file":"ComboBox.Props.js","sourceRoot":"../src/","sources":["components/ComboBox/ComboBox.Props.ts"],"names":[],"mappings":"","sourcesContent":["import { IIconProps } from '../../Icon';\r\nimport { ISelectableOption } from '../../utilities/selectableOption/SelectableOption.Props';\r\nimport { ISelectableDroppableTextProps } from '../../utilities/selectableOption/SelectableDroppableText.Props';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { IRenderFunction } from '../../Utilities';\r\n\r\nexport interface IComboBox {\r\n  /**\r\n  * If there is a menu open this will dismiss the menu\r\n  */\r\n  dismissMenu: () => void;\r\n\r\n  /**\r\n   * Sets focus to the input in the comboBox\r\n   * @returns True if focus could be set, false if no operation was taken.\r\n   */\r\n  focus(): boolean;\r\n}\r\n\r\nexport interface IComboBoxOption extends ISelectableOption {\r\n  /**\r\n   * Specific styles for each comboBox option. If you intend to give\r\n   * common styles to all comboBox option please use\r\n   * the prop comboBoxOptionStyles\r\n   */\r\n  styles?: Partial<IComboBoxOptionStyles>;\r\n}\r\n\r\nexport interface IComboBoxProps extends ISelectableDroppableTextProps<IComboBox> {\r\n  /**\r\n   * Optional callback to access the IComboBox interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: IComboBox) => void;\r\n\r\n  /**\r\n   * Collection of options for this ComboBox\r\n   */\r\n  options: IComboBoxOption[];\r\n\r\n  /**\r\n   * Callback issues when either:\r\n   * 1) the selected option changes\r\n   * 2) a manually edited value is submitted. In this case there may not be a matched option if allowFreeform is also true\r\n   *    (and hence only value would be true, the other parameter would be null in this case)\r\n   */\r\n  onChanged?: (option?: IComboBoxOption, index?: number, value?: string) => void;\r\n\r\n  /**\r\n   * Function that gets invoked when the ComboBox menu is launched\r\n   */\r\n  onMenuOpen?: () => void;\r\n\r\n  /**\r\n   * Callback issued when the options should be resolved, if they have been updated or\r\n   * if they need to be passed in the first time\r\n   */\r\n  onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>;\r\n\r\n  /**\r\n   * Callback issued when the ComboBox requests the list to scroll to a specific element\r\n   */\r\n  onScrollToItem?: (itemIndex: number) => void;\r\n\r\n  /**\r\n   * Whether the ComboBox is free form, meaning that the user input is not bound to provided options. Defaults to false.\r\n   */\r\n  allowFreeform?: boolean;\r\n\r\n  /**\r\n   * Whether the ComboBox auto completes. As the user is inputing text, it will be suggested potential matches from the list of options. If\r\n   * the combo box is expanded, this will also scroll to the suggested option, and give it a selected style.\r\n   *\r\n   * @default \"on\"\r\n   */\r\n  autoComplete?: 'on' | 'off';\r\n\r\n  /**\r\n   * Value to show in the input, does not have to map to a combobox option\r\n   */\r\n  value?: string;\r\n\r\n  /**\r\n   * The IconProps to use for the button aspect of the combobox\r\n   */\r\n  buttonIconProps?: IIconProps;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Custom styles for this component\r\n   */\r\n  styles?: Partial<IComboBoxStyles>;\r\n\r\n  /**\r\n   * Styles for the caret down button.\r\n   */\r\n  caretDownButtonStyles?: Partial<IButtonStyles>;\r\n\r\n  /**\r\n   * Default styles that should be applied to ComboBox options,\r\n   * in case an option does not come with user-defined custom styles\r\n   */\r\n  comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;\r\n\r\n  /**\r\n   * When options are scrollable the selected option is positioned at the top of the callout when it is opened (unless it has reached the end of the scrollbar).\r\n   * @default false;\r\n   */\r\n  scrollSelectedToTop?: boolean;\r\n\r\n  /**\r\n   * Add additional content below the callout list.\r\n   */\r\n  onRenderLowerContent?: IRenderFunction<IComboBoxProps>;\r\n}\r\n\r\nexport interface IComboBoxStyles {\r\n  /**\r\n   * Style for the container which has the ComboBox and the label\r\n   */\r\n  container: IStyle;\r\n\r\n  /**\r\n   * Style for the label element of the ComboBox.\r\n   */\r\n  label: IStyle;\r\n\r\n  /**\r\n   * Style for the label element of the ComboBox in the disabled state.\r\n   */\r\n  labelDisabled: IStyle;\r\n\r\n  /**\r\n   * Base styles for the root element of all ComboBoxes.\r\n   */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Styles for the root element for variant of ComboBox with an errorMessage in the props.\r\n   */\r\n  rootError: IStyle;\r\n\r\n  /**\r\n   * Styles for variant of ComboBox where allowFreeForm is false in the props.\r\n   */\r\n  rootDisallowFreeForm: IStyle;\r\n\r\n  /**\r\n   * Styles for when the ComboBox is hovered. These styles are applied for all comboBoxes except when\r\n   * the comboBox is disabled.\r\n   */\r\n  rootHovered: IStyle;\r\n\r\n  /**\r\n   * Styles for when the ComboBox is focused. These styles are applied for all comboBoxes except when\r\n   * the comboBox is disabled.\r\n   */\r\n  rootFocused: IStyle;\r\n\r\n  /**\r\n   * Styles for when the comboBox is disabled. These styles override all the other styles.\r\n   * NOTE : Hover (or) Focused (or) active styles are not applied for disabled comboBoxes.\r\n   */\r\n  rootDisabled: IStyle;\r\n\r\n  /**\r\n   * Base styles for the input element - which contains the currently selected\r\n   * option.\r\n   */\r\n  input: IStyle;\r\n\r\n  /**\r\n   * Style override for the input element when comboBox is disabled.\r\n   */\r\n  inputDisabled: IStyle;\r\n\r\n  /**\r\n   * Styles for the error Message text of the comboBox.\r\n   */\r\n  errorMessage: IStyle;\r\n\r\n  /**\r\n   * Styles for the callout.\r\n   */\r\n  callout: IStyle;\r\n\r\n  /**\r\n  * Styles for the optionsContainerWrapper.\r\n  */\r\n  optionsContainerWrapper: IStyle;\r\n\r\n  /**\r\n   * Styles for the container of all the Combobox options\r\n   * Includes the headers and dividers.\r\n   */\r\n  optionsContainer: IStyle;\r\n\r\n  /**\r\n * Styles for a header in the options.\r\n */\r\n  header: IStyle;\r\n\r\n  /**\r\n   * Styles for a divider in the options.\r\n   */\r\n  divider: IStyle;\r\n}\r\n\r\nexport interface IComboBoxOptionStyles extends IButtonStyles {\r\n\r\n  /**\r\n   * Styles for the text inside the comboBox option.\r\n   * This should be used instead of the description\r\n   * inside IButtonStyles because we custom render the text\r\n   * in the comboBox options.\r\n   */\r\n  optionText: IStyle;\r\n}\r\n"]}