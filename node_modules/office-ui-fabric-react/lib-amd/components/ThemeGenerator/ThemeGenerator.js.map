{"version":3,"file":"ThemeGenerator.js","sourceRoot":"../src/","sources":["components/ThemeGenerator/ThemeGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  IColor,\r\n  getColorFromString\r\n} from '../../utilities/color/colors';\r\nimport {\r\n  isValidShade,\r\n  getShade,\r\n  getBackgroundShade\r\n} from '../../utilities/color/shades';\r\nimport { format } from '../../Utilities';\r\n\r\nimport { IThemeSlotRule } from './IThemeSlotRule';\r\nimport { IThemeRules } from './IThemeRules';\r\n\r\nexport class ThemeGenerator {\r\n\r\n  /* Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules in the theme that\r\n   *   inherit from that color.\r\n   * isInverted: whether it's a dark theme or not, which affects the algorithm used to generate shades\r\n   * isCustomization should be true only if it's a user action, and indicates overwriting the slot's inheritance (if any)\r\n   * overwriteCustomColor: a slot could have a generated color based on its inheritance rules (isCustomized is false), or a custom color\r\n                            based on user input (isCustomized is true), this bool tells us whether to override existing customized colors */\r\n  public static setSlot(\r\n    rule: IThemeSlotRule,\r\n    color: string | IColor,\r\n    isInverted = false,\r\n    isCustomization = false,\r\n    overwriteCustomColor = true\r\n  ) {\r\n    if (!rule.color && rule.value) {\r\n      // not a color rule\r\n      return;\r\n    }\r\n\r\n    if (overwriteCustomColor) {\r\n      let colorAsIColor: IColor;\r\n      if (typeof color === 'string') {\r\n        colorAsIColor = getColorFromString(color)!; // the ! is a lie here but we'll verify it in the next line\r\n        if (!colorAsIColor) {\r\n          throw 'color is invalid in setSlot(): ' + color;\r\n        }\r\n      } else {\r\n        colorAsIColor = color;\r\n      }\r\n      ThemeGenerator._setSlot(rule, colorAsIColor, isInverted, isCustomization, overwriteCustomColor);\r\n    } else if (rule.color) {\r\n      ThemeGenerator._setSlot(rule, rule.color, isInverted, isCustomization, overwriteCustomColor);\r\n    }\r\n  }\r\n\r\n  /* Sets the color of each slot based on its rule. Slots that don't inherit must have a color already.\r\n   * If this completes without error, then the theme is ready to use. (All slots will have a color.)\r\n   * setSlot() can be called before this, but this must be called before getThemeAs*().\r\n   * Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\r\n   */\r\n  public static insureSlots(slotRules: IThemeRules, isInverted: boolean) {\r\n    // Get all the \"root\" rules, the ones which don't inherit. Then \"set\" them to trigger updating dependent slots.\r\n    for (let ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        let rule: IThemeSlotRule = slotRules[ruleName];\r\n        if (!rule.inherits && !rule.value) {\r\n          if (!rule.color) {\r\n            throw 'A color slot rule that does not inherit must provide its own color.';\r\n          }\r\n          ThemeGenerator._setSlot(rule, rule.color, isInverted, false, false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints\r\n   * { [theme slot name as string] : [color as string],\r\n   *  \"tokenName\": \"#f00f00\",\r\n   *  \"tokenName2\": \"#ba2ba2\",\r\n   *   ... }\r\n   */\r\n  public static getThemeAsJson(slotRules: IThemeRules): any {\r\n    let theme: any = {};\r\n    for (let ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        let rule: IThemeSlotRule = slotRules[ruleName];\r\n        theme[rule.name] = rule.color ? rule.color.str : rule.value || '';\r\n      }\r\n    }\r\n    return theme;\r\n  }\r\n\r\n  /* Gets the theme as a list of SASS variables that can be used in code\r\n   * $tokenName: \"[theme:tokenName, default:#f00f00]\";\r\n   * $tokenName2: \"[theme:tokenName2, default:#ba2ba2]\";\r\n   * ...\r\n   */\r\n  public static getThemeAsSass(slotRules: IThemeRules): any {\r\n    let sassVarTemplate = '${0}Color: \"[theme: {1}, default: {2}]\";\\n';\r\n    let output = '';\r\n\r\n    for (let ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        let rule: IThemeSlotRule = slotRules[ruleName];\r\n        let camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\r\n        output += format(sassVarTemplate,\r\n          camelCasedName,\r\n          camelCasedName,\r\n          rule.color ? rule.color.str : rule.value || '');\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /* Gets the theme formatted for PowerShell scripts\r\n   * @{\r\n   * \"tokenName\" = \"#f00f00\";\r\n   * \"tokenName2\" = \"#ba2ba2\";\r\n   * ...\r\n   * }\r\n   */\r\n  public static getThemeForPowerShell(slotRules: IThemeRules): any {\r\n    let psVarTemplate = '\"{0}\" = \"{1}\";\\n';\r\n    let output = '';\r\n\r\n    for (let ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        let rule: IThemeSlotRule = slotRules[ruleName];\r\n        if (rule.value) {\r\n          // skip this one, it's not a color\r\n          continue;\r\n        }\r\n        let camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\r\n        let outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\r\n        // powershell endpoint uses the RGBA format\r\n        if (rule.color && rule.color.a && rule.color.a !== 100) {\r\n          outputColor += String(rule.color.a.toString(16));\r\n        }\r\n        output += format(psVarTemplate,\r\n          camelCasedName,\r\n          outputColor);\r\n      }\r\n    }\r\n    return '@{\\n' + output + '}';\r\n  }\r\n\r\n  /* Sets the given slot's color to the appropriate color, shading it if necessary.\r\n     Then, iterates through all other rules (that are this rule's dependents) to update them accordingly.\r\n     isCustomization=true means it's a user provided color, set it to that raw color\r\n     isCustomization=false means the rule it's inheriting from changed, so updated using asShade */\r\n  private static _setSlot(\r\n    rule: IThemeSlotRule,\r\n    color: IColor,\r\n    isInverted: boolean,\r\n    isCustomization: boolean,\r\n    overwriteCustomColor = true\r\n  ) {\r\n    if (!rule.color && rule.value) {\r\n      // not a color rule\r\n      return;\r\n    }\r\n\r\n    if (overwriteCustomColor || !rule.color || !rule.isCustomized || !rule.inherits) { // set the rule's color under these conditions\r\n      if ((overwriteCustomColor || !rule.isCustomized) && !isCustomization && rule.inherits && isValidShade(rule.asShade)) {\r\n        // it's inheriting by shade\r\n        if (rule.isBackgroundShade) {\r\n          rule.color = getBackgroundShade(color, rule.asShade!, isInverted)!;\r\n        } else {\r\n          rule.color = getShade(color, rule.asShade!, isInverted)!;\r\n        }\r\n        rule.isCustomized = false;\r\n      } else {\r\n        rule.color = color;\r\n        rule.isCustomized = true;\r\n      }\r\n\r\n      // then update dependent colors\r\n      for (let ruleToUpdate of rule.dependentRules) {\r\n        ThemeGenerator._setSlot(ruleToUpdate, rule.color, isInverted, false, overwriteCustomColor);\r\n      }\r\n    }\r\n  }\r\n}"]}