{"version":3,"file":"Dialog.Props.js","sourceRoot":"../src/","sources":["components/Dialog/Dialog.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IModalProps } from '../../Modal';\r\nimport { Dialog } from './Dialog';\r\nimport { DialogType, IDialogContentProps } from './DialogContent.Props';\r\nimport { IButtonProps } from '../Button/Button.Props';\r\nimport { IWithResponsiveModeState } from '../../utilities/decorators/withResponsiveMode';\r\nimport { IAccessiblePopupProps } from '../../common/IAccessiblePopupProps';\r\n\r\nexport interface IDialog {\r\n\r\n}\r\n\r\nexport interface IDialogProps extends React.Props<Dialog>, IWithResponsiveModeState, IAccessiblePopupProps {\r\n\r\n  /**\r\n   * Optional callback to access the IDialog interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: IDialog) => void;\r\n\r\n  /**\r\n  * Props to be passed through to Dialog Content\r\n  */\r\n  dialogContentProps?: IDialogContentProps;\r\n\r\n  /**\r\n  * A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal.\r\n  */\r\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\r\n\r\n  /**\r\n  * Whether the dialog is hidden.\r\n  * @default false\r\n  */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n  * Props to be passed through to Modal\r\n  */\r\n  modalProps?: IModalProps;\r\n\r\n  /**\r\n  * Whether the dialog is displayed.\r\n  * @default false\r\n  * @deprecated Use hidden instead\r\n  */\r\n  isOpen?: boolean;\r\n\r\n  /**\r\n  * Whether the overlay is dark themed.\r\n  * @default true\r\n  * @deprecated Pass through via modalProps instead\r\n  */\r\n  isDarkOverlay?: boolean;\r\n\r\n  /**\r\n   * A callback function which is called after the Dialog is dismissed and the animation is complete.\r\n   * @deprecated Pass through via modalProps instead\r\n   */\r\n  onDismissed?: () => any;\r\n\r\n  /**\r\n  * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\r\n  * @default false\r\n  * @deprecated Pass through via modalProps instead\r\n  */\r\n  isBlocking?: boolean;\r\n\r\n  /**\r\n   * Optional class name to be added to the root class\r\n   * @deprecated Pass through via modalProps.className instead\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n  * Optional override for container class\r\n  * @deprecated Pass through via modalProps.className instead\r\n  */\r\n  containerClassName?: string;\r\n\r\n  /**\r\n   * A callback function for when the Dialog content is mounted on the overlay layer\r\n   * @deprecated Pass through via modalProps instead\r\n   */\r\n  onLayerDidMount?: () => void;\r\n\r\n  /**\r\n * Deprecated at 0.81.2, use 'onLayerDidMount' instead.\r\n * @deprecated\r\n */\r\n  onLayerMounted?: () => void;\r\n\r\n  /**\r\n  * The type of Dialog to display.\r\n  * @default DialogType.normal\r\n  * @deprecated Pass through via dialogContentProps instead\r\n  */\r\n  type?: DialogType;\r\n\r\n  /**\r\n  * The title text to display at the top of the dialog.\r\n  * @deprecated Pass through via dialogContentProps instead\r\n  */\r\n  title?: string;\r\n\r\n  /**\r\n  * The subtext to display in the dialog.\r\n  * @deprecated Pass through via dialogContentProps instead\r\n  */\r\n  subText?: string;\r\n\r\n  /**\r\n  * Optional override content class\r\n  * @deprecated Pass through via dialogContentProps instead as className\r\n  */\r\n  contentClassName?: string;\r\n\r\n  /**\r\n   * Other top buttons that will show up next to the close button\r\n   * @deprecated Pass through via dialogContentProps instead\r\n   */\r\n  topButtonsProps?: IButtonProps[];\r\n\r\n  /**\r\n  * Optional id for aria-LabelledBy\r\n  * @deprecated Pass through via modalProps.titleAriaId instead\r\n  */\r\n  ariaLabelledById?: string;\r\n\r\n  /**\r\n  * Optional id for aria-DescribedBy\r\n  * @deprecated Pass through via modalProps.subtitleAriaId instead\r\n  */\r\n  ariaDescribedById?: string;\r\n\r\n}"]}