{"version":3,"file":"ContextualMenu.Checkmarks.Example.js","sourceRoot":"../src/","sources":["components/ContextualMenu/examples/ContextualMenu.Checkmarks.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IContextualMenuItem, ContextualMenuItemType } from 'office-ui-fabric-react/lib/ContextualMenu';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport './ContextualMenuExample.scss';\r\n\r\nexport interface IContextualMenuMultiselectExampleState {\r\n  selection?: { [key: string]: boolean };\r\n}\r\n\r\nlet keys: string[] = ['newItem', 'share', 'mobile', 'enablePrint', 'enableMusic', 'newSub', 'emailMessage', 'calendarEvent'];\r\n\r\nexport class ContextualMenuCheckmarksExample extends React.Component<any, IContextualMenuMultiselectExampleState> {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._onToggleSelect = this._onToggleSelect.bind(this);\r\n\r\n    this.state = {\r\n      selection: {},\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { selection } = this.state;\r\n\r\n    return (\r\n      <DefaultButton\r\n        id='ContextualMenuButton2'\r\n        text='Click for ContextualMenu'\r\n        menuProps={\r\n          {\r\n            shouldFocusOnMount: true,\r\n            items:\r\n            [\r\n              {\r\n                key: keys[0],\r\n                name: 'New',\r\n                canCheck: true,\r\n                isChecked: selection![keys[0]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[1],\r\n                name: 'Share',\r\n                canCheck: true,\r\n                isChecked: selection![keys[1]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[2],\r\n                name: 'Mobile',\r\n                canCheck: true,\r\n                isChecked: selection![keys[2]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: 'divider_1',\r\n                itemType: ContextualMenuItemType.Divider\r\n              },\r\n\r\n              {\r\n                key: keys[3],\r\n                name: 'Print',\r\n                canCheck: true,\r\n                isChecked: selection![keys[3]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[4],\r\n                name: 'Music',\r\n                canCheck: true,\r\n                isChecked: selection![keys[4]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[5],\r\n                iconProps: {\r\n                  iconName: 'MusicInCollectionFill'\r\n                },\r\n                subMenuProps: {\r\n                  items: [\r\n                    {\r\n                      key: keys[6],\r\n                      name: 'Email message',\r\n                      canCheck: true,\r\n                      isChecked: selection![keys[6]],\r\n                      onClick: this._onToggleSelect\r\n                    },\r\n                    {\r\n                      key: keys[7],\r\n                      name: 'Calendar event',\r\n                      canCheck: true,\r\n                      isChecked: selection![keys[7]],\r\n                      onClick: this._onToggleSelect\r\n                    }\r\n                  ],\r\n                },\r\n                name: 'Split Button',\r\n                canCheck: true,\r\n                isChecked: selection![keys[5]],\r\n                split: true,\r\n                onClick: this._onToggleSelect,\r\n              },\r\n            ]\r\n          }\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onToggleSelect(ev?: React.MouseEvent<HTMLButtonElement>, item?: IContextualMenuItem) {\r\n    let { selection } = this.state;\r\n    ev!.preventDefault();\r\n    selection![item!.key] = !selection![item!.key];\r\n\r\n    this.setState({\r\n      selection: selection\r\n    });\r\n  }\r\n}"]}