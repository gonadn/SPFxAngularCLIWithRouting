{"version":3,"file":"Grid.js","sourceRoot":"../src/","sources":["utilities/grid/Grid.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAIyB;AACzB,6CAA4C;AAG5C;IAA0B,gCAA6B;IAIrD,cAAY,KAAiB;QAA7B,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,GAAG,GAAG,iBAAK,EAAE,CAAC;;IACrB,CAAC;IAEM,qBAAM,GAAb;QAAA,iBA0DC;QAzDK,IAAA,eAMU,EALZ,gBAAK,EACL,4BAAW,EACX,8BAAY,EACZ,gCAAa,EACb,oBAAO,CACM;QAEf,oDAAoD;QACpD,IAAI,WAAW,GAAY,oBAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAExD,IAAI,OAAO,GAAG,CACZ,+BACE,EAAE,EAAG,IAAI,CAAC,GAAG,EACb,IAAI,EAAG,MAAM,mBACG,aAAa,kBACd,OAAO,EACtB,KAAK,EAAG,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE;YAE3C,mCAEI,WAAW,CAAC,GAAG,CAAC,UAAC,IAAW,EAAE,QAAQ;gBACpC,MAAM,CAAC,CACL,4BACE,IAAI,EAAG,KAAK,EACZ,GAAG,EAAG,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,MAAM,IAEtC,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,SAAS;oBACzB,MAAM,CAAC,CACL,4BACE,IAAI,EAAG,cAAc,EACrB,GAAG,EAAG,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,GAAG,OAAO,EAC1C,KAAK,EAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IAExB,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAC5B,CACN,CAAC;gBACJ,CAAC,CAAC,CACC,CACN,CAAC;YACJ,CAAC,CAAC,CAEE,CACF,CACT,CAAC;QAEF,wBAAwB;QACxB,MAAM,CAAC,CACL,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CACjD,oBAAC,qBAAS,IACR,oBAAoB,EAAG,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAC7D,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EACzC,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAExB,OAAO,CACC,CACb,CAAC,CAAC;IACP,CAAC;IACH,WAAC;AAAD,CAAC,AApED,CAA0B,yBAAa,GAoEtC;AApEY,oBAAI","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  getId,\r\n  toMatrix\r\n} from '../../Utilities';\r\nimport { FocusZone } from '../../FocusZone';\r\nimport { IGridProps } from './Grid.Props';\r\n\r\nexport class Grid extends BaseComponent<IGridProps, {}> {\r\n\r\n  private _id: string;\r\n\r\n  constructor(props: IGridProps) {\r\n    super(props);\r\n    this._id = getId();\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      items,\r\n      columnCount,\r\n      onRenderItem,\r\n      positionInSet,\r\n      setSize\r\n    } = this.props;\r\n\r\n    // Array to store the cells in the correct row index\r\n    let rowsOfItems: any[][] = toMatrix(items, columnCount);\r\n\r\n    let content = (\r\n      <table\r\n        id={ this._id }\r\n        role={ 'grid' }\r\n        aria-posinset={ positionInSet }\r\n        aria-setsize={ setSize }\r\n        style={ { padding: '2px', outline: 'none' } }\r\n      >\r\n        <tbody>\r\n          {\r\n            rowsOfItems.map((rows: any[], rowIndex) => {\r\n              return (\r\n                <tr\r\n                  role={ 'row' }\r\n                  key={ this._id + '-' + rowIndex + '-row' }\r\n                >\r\n                  { rows.map((cell, cellIndex) => {\r\n                    return (\r\n                      <td\r\n                        role={ 'presentation' }\r\n                        key={ this._id + '-' + cellIndex + '-cell' }\r\n                        style={ { padding: '0px' } }\r\n                      >\r\n                        { onRenderItem(cell, cellIndex) }\r\n                      </td>\r\n                    );\r\n                  }) }\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    );\r\n\r\n    // Create the table/grid\r\n    return (\r\n      this.props.doNotContainWithinFocusZone ? content : (\r\n        <FocusZone\r\n          isCircularNavigation={ this.props.shouldFocusCircularNavigate }\r\n          className={ this.props.containerClassName }\r\n          onBlur={ this.props.onBlur }\r\n        >\r\n          { content }\r\n        </FocusZone>\r\n      ));\r\n  }\r\n}"]}