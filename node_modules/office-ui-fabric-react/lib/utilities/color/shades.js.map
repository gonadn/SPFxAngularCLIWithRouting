{"version":3,"file":"shades.js","sourceRoot":"../src/","sources":["utilities/color/shades.ts"],"names":[],"mappings":"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","sourcesContent":["// Technically this should be shades and tints, but for simplicity we'll call everything a shade.\r\n/* This utility module is used with theming. Given a color to shade, whether the theme is inverted (i.e. is a dark color),\r\n * and the desired shade enum, this will return an appropriate shade of that color.\r\n */\r\nimport {\r\n  IColor,\r\n  MAX_COLOR_RGBA\r\n} from './colors';\r\nimport * as Colors from './colors';\r\nimport { assign } from '../../Utilities';\r\n\r\n// Soften: to get closer to the background color's luminance (softening with a white background would be lightening, with black it'd be darkening)\r\n// Strongen: opposite of soften\r\n\r\n// Luminance multiplier constants for generating shades of a given color\r\nconst WhiteShadeTableBG = [.973, .957, .918, .855, .816, .784, .651, .463]; // white bg\r\nconst BlackTintTableBG = [.463, .55, .651, .784, .816, .855, .918, .957]; // black bg\r\nconst WhiteShadeTable = [.463, .651, .784, .816, .855, .918, .957, .973]; // white fg\r\nconst BlackTintTable = [.463, .55, .651, .784, .816, .855, .918, .957]; // black fg\r\nconst LumTintTable = [.12, .23, .34, .45, .56, .67, .78, .89]; // light (strongen all)\r\nconst LumShadeTable = [.89, .78, .67, .56, .45, .34, .23, .12]; // dark (soften all)\r\nconst ColorTintTable = [.050, .100, .200, .42, .90]; // default soften\r\nconst ColorShadeTable = [.90, .70, .550]; // default strongen\r\n\r\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\r\nconst c_LuminanceLow = 0.2;\r\nconst c_LuminanceHigh = 0.8;\r\n\r\n/** Shades of a given color, from softest to strongest. */\r\nexport enum Shade {\r\n  Unshaded = 0,\r\n  Shade1 = 1,\r\n  Shade2 = 2,\r\n  Shade3 = 3,\r\n  Shade4 = 4,\r\n  Shade5 = 5,\r\n  Shade6 = 6,\r\n  Shade7 = 7,\r\n  Shade8 = 8,\r\n  // remember to update isValidShade()!\r\n}\r\n\r\n/**\r\n * Returns true if the argument is a valid Shade value\r\n * @param {Shade} shade The Shade value to validate.\r\n */\r\nexport function isValidShade(shade?: Shade): boolean {\r\n  'use strict';\r\n  return (typeof shade === 'number') && (shade >= Shade.Unshaded) && (shade <= Shade.Shade8);\r\n}\r\n\r\nfunction _isBlack(color: IColor): boolean {\r\n  return color.r === 0 && color.g === 0 && color.b === 0;\r\n}\r\n\r\nfunction _isWhite(color: IColor): boolean {\r\n  return color.r === MAX_COLOR_RGBA && color.g === MAX_COLOR_RGBA && color.b === MAX_COLOR_RGBA;\r\n}\r\n\r\nfunction _darken(hsl: { h: number, s: number, l: number }, factor: number) {\r\n  return {\r\n    h: hsl.h,\r\n    s: hsl.s,\r\n    l: hsl.l * factor\r\n  };\r\n}\r\n\r\nfunction _lighten(hsl: { h: number, s: number, l: number }, factor: number) {\r\n  return {\r\n    h: hsl.h,\r\n    s: hsl.s,\r\n    l: hsl.l * factor + (100 * (1 - factor))\r\n  };\r\n}\r\n\r\nexport function isDark(color: IColor) {\r\n  return Colors.hsv2hsl(color.h, color.s, color.v).l < 50;\r\n}\r\n\r\n/**\r\n * Given a color and a shade specification, generates the requested shade of the color.\r\n * Logic:\r\n * if white\r\n *  darken via tables defined above\r\n * if black\r\n *  lighten\r\n * if light\r\n *  strongen\r\n * if dark\r\n *  soften\r\n * else default\r\n *  soften or strongen depending on shade#\r\n * @param {IColor} color The base color whose shade is to be computed\r\n * @param {Shade} shade The shade of the base color to compute\r\n * @param {Boolean} isInverted Default false. Whether the given theme is inverted (reverse strongen/soften logic)\r\n */\r\nexport function getShade(color: IColor, shade: Shade, isInverted = false) {\r\n  'use strict';\r\n  if (!color) {\r\n    return null;\r\n  }\r\n\r\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\r\n    return color;\r\n  }\r\n\r\n  let hsl = Colors.hsv2hsl(color.h, color.s, color.v);\r\n  let tableIndex = shade - 1;\r\n  let _soften = _lighten;\r\n  let _strongen = _darken;\r\n  if (isInverted) {\r\n    // tableIndex = LumTintTable.length - 1 - tableIndex;\r\n    _soften = _darken;\r\n    _strongen = _lighten;\r\n  }\r\n  if (_isWhite(color)) { // white\r\n    hsl = _darken(hsl, WhiteShadeTable[tableIndex]);\r\n  } else if (_isBlack(color)) { // black\r\n    hsl = _lighten(hsl, BlackTintTable[tableIndex]);\r\n  } else if (hsl.l / 100 > c_LuminanceHigh) { // light\r\n    hsl = _strongen(hsl, LumShadeTable[tableIndex]);\r\n  } else if (hsl.l / 100 < c_LuminanceLow) { // dark\r\n    hsl = _soften(hsl, LumTintTable[tableIndex]);\r\n  } else { // default\r\n    if (tableIndex < ColorTintTable.length) {\r\n      hsl = _soften(hsl, ColorTintTable[tableIndex]);\r\n    } else {\r\n      hsl = _strongen(hsl, ColorShadeTable[tableIndex - ColorTintTable.length]);\r\n    }\r\n  }\r\n\r\n  return Colors.getColorFromRGBA(assign(Colors.hsl2rgb(hsl.h, hsl.s, hsl.l), { a: color.a }));\r\n}\r\n\r\n// Background shades/tints are generated differently. The provided color will be guaranteed\r\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\r\n//   otherwise it will always be the lightest.\r\nexport function getBackgroundShade(color: IColor, shade: Shade, isInverted = false) {\r\n  'use strict';\r\n  if (!color) {\r\n    return null;\r\n  }\r\n\r\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\r\n    return color;\r\n  }\r\n\r\n  let hsl = Colors.hsv2hsl(color.h, color.s, color.v);\r\n  let tableIndex = shade - 1;\r\n  if (!isInverted) { // lightish\r\n    hsl = _darken(hsl, WhiteShadeTableBG[tableIndex]);\r\n  } else { // default: if (hsl.l / 100 < .5) { // darkish\r\n    hsl = _lighten(hsl, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\r\n  }\r\n\r\n  return Colors.getColorFromRGBA(assign(Colors.hsl2rgb(hsl.h, hsl.s, hsl.l), { a: color.a }));\r\n}\r\n\r\n/* Calculates the contrast ratio between two colors. Used for verifying\r\n * color pairs meet minimum accessibility requirements.\r\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\r\n */\r\nexport function getContrastRatio(color1: IColor, color2: IColor) {\r\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\r\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\r\n\r\n  /* calculate the intermediate value needed to calculating relative luminance */\r\n  function _getThing(x: number) {\r\n    if (x <= .03928) {\r\n      return x / 12.92;\r\n    } else {\r\n      return Math.pow((x + .055) / 1.055, 2.4);\r\n    }\r\n  }\r\n\r\n  let r1 = _getThing(color1.r / MAX_COLOR_RGBA);\r\n  let g1 = _getThing(color1.g / MAX_COLOR_RGBA);\r\n  let b1 = _getThing(color1.b / MAX_COLOR_RGBA);\r\n  let L1 = (.2126 * r1) + (.7152 * g1) + (.0722 * b1); // relative luminance of first color\r\n  L1 += .05;\r\n\r\n  let r2 = _getThing(color2.r / MAX_COLOR_RGBA);\r\n  let g2 = _getThing(color2.g / MAX_COLOR_RGBA);\r\n  let b2 = _getThing(color2.b / MAX_COLOR_RGBA);\r\n  let L2 = (.2126 * r2) + (.7152 * g2) + (.0722 * b2); // relative luminance of second color\r\n  L2 += .05;\r\n\r\n  // return the lighter color divided by darker\r\n  return L1 / L2 > 1 ?\r\n    L1 / L2 : L2 / L1;\r\n}"]}