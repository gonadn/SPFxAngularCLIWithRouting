{"version":3,"file":"ComponentStatusPage.js","sourceRoot":"../src/","sources":["demo/ComponentStatus/ComponentStatusPage.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,+DAAkF;AAClF,mCAAkC;AAClC,qEAAgE;AAChE,+DAA8G;AAC9G,qDAAoD;AACpD,sCAAoC;AAEpC;IAAyC,+CAAuB;IAAhE;;IAwFA,CAAC;IAvFQ,oCAAM,GAAb;QACE,IAAI,QAAQ,GAA4B,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,mBAAmB,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QAE3J,MAAM,CAAC,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,sBAAsB,EAC5B,aAAa,EAAC,sBAAsB,EACpC,QAAQ,EAAG,IAAI,CAAC,eAAe,EAAE,EACjC,aAAa,EAAG,QAAQ,GACxB,CACH,CAAC;IACJ,CAAC;IAEO,6CAAe,GAAvB;QACE,MAAM,CAAC,CACL,oLAEI,CACL,CAAC;IACJ,CAAC;IAEO,+CAAiB,GAAzB;QAAA,iBAYC;QAXC,MAAM,CAAC,CACL;YACE,+BAAO,SAAS,EAAC,gBAAgB;gBAC/B,mCACI,MAAM,CAAC,IAAI,CAAC,6CAAmB,CAAC,CAAC,GAAG,CAAC,UAAC,aAAa,EAAE,KAAK;oBAC1D,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;gBAC9C,CAAC,CAAC,CACI,CACF,CACH,CACR,CAAC;IACJ,CAAC;IAEO,8CAAgB,GAAxB,UAAyB,aAAqB;QAC5C,IAAI,SAAS,GAAG,6CAAmB,CAAC,aAAa,CAAC,CAAC;QACnD,MAAM,CAAC,CACL,4BAAI,GAAG,EAAG,aAAa,GAAG,MAAM;YAC9B,4BAAI,SAAS,EAAC,gBAAgB;gBAAC;oBAAM,aAAa;wBAAQ;oBAAM;YAChE,4BAAI,SAAS,EAAC,oBAAoB;gBAAC,oBAAC,iCAAe,uBAC7C,SAAS,EACb,CAAK,CACH,CACP,CAAC;IACJ,CAAC;IAEO,iDAAmB,GAA3B;QAAA,iBAiBC;QAhBC,MAAM,CAAC,CACL;YACE,+BAAO,SAAS,EAAC,gBAAgB;gBAC/B;oBACE;wBACE,4BAAI,SAAS,EAAC,gBAAgB,WAAU;wBACxC,4BAAI,SAAS,EAAC,gBAAgB,kBAAiB;wBAC/C,4BAAI,SAAS,EAAC,gBAAgB,cAAa,CACxC;oBACH,+CAAwB,CAAC,GAAG,CAAC,UAAC,IAAI;wBAClC,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBACtC,CAAC,CAAC,CACI,CACF,CACJ,CACP,CAAC;IACJ,CAAC;IAEO,+CAAiB,GAAzB,UAA0B,UAAqC;QAC7D,MAAM,CAAC,CACL,4BAAI,GAAG,EAAG,UAAU,CAAC,IAAI,GAAG,MAAM;YAChC,4BAAI,SAAS,EAAC,gBAAgB;;gBAAI,UAAU,CAAC,IAAI;oBAAQ;YACzD,4BAAI,SAAS,EAAC,gBAAgB;;gBAAI,UAAU,CAAC,WAAW;oBAAQ;YAChE,4BAAI,SAAS,EAAC,gBAAgB;;gBAAI,UAAU,CAAC,OAAO;gBAChD,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CACnD,CACF,CACN,CAAC;IACJ,CAAC;IAEO,yCAAW,GAAnB,UAAoB,WAA4B;QAC9C,MAAM,CAAC,CACL,oBAAC,WAAI,IACH,IAAI,EAAG,WAAW,CAAC,IAAI,IAErB,GAAG,GAAG,WAAW,CAAC,YAAY,CAC3B,CACR,CAAC;IACJ,CAAC;IACH,0BAAC;AAAD,CAAC,AAxFD,CAAyC,KAAK,CAAC,SAAS,GAwFvD;AAxFY,kDAAmB","sourcesContent":["import * as React from 'react';\r\nimport { ComponentPage, IComponentPageSection } from '@uifabric/example-app-base';\r\nimport { Link } from '../../Link';\r\nimport { AllComponentsStatus } from './AllComponents.checklist';\r\nimport { ComponentStatusInfoState, IComponentStatusInfoState, InformationLink } from './ComponentStatusState';\r\nimport { ComponentStatus } from './ComponentStatus';\r\nimport './ComponentStatusPage.scss';\r\n\r\nexport class ComponentStatusPage extends React.Component<{}, {}> {\r\n  public render() {\r\n    let sections: [IComponentPageSection] = [{ title: 'Badges', section: this._renderStatusesInfo() }, { title: 'Status', section: this._renderComponents() }];\r\n\r\n    return (\r\n      <ComponentPage\r\n        title='Components Checklist'\r\n        componentName='Components Checklist'\r\n        overview={ this._renderOverView() }\r\n        otherSections={ sections }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _renderOverView(): JSX.Element {\r\n    return (\r\n      <div>\r\n        Badges are used to track a component's status regarding different criteria. They reflect if a component is localizable, accessible and reliable.\r\n    </div>\r\n    );\r\n  }\r\n\r\n  private _renderComponents(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <table className='componentTable'>\r\n          <tbody>\r\n            { Object.keys(AllComponentsStatus).map((componentName, index) => {\r\n              return this._renderComponent(componentName);\r\n            }) }\r\n          </tbody>\r\n        </table>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  private _renderComponent(componentName: string): JSX.Element {\r\n    let component = AllComponentsStatus[componentName];\r\n    return (\r\n      <tr key={ componentName + '-key' }>\r\n        <th className='componentCells'><h3>{ componentName } </h3> </th>\r\n        <td className='componentBadgeCell'><ComponentStatus\r\n          {...component}\r\n        /></td>\r\n      </tr >\r\n    );\r\n  }\r\n\r\n  private _renderStatusesInfo() {\r\n    return (\r\n      <div>\r\n        <table className='componentTable'>\r\n          <tbody>\r\n            <tr>\r\n              <th className='componentCells'>Name</th>\r\n              <th className='componentCells'>Description</th>\r\n              <th className='componentCells'>Success</th>\r\n            </tr>\r\n            { ComponentStatusInfoState.map((name) => {\r\n              return this._renderStatusInfo(name);\r\n            }) }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderStatusInfo(statusInfo: IComponentStatusInfoState) {\r\n    return (\r\n      <tr key={ statusInfo.name + '-key' }>\r\n        <th className='componentCells'> { statusInfo.name } </th>\r\n        <td className='componentCells'> { statusInfo.description } </td>\r\n        <td className='componentCells'> { statusInfo.success }\r\n          { statusInfo.link && this._createLink(statusInfo.link) }\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  private _createLink(information: InformationLink): JSX.Element {\r\n    return (\r\n      <Link\r\n        href={ information.link }\r\n      >\r\n        { ' ' + information.renderedText }\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n"]}