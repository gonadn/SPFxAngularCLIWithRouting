{"version":3,"file":"ContextualMenu.Checkmarks.Example.js","sourceRoot":"../src/","sources":["components/ContextualMenu/examples/ContextualMenu.Checkmarks.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4EAAwG;AACxG,4DAAkE;AAClE,wCAAsC;AAMtC,IAAI,IAAI,GAAa,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;AAE7H;IAAqD,2DAA4D;IAE/G;QAAA,YACE,iBAAO,SAOR;QALC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAEvD,KAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,EAAE;SACd,CAAC;;IACJ,CAAC;IAEM,gDAAM,GAAb;QACQ,IAAA,gCAAS,CAAgB;QAE/B,MAAM,CAAC,CACL,oBAAC,sBAAa,IACZ,EAAE,EAAC,uBAAuB,EAC1B,IAAI,EAAC,0BAA0B,EAC/B,SAAS,EACP;gBACE,kBAAkB,EAAE,IAAI;gBACxB,KAAK,EACL;oBACE;wBACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;wBACZ,IAAI,EAAE,KAAK;wBACX,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC9B,OAAO,EAAE,IAAI,CAAC,eAAe;qBAC9B;oBACD;wBACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;wBACZ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC9B,OAAO,EAAE,IAAI,CAAC,eAAe;qBAC9B;oBACD;wBACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;wBACZ,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC9B,OAAO,EAAE,IAAI,CAAC,eAAe;qBAC9B;oBACD;wBACE,GAAG,EAAE,WAAW;wBAChB,QAAQ,EAAE,uCAAsB,CAAC,OAAO;qBACzC;oBAED;wBACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;wBACZ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC9B,OAAO,EAAE,IAAI,CAAC,eAAe;qBAC9B;oBACD;wBACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;wBACZ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC9B,OAAO,EAAE,IAAI,CAAC,eAAe;qBAC9B;oBACD;wBACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;wBACZ,SAAS,EAAE;4BACT,QAAQ,EAAE,uBAAuB;yBAClC;wBACD,YAAY,EAAE;4BACZ,KAAK,EAAE;gCACL;oCACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oCACZ,IAAI,EAAE,eAAe;oCACrB,QAAQ,EAAE,IAAI;oCACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oCAC9B,OAAO,EAAE,IAAI,CAAC,eAAe;iCAC9B;gCACD;oCACE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oCACZ,IAAI,EAAE,gBAAgB;oCACtB,QAAQ,EAAE,IAAI;oCACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oCAC9B,OAAO,EAAE,IAAI,CAAC,eAAe;iCAC9B;6BACF;yBACF;wBACD,IAAI,EAAE,cAAc;wBACpB,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,SAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC9B,KAAK,EAAE,IAAI;wBACX,OAAO,EAAE,IAAI,CAAC,eAAe;qBAC9B;iBACF;aACF,GAEH,CACH,CAAC;IACJ,CAAC;IAEO,yDAAe,GAAvB,UAAwB,EAAwC,EAAE,IAA0B;QACpF,IAAA,gCAAS,CAAgB;QAC/B,EAAG,CAAC,cAAc,EAAE,CAAC;QACrB,SAAU,CAAC,IAAK,CAAC,GAAG,CAAC,GAAG,CAAC,SAAU,CAAC,IAAK,CAAC,GAAG,CAAC,CAAC;QAE/C,IAAI,CAAC,QAAQ,CAAC;YACZ,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;IACL,CAAC;IACH,sCAAC;AAAD,CAAC,AA7GD,CAAqD,KAAK,CAAC,SAAS,GA6GnE;AA7GY,0EAA+B","sourcesContent":["import * as React from 'react';\r\nimport { IContextualMenuItem, ContextualMenuItemType } from 'office-ui-fabric-react/lib/ContextualMenu';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport './ContextualMenuExample.scss';\r\n\r\nexport interface IContextualMenuMultiselectExampleState {\r\n  selection?: { [key: string]: boolean };\r\n}\r\n\r\nlet keys: string[] = ['newItem', 'share', 'mobile', 'enablePrint', 'enableMusic', 'newSub', 'emailMessage', 'calendarEvent'];\r\n\r\nexport class ContextualMenuCheckmarksExample extends React.Component<any, IContextualMenuMultiselectExampleState> {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._onToggleSelect = this._onToggleSelect.bind(this);\r\n\r\n    this.state = {\r\n      selection: {},\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { selection } = this.state;\r\n\r\n    return (\r\n      <DefaultButton\r\n        id='ContextualMenuButton2'\r\n        text='Click for ContextualMenu'\r\n        menuProps={\r\n          {\r\n            shouldFocusOnMount: true,\r\n            items:\r\n            [\r\n              {\r\n                key: keys[0],\r\n                name: 'New',\r\n                canCheck: true,\r\n                isChecked: selection![keys[0]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[1],\r\n                name: 'Share',\r\n                canCheck: true,\r\n                isChecked: selection![keys[1]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[2],\r\n                name: 'Mobile',\r\n                canCheck: true,\r\n                isChecked: selection![keys[2]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: 'divider_1',\r\n                itemType: ContextualMenuItemType.Divider\r\n              },\r\n\r\n              {\r\n                key: keys[3],\r\n                name: 'Print',\r\n                canCheck: true,\r\n                isChecked: selection![keys[3]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[4],\r\n                name: 'Music',\r\n                canCheck: true,\r\n                isChecked: selection![keys[4]],\r\n                onClick: this._onToggleSelect\r\n              },\r\n              {\r\n                key: keys[5],\r\n                iconProps: {\r\n                  iconName: 'MusicInCollectionFill'\r\n                },\r\n                subMenuProps: {\r\n                  items: [\r\n                    {\r\n                      key: keys[6],\r\n                      name: 'Email message',\r\n                      canCheck: true,\r\n                      isChecked: selection![keys[6]],\r\n                      onClick: this._onToggleSelect\r\n                    },\r\n                    {\r\n                      key: keys[7],\r\n                      name: 'Calendar event',\r\n                      canCheck: true,\r\n                      isChecked: selection![keys[7]],\r\n                      onClick: this._onToggleSelect\r\n                    }\r\n                  ],\r\n                },\r\n                name: 'Split Button',\r\n                canCheck: true,\r\n                isChecked: selection![keys[5]],\r\n                split: true,\r\n                onClick: this._onToggleSelect,\r\n              },\r\n            ]\r\n          }\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onToggleSelect(ev?: React.MouseEvent<HTMLButtonElement>, item?: IContextualMenuItem) {\r\n    let { selection } = this.state;\r\n    ev!.preventDefault();\r\n    selection![item!.key] = !selection![item!.key];\r\n\r\n    this.setState({\r\n      selection: selection\r\n    });\r\n  }\r\n}"]}