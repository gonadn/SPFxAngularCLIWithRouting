{"version":3,"file":"List.js","sourceRoot":"../src/","sources":["components/List/List.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAWyB;AAGzB,IAAM,YAAY,GAAG,EAAE,CAAC;AACxB,IAAM,uBAAuB,GAAG,GAAG,CAAC;AACpC,IAAM,uBAAuB,GAAG,GAAG,CAAC;AACpC,IAAM,mBAAmB,GAAG,GAAG,CAAC;AAChC,IAAM,sBAAsB,GAAG,EAAE,CAAC;AAClC,IAAM,mBAAmB,GAAG,EAAE,CAAC;AAC/B,IAAM,+BAA+B,GAAG,CAAC,CAAC;AAC1C,IAAM,8BAA8B,GAAG,CAAC,CAAC;AAkBzC,IAAM,UAAU,GAAG;IACjB,GAAG,EAAE,CAAC,CAAC;IACP,MAAM,EAAE,CAAC,CAAC;IACV,IAAI,EAAE,CAAC,CAAC;IACR,KAAK,EAAE,CAAC,CAAC;IACT,KAAK,EAAE,CAAC;IACR,MAAM,EAAE,CAAC;CACV,CAAC;AAEF,+DAA+D;AAC/D,IAAM,gBAAgB,GAAG,UAAC,OAAoB,IAAK,OAAA,OAAO,CAAC,qBAAqB,EAAE,EAA/B,CAA+B,CAAC;AACnF,IAAM,mBAAmB,GAAG,gBAAgB,CAAC;AAC7C,IAAM,kBAAkB,GAAG,gBAAgB,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH;IAA0B,gCAAqC;IA+C7D,cAAY,KAAiB;QAA7B,YACE,kBAAM,KAAK,CAAC,SAyCb;QAvCC,KAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,EAAE;SACV,CAAC;QAEF,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,KAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,KAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;QAC/B,KAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;QAEhC,4CAA4C;QAC5C,KAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QAEzB,wCAAwC;QACxC,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CACxC,KAAI,CAAC,cAAc,EACnB,uBAAuB,EACvB;YACE,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,uBAAuB;SACjC,CAAC,CAAC;QAEL,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CACtC,KAAI,CAAC,YAAY,EACjB,mBAAmB,EAAE;YACnB,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;QAEL,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CACxC,KAAI,CAAC,cAAc,EACnB,YAAY,EACZ;YACE,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;QAEL,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QACxB,KAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;QAC5B,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;;IACvB,CAAC;IAED;;;;;;;;;OASG;IACI,4BAAa,GAApB,UAAqB,KAAa,EAAE,WAA2C;QAC7E,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAoB,CAAC;QACnD,IAAM,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3C,IAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,CAAC;QAE1C,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QAEtC,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,GAAG,CAAC,CAAC,IAAI,SAAS,GAAG,UAAU,EAAE,SAAS,GAAG,QAAQ,EAAE,SAAS,IAAI,YAAY,EAAE,CAAC;YACjF,IAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAE7E,IAAM,UAAU,GAAG,iBAAiB,CAAC,MAAM,CAAC;YAC5C,YAAY,GAAG,iBAAiB,CAAC,SAAS,CAAC;YAE3C,IAAM,sBAAsB,GAAG,SAAS,IAAI,KAAK,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,KAAK,CAAC;YACxF,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBAC3B,kHAAkH;gBAClH,gEAAgE;gBAChE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oBAChB,8CAA8C;oBAC9C,IAAM,sBAAsB,GAAG,KAAK,GAAG,SAAS,CAAC;oBACjD,GAAG,CAAC,CAAC,IAAI,eAAe,GAAG,CAAC,EAAE,eAAe,GAAG,sBAAsB,EAAE,EAAE,eAAe,EAAE,CAAC;wBAC1F,SAAS,IAAI,WAAW,CAAC,SAAS,GAAG,eAAe,CAAC,CAAC;oBACxD,CAAC;oBACD,IAAM,YAAY,GAAG,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;oBAEpD,IAAM,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC3D,IAAM,YAAY,GAAG;wBACnB,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS;wBAClC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,UAAU,CAAC,MAAM;qBAC1D,CAAC;oBAEF,IAAM,kBAAkB,GAAG,SAAS,IAAI,YAAY,CAAC,GAAG,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC;oBAChG,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACvB,uCAAuC;wBACvC,MAAM,CAAC;oBACT,CAAC;oBAED,IAAM,oBAAoB,GAAG,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC;oBAC1D,IAAM,oBAAoB,GAAG,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC;oBAEhE,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBACzB,qCAAqC;wBACrC,UAAU;wBACV,yBAAyB;wBACzB,YAAY;wBACZ,gCAAgC;wBAChC,aAAa;wBACb,aAAa;oBACf,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBAChC,yDAAyD;wBACzD,wBAAwB;wBACxB,WAAW;wBACX,mCAAmC;wBACnC,aAAa;wBACb,aAAa;wBACb,4BAA4B;wBAC5B,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;oBACnF,CAAC;gBACH,CAAC;gBAED,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC1C,KAAK,CAAC;YACR,CAAC;YAED,SAAS,IAAI,UAAU,CAAC;QAC1B,CAAC;IACH,CAAC;IAEM,gCAAiB,GAAxB;QAEE,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,gCAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAgB,CAAC;QAE1E,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/D,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;IAEM,wCAAyB,GAAhC,UAAiC,QAAoB;QACnD,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK;YACrC,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC,WAAW;YAC/C,QAAQ,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YAEhD,sGAAsG;YACtG,6EAA6E;YAC7E,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAE1B,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAEM,oCAAqB,GAA5B,UAA6B,QAAoB,EAAE,QAAoB;QAC/D,IAAA,2BAAe,CAAgB;QAC/B,IAAA,yBAAe,CAAc;QACnC,IAAI,qBAAqB,GAAG,KAAK,CAAC;QAElC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK;YACrC,QAAS,CAAC,MAAM,KAAK,QAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACxC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1C,IAAI,OAAO,GAAG,QAAS,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,OAAO,GAAG,QAAS,CAAC,CAAC,CAAC,CAAC;gBAE3B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG;oBAC9B,OAAO,CAAC,SAAS,KAAK,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC3C,qBAAqB,GAAG,IAAI,CAAC;oBAC7B,KAAK,CAAC;gBACR,CAAC;YACH,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,qBAAqB,GAAG,IAAI,CAAC;QAC/B,CAAC;QAED,MAAM,CAAC,qBAAqB,CAAC;IAC/B,CAAC;IAEM,0BAAW,GAAlB;QACE,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,sFAAsF;QACtF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,iBAAM,WAAW,WAAE,CAAC;IACtB,CAAC;IAEM,qBAAM,GAAb;QACQ,IAAA,eAGQ,EAFZ,wBAAS,EACT,cAAI,CACS;QAEb,IAAA,qBAAU,EAAV,+BAAU,CACG;QACf,IAAI,YAAY,GAAkB,EAAE,CAAC;QACrC,IAAI,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;QAEzD,GAAG,CAAC,CAAe,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAnB,IAAM,IAAI,cAAA;YACb,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3C;QAED,uDAAuD;QAEvD,MAAM,CAAC,CACL,8CACE,GAAG,EAAC,MAAM,IACL,QAAQ,IACb,IAAI,EAAG,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAC3C,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,CAAC;YAErC,6BAAK,GAAG,EAAC,SAAS,EAAC,SAAS,EAAG,eAAG,CAAC,iBAAiB,CAAC,EAAG,IAAI,EAAC,cAAc,IACvE,YAAY,CACV,CACF,CACP,CAAC;IACJ,CAAC;IAEO,gCAAiB,GAAzB,UAA0B,KAA8B;QAA9B,sBAAA,EAAA,QAAoB,IAAI,CAAC,KAAK;QAEpD,IAAA,6CAAkB,CACV;QACV,MAAM,CAAC,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACK,mCAAoB,GAA5B;QACE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAEO,0BAAW,GAAnB,UAAoB,IAAW;QACvB,IAAA,sCAAY,CAAgB;QAClC,IAAI,UAAU,CAAC;QACf,uFAAuF;QACvF,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;YAChC,CAAC;QACH,CAAC;QAED,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAGzC,IAAA,4BAAiC,EAAjC,sDAAiC,CACpB;QAEf,IAAM,WAAW,GAAG,YAAY,CAAC;YAC/B,IAAI,EAAE,IAAI;YACV,SAAS,EAAE,eAAG,CAAC,cAAc,CAAC;YAC9B,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,cAAc;SACrB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAEvB,iFAAiF;QACjF,gGAAgG;QAChG,wGAAwG;QACxG,8FAA8F;QAC9F,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;gBAC1B,IAAI,EAAE,IAAI;gBACV,WAAW,EAAE,WAAW;aACzB,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAED,8CAA8C;IACtC,4BAAa,GAArB,UAAsB,IAAW;QAE7B,IAAA,sCAAY,CACC;QAEf,MAAM,sBACD,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EACxC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC,CAAC,EAAE,CAAC,EACP;IACJ,CAAC;IAGO,4BAAa,GAArB,UAAsB,SAAqB,EAAE,aAA2C;QADxF,iBA+CC;QA7CO,IAAA,eAGQ,EAFZ,8BAAY,EACZ,cAAI,CACS;QAGb,IAAA,mBAGC,EAFC,gBAAK,EACP,0BAAU,EAEV,8CAAW,CACC;QAEd,oDAAoD;QACpD,IAAM,QAAQ,GAAG,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC;QAEpE,IAAM,KAAK,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,IAAS,EAAE,MAAc;YACxD,IAAM,KAAK,GAAG,UAAU,GAAG,MAAM,CAAC;YAElC,IAAI,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC/B,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;gBAChC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;YAEnB,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC9C,OAAO,GAAG,KAAK,CAAC;YAClB,CAAC;YAED,MAAM,CAAC,CACL,6BACE,IAAI,EAAG,QAAQ,EACf,SAAS,EAAG,eAAG,CAAC,cAAc,CAAC,EAC/B,GAAG,EAAG,OAAO,qBACK,KAAK,uBACL,UAAU,IAE1B,YAAY,IAAI,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CACvC,CACP,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,CACL,gDAAU,QAAQ,GACd,KAAK,CACH,CACP,CAAC;IACJ,CAAC;IAED,+EAA+E;IACvE,uBAAQ,GAAhB,UAAiB,EAAO;QACtB,IAAI,MAAM,GAAG,EAAE,CAAC,MAAqB,CAAC;QAEtC,OAAO,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACpC,IAAI,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;YAEzD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;gBACzC,KAAK,CAAC;YACR,CAAC;YAED,MAAM,GAAG,qBAAS,CAAC,MAAM,CAAgB,CAAC;QAC5C,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,wBAAS,GAAjB;QACE,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAEO,oCAAqB,GAA7B;QACE,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,6BAAc,GAAtB;QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,kFAAkF;QAClF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAA2B,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC7G,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,qGAAqG;QACvG,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,2BAAY,GAApB;QACQ,IAAA,eAA4D,EAA1D,8CAAoB,EAAE,gDAAqB,CAAgB;QAC7D,IAAA,SAGE,EAFN,+CAA2C,EAC3C,iDAA6C,CACtC;QACT,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,oBAA8B,EAAE,oBAAoB,GAAG,CAAC,CAAC,CAAC;QACxF,IAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,qBAA+B,EAAE,qBAAqB,GAAG,CAAC,CAAC,CAAC;QAE3F,EAAE,CAAC,CAAC,YAAY,KAAK,oBAAoB,IAAI,aAAa,KAAK,qBAAqB,CAAC,CAAC,CAAC;YAErF,sDAAsD;YAEtD,IAAI,CAAC,qBAAqB,GAAG,YAAY,CAAC;YAC1C,IAAI,CAAC,sBAAsB,GAAG,aAAa,CAAC;YAC5C,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;QAED,EAAE,CAAC,CAAC,oBAAqB,GAAG,YAAY,IAAI,qBAAsB,GAAG,aAAa,CAAC,CAAC,CAAC;YACnF,gCAAgC;YAChC,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAEO,6BAAc,GAAtB;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,2BAAY,GAApB,UAAqB,KAA8B;QACjD,iCAAiC;QADnC,iBA4BC;QA5BoB,sBAAA,EAAA,QAAoB,IAAI,CAAC,KAAK;QAGjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QAED,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAEpC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;YAC1B,6DAA6D;YAC7D,IAAM,cAAc,GAAG,KAAI,CAAC,uBAAuB,CAAC,YAAuB,EAAE,YAAY,CAAC,KAAgB,CAAC,CAAC;YAE5G,8EAA8E;YAC9E,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACnB,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;oBACnC,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;oBACrC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC3B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAI,CAAC,cAAc,EAAE,CAAC;gBACxB,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,wBAAwB;gBACxB,KAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,sCAAuB,GAA/B,UAAgC,QAAiB,EAAE,QAAiB;QAClE,IAAM,eAAe,GAEjB,EAAE,CAAC;QAEP,IAAI,aAAa,GAAG,KAAK,CAAC;QAE1B,gFAAgF;QAChF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,aAAa,CAAC;QACvB,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;YAC1C,CAAC;QACH,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC;gBAEzD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC1B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;QACH,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,eAAe,CAAC,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC;QAED,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IAED;;;OAGG;IACK,2BAAY,GAApB,UAAqB,IAAW;QAC9B,IAAI,gBAAgB,GAAG,KAAK,CAAC;QAC7B,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAgB,CAAC;QACrD,IAAI,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE5D,sEAAsE;QAEtE,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,cAAc,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvH,IAAI,aAAa,GAAG;gBAClB,KAAK,EAAE,WAAW,CAAC,WAAW;gBAC9B,MAAM,EAAE,WAAW,CAAC,YAAY;aACjC,CAAC;YAEF,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChD,gBAAgB,GAAG,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,CAAC;gBAExD,mGAAmG;gBAEnG,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;gBAEnC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG;oBACzC,MAAM,EAAE,aAAa,CAAC,MAAM;oBAC5B,cAAc,EAAE,IAAI,CAAC,eAAe;iBACrC,CAAC;gBAEF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CACpC,CAAC,CAAC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC;oBAC3E,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;gBAE9B,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,CAAC;QACH,CAAC;QAED,MAAM,CAAC,gBAAgB,CAAC;IAC1B,CAAC;IAED,oDAAoD;IAC5C,2BAAY,GAApB,UAAqB,IAAW;QACxB,IAAA,oCAAW,CAAgB;QAEjC,iGAAiG;QAEjG,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,WAAW,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAED,wDAAwD;IAChD,6BAAc,GAAtB,UAAuB,IAAW;QAC1B,IAAA,wCAAa,CAAgB;QAEnC,yGAAyG;QAEzG,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,aAAa,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAED,kDAAkD;IAC1C,0BAAW,GAAnB,UAAoB,KAAiB;QAC7B,IAAA,mBAAK,EAAE,6BAAU,EAAE,+BAAW,EAAE,mCAAa,CAAW;QAE9D,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAE1C,IAAM,gBAAgB,wBAAQ,UAAU,CAAE,CAAC;QAC3C,IAAM,KAAK,GAAY,EAAE,CAAC;QAE1B,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,aAAa,GAAG,IAAI,CAAC;QACzB,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;QACtC,IAAI,QAAQ,GAAG,UAAW,GAAG,WAAW,CAAC;QACzC,IAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAEvD,2GAA2G;QAC3G,wFAAwF;QACxF,kGAAkG;QAClG,IAAI,aAAa,GAAG,IAAI,CAAC,oBAAoB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC;QAEtE,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;gCAE7B,SAAS;YAChB,IAAM,iBAAiB,GAAG,OAAK,qBAAqB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAC7E,IAAM,UAAU,GAAG,iBAAiB,CAAC,MAAM,CAAC;YAC5C,IAAM,QAAQ,GAAG,iBAAiB,CAAC,IAAI,CAAC;YAExC,YAAY,GAAG,iBAAiB,CAAC,SAAS,CAAC;YAE3C,IAAI,UAAU,GAAG,OAAO,GAAG,UAAU,GAAG,CAAC,CAAC;YAE1C,IAAI,cAAc,GAAG,qBAAS,CAAC,OAAK,KAAK,CAAC,KAAgB,EAAE,UAAC,IAAW,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAA7C,CAA6C,CAAC,GAAG,CAAC,CAAC,CAAC;YACjI,IAAI,oBAAoB,GAAG,CAAC,WAAW,IAAI,UAAU,IAAI,WAAW,CAAC,GAAG,IAAI,OAAO,IAAI,WAAW,CAAC,MAAO,CAAC;YAC3G,IAAI,qBAAqB,GAAG,CAAC,OAAK,aAAa,IAAI,UAAU,IAAI,OAAK,aAAc,CAAC,GAAG,IAAI,OAAO,IAAI,OAAK,aAAc,CAAC,MAAO,CAAC;YACnI,IAAI,aAAa,GAAG,CAAC,aAAa,IAAI,CAAC,qBAAqB,IAAI,CAAC,oBAAoB,IAAI,cAAc,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;YAC/H,IAAI,aAAa,GAAG,YAAY,IAAI,SAAS,IAAI,YAAY,GAAG,CAAC,SAAS,GAAG,YAAY,CAAC,CAAC;YAC3F,IAAI,WAAW,GAAG,SAAS,KAAK,UAAU,CAAC;YAE3C,gJAAgJ;YAEhJ,qDAAqD;YACrD,yGAAyG;YACzG,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,IAAI,WAAW,CAAC,CAAC,CAAC;gBAClD,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC1B,aAAa,GAAG,IAAI,CAAC;gBACvB,CAAC;gBAED,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,GAAG,SAAS,CAAC,CAAC;gBAC/D,IAAI,OAAO,GAAG,OAAK,WAAW,CAAC,SAAS,EAAE,KAAM,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,GAAG,WAAW,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;gBAEvI,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC;gBACtB,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC;gBAE5B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEpB,EAAE,CAAC,CAAC,qBAAqB,IAAI,OAAK,YAAY,CAAC,CAAC,CAAC;oBAC/C,UAAU,CAAC,gBAAgB,EAAE;wBAC3B,GAAG,EAAE,OAAO;wBACZ,MAAM,EAAE,UAAU;wBAClB,MAAM,EAAE,UAAU;wBAClB,IAAI,EAAE,WAAW,CAAC,IAAI;wBACtB,KAAK,EAAE,WAAW,CAAC,KAAK;wBACxB,KAAK,EAAE,WAAW,CAAC,KAAK;qBACzB,CAAC,CAAC;gBACL,CAAC;YAEH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBACnB,aAAa,GAAG,OAAK,WAAW,CAAC,SAAS,GAAG,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;gBACxG,CAAC;gBACD,aAAa,CAAC,MAAM,GAAG,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;gBAChF,aAAa,CAAC,SAAS,IAAI,YAAY,CAAC;YAC1C,CAAC;YACD,OAAO,IAAI,CAAC,UAAU,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC;YAEtC,mFAAmF;YACnF,4EAA4E;YAC5E,EAAE,CAAC,CAAC,aAAa,IAAI,gBAAgB,CAAC,CAAC,CAAC;;YAExC,CAAC;QACH,CAAC;;QA3DD,GAAG,CAAC,CAAC,IAAI,SAAS,GAAG,UAAW,EAAE,SAAS,GAAG,QAAQ,EAAE,SAAS,IAAI,YAAY;kCAAxE,SAAS;;;SA2DjB;QAED,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,aAAa,CAAC,GAAG,GAAG,YAAY,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5B,CAAC;QAED,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAE1C,mDAAmD;QACnD,MAAM,CAAC;YACL,KAAK,EAAE,KAAK;YACZ,cAAc,EAAE,IAAI,CAAC,eAAe;SACrC,CAAC;IACJ,CAAC;IAEO,oCAAqB,GAA7B,UAA8B,SAAiB,EAAE,WAAuB;QAOpE,IAAA,sDAAoB,CACP;QACf,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACzB,IAAM,QAAQ,GAAG,oBAAoB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAG5D,IAAA,uBAA6D,EAA7D,kFAA6D,CAClD;YAGX,IAAA,oBAA+D,EAA/D,oFAA+D,CACpD;YAEb,MAAM,CAAC;gBACL,SAAS,EAAE,SAAS;gBACpB,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,QAAQ,CAAC,IAAI;aACpB,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAEpE,MAAM,CAAC;gBACL,SAAS,EAAE,SAAS;gBACpB,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC;aAC/D,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,6BAAc,GAAtB,UAAuB,SAAiB,EAAE,YAAoB,EAAE,WAAuB;QACrF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,YAAY,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC;YAExD,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,mBAAmB,CAAC,CAAC;QACjG,CAAC;IACH,CAAC;IAEO,mCAAoB,GAA5B,UAA6B,SAAiB,EAAE,YAAwB;QACtE,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC;QAErI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,sBAAsB,CAAC;IAC9D,CAAC;IAEO,0BAAW,GAAnB,UAAoB,OAA2B,EAAE,KAAwB,EAAE,UAAuB,EAAE,KAAwC,EAAE,KAAe,EAAE,IAAqB;QAAzG,2BAAA,EAAA,cAAsB,CAAC;QAAE,sBAAA,EAAA,QAAgB,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAAE,sBAAA,EAAA,UAAe;QAAE,qBAAA,EAAA,gBAAqB;QAClL,OAAO,GAAG,OAAO,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;QAC5C,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5C,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;QACzB,CAAC;QAED,sEAAsE;QACtE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;YACnC,CAAC;QACH,CAAC;QAED,MAAM,CAAC;YACL,GAAG,EAAE,OAAO;YACZ,UAAU,EAAE,UAAU;YACtB,SAAS,EAAE,KAAK;YAChB,KAAK,EAAE,KAAK;YACZ,KAAK,EAAE,KAAK,IAAI,EAAE;YAClB,GAAG,EAAE,CAAC;YACN,MAAM,EAAE,CAAC;YACT,IAAI,EAAE,IAAI;SACX,CAAC;IACJ,CAAC;IAEO,8BAAe,GAAvB,UAAwB,KAAkB;QACpC,IAAA,wBAAwD,EAAtD,gBAAK,EAAE,0BAAU,EAAE,4BAAW,CAAyB;QAE7D,MAAM,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,UAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IAC9F,CAAC;IAED,uGAAuG;IAC/F,iCAAkB,GAA1B,UAA2B,KAAkB,EAAE,WAAqB;QAClE,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;QACpB,IAAA,iDAAoB,EAAE,mDAAqB,CAAW;QACtD,IAAA,wBAAK,CAAgB;QAC7B,uGAAuG;QACvG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC;QACT,CAAC;QAED,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QACpC,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;QAC3E,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAExE,mFAAmF;QACnF,0EAA0E;QAC1E,qGAAqG;QACrG,EAAE,CAAC,CACD,WAAW;YACX,CAAC,KAAK;YACN,CAAC,IAAI,CAAC,YAAY;YAClB,CAAC,YAAY;YACb,YAAY,KAAK,IAAI,CAAC,aAAa;YACnC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;YACxE,WAAW,GAAG,IAAI,CAAC,YAAY,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzE,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC9B,CAAC;QAED,kFAAkF;QAClF,gEAAgE;QAChE,EAAE,CAAC,CAAC,WAAW;YACb,CAAC,YAAY;YACb,YAAY,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAElC,uGAAuG;QACvG,4BAA4B;QAC5B,qGAAqG;QACrG,iDAAiD;QACjD,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACjD,IAAM,WAAW,GAAG;YAClB,GAAG,EAAE,UAAU;YACf,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,MAAM,EAAE,UAAU,GAAG,MAAM,CAAC,WAAW;YACvC,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,MAAM,EAAE,MAAM,CAAC,WAAW;SAC3B,CAAC;QAEF,wEAAwE;QACxE,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACvG,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,WAAW,EAAE,qBAAsB,EAAE,oBAAqB,CAAC,CAAC;IAC9F,CAAC;IAj0Ba,iBAAY,GAAG;QAC3B,UAAU,EAAE,CAAC;QACb,YAAY,EAAE,UAAC,IAAS,EAAE,KAAa,EAAE,aAAsB,IAAK,OAAA,CAAC,iCAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAQ,CAAC,EAA1C,CAA0C;QAC9G,oBAAoB,EAAE,8BAA8B;QACpD,qBAAqB,EAAE,+BAA+B;KACvD,CAAC;IAyUF;QADC,oBAAQ;6CA+CR;IAscH,WAAC;CAAA,AAn0BD,CAA0B,yBAAa,GAm0BtC;AAn0BY,oBAAI;AAq0BjB,qBAAqB,IAAgB,EAAE,WAAmB,EAAE,UAAkB;IAC5E,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IACnD,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,WAAW,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAExE,MAAM,CAAC;QACL,GAAG,EAAE,GAAG;QACR,MAAM,EAAE,GAAG,GAAG,MAAM;QACpB,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC;AACJ,CAAC;AAED,4BAA4B,SAAqB,EAAE,SAAqB;IACtE,MAAM,CAAC,CACL,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,GAAG;QAC9B,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI;QAChC,SAAS,CAAC,MAAO,IAAI,SAAS,CAAC,MAAO;QACtC,SAAS,CAAC,KAAM,IAAI,SAAS,CAAC,KAAM,CAAC,CAAC;AAC1C,CAAC;AAED,oBAAoB,UAAsB,EAAE,OAAmB;IAC7D,UAAU,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC;IACxG,UAAU,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC;IAC9G,UAAU,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,MAAO,GAAG,UAAU,CAAC,MAAO,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;IAC5H,UAAU,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,KAAM,GAAG,UAAU,CAAC,KAAM,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC;IACtH,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAM,GAAG,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;IAC3D,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAO,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;IAE5D,MAAM,CAAC,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  IRectangle,\r\n  css,\r\n  findIndex,\r\n  findScrollableParent,\r\n  getParent,\r\n  divProperties,\r\n  getNativeProps,\r\n  IRenderFunction,\r\n  autobind\r\n} from '../../Utilities';\r\nimport { IList, IListProps, IPage, IPageProps } from './List.Props';\r\n\r\nconst RESIZE_DELAY = 16;\r\nconst MIN_SCROLL_UPDATE_DELAY = 100;\r\nconst MAX_SCROLL_UPDATE_DELAY = 500;\r\nconst IDLE_DEBOUNCE_DELAY = 200;\r\nconst DEFAULT_ITEMS_PER_PAGE = 10;\r\nconst DEFAULT_PAGE_HEIGHT = 30;\r\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\r\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\r\n\r\nexport interface IListState {\r\n  pages?: IPage[];\r\n\r\n  /** The last versionstamp for  */\r\n  measureVersion?: number;\r\n}\r\n\r\ninterface IPageCacheItem {\r\n  page: IPage;\r\n  pageElement?: JSX.Element;\r\n}\r\n\r\ninterface IPageCache {\r\n  [key: string]: IPageCacheItem;\r\n}\r\n\r\nconst EMPTY_RECT = {\r\n  top: -1,\r\n  bottom: -1,\r\n  left: -1,\r\n  right: -1,\r\n  width: 0,\r\n  height: 0\r\n};\r\n\r\n// Naming expensive measures so that they're named in profiles.\r\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\r\nconst _measureSurfaceRect = _measurePageRect;\r\nconst _measureScrollRect = _measurePageRect;\r\n\r\n/**\r\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback if\r\n * provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if provided by\r\n * the caller, or by cached measurements if available, or by a running average, or a default fallback.\r\n *\r\n * The algorithm for rendering pages works like this:\r\n *\r\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\r\n * 2. If changes are necessary, apply changes (add/remove pages)\r\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\r\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\r\n *\r\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\r\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\r\n *\r\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\r\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time. And we\r\n * start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\r\n *\r\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\r\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\r\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\r\n */\r\nexport class List extends BaseComponent<IListProps, IListState> implements IList {\r\n  public static defaultProps = {\r\n    startIndex: 0,\r\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => (<div>{ (item && item.name) || '' }</div>),\r\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\r\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n    root: HTMLElement,\r\n    surface: HTMLElement\r\n  };\r\n\r\n  private _estimatedPageHeight: number;\r\n  private _totalEstimates: number;\r\n  private _cachedPageHeights: {\r\n    [key: string]: {\r\n      height: number,\r\n      measureVersion: number\r\n    }\r\n  };\r\n  private _focusedIndex: number;\r\n  private _scrollElement: HTMLElement;\r\n  private _scrollingToIndex: number;\r\n  private _hasCompletedFirstRender: boolean;\r\n\r\n  // surface rect relative to window\r\n  private _surfaceRect: IRectangle;\r\n\r\n  // The visible rect that we're required to render given the current list state.\r\n  private _requiredRect: IRectangle | null;\r\n\r\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\r\n  private _allowedRect: IRectangle;\r\n\r\n  // materialized rect around visible items, relative to surface\r\n  private _materializedRect: IRectangle | null;\r\n\r\n  private _requiredWindowsAhead: number;\r\n  private _requiredWindowsBehind: number;\r\n\r\n  private _measureVersion: number;\r\n  private _scrollHeight: number;\r\n  private _scrollTop: number;\r\n  private _pageCache: IPageCache;\r\n\r\n  constructor(props: IListProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pages: []\r\n    };\r\n\r\n    this._estimatedPageHeight = 0;\r\n    this._totalEstimates = 0;\r\n    this._requiredWindowsAhead = 0;\r\n    this._requiredWindowsBehind = 0;\r\n\r\n    // Track the measure version for everything.\r\n    this._measureVersion = 0;\r\n\r\n    // Ensure that scrolls are lazy updated.\r\n    this._onAsyncScroll = this._async.debounce(\r\n      this._onAsyncScroll,\r\n      MIN_SCROLL_UPDATE_DELAY,\r\n      {\r\n        leading: false,\r\n        maxWait: MAX_SCROLL_UPDATE_DELAY\r\n      });\r\n\r\n    this._onAsyncIdle = this._async.debounce(\r\n      this._onAsyncIdle,\r\n      IDLE_DEBOUNCE_DELAY, {\r\n        leading: false\r\n      });\r\n\r\n    this._onAsyncResize = this._async.debounce(\r\n      this._onAsyncResize,\r\n      RESIZE_DELAY,\r\n      {\r\n        leading: false\r\n      });\r\n\r\n    this._cachedPageHeights = {};\r\n    this._estimatedPageHeight = 0;\r\n    this._focusedIndex = -1;\r\n    this._scrollingToIndex = -1;\r\n    this._pageCache = {};\r\n  }\r\n\r\n  /**\r\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\r\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\r\n   *\r\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\r\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\r\n   *\r\n   * @param index Index of item to scroll to\r\n   * @param measureItem Optional callback to measure the height of an individual item\r\n   */\r\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number): void {\r\n    const startIndex = this.props.startIndex as number;\r\n    const renderCount = this._getRenderCount();\r\n    const endIndex = startIndex + renderCount;\r\n\r\n    const allowedRect = this._allowedRect;\r\n\r\n    let scrollTop = 0;\r\n\r\n    let itemsPerPage = 1;\r\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\r\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\r\n\r\n      const pageHeight = pageSpecification.height;\r\n      itemsPerPage = pageSpecification.itemCount;\r\n\r\n      const requestedIndexIsInPage = itemIndex <= index && (itemIndex + itemsPerPage) > index;\r\n      if (requestedIndexIsInPage) {\r\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in just\r\n        // the given item, otherwise we'll only bring the page into view\r\n        if (measureItem) {\r\n          // Adjust for actual item position within page\r\n          const itemPositionWithinPage = index - itemIndex;\r\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\r\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\r\n          }\r\n          const scrollBottom = scrollTop + measureItem(index);\r\n\r\n          const scrollRect = _measureScrollRect(this._scrollElement);\r\n          const scrollWindow = {\r\n            top: this._scrollElement.scrollTop,\r\n            bottom: this._scrollElement.scrollTop + scrollRect.height\r\n          };\r\n\r\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\r\n          if (itemIsFullyVisible) {\r\n            // Item is already visible, do nothing.\r\n            return;\r\n          }\r\n\r\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\r\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\r\n\r\n          if (itemIsPartiallyAbove) {\r\n            // We will just scroll to 'scrollTop'\r\n            //  ______\r\n            // |Item  |   - scrollTop\r\n            // |  ____|_\r\n            // |_|____| | - scrollWindow.top\r\n            //   |      |\r\n            //   |______|\r\n          } else if (itemIsPartiallyBelow) {\r\n            // Adjust scrollTop position to just bring in the element\r\n            //  ______   - scrollTop\r\n            // |      |\r\n            // |  ____|_  - scrollWindow.bottom\r\n            // |_|____| |\r\n            //   | Item |\r\n            //   |______| - scrollBottom\r\n            scrollTop = this._scrollElement.scrollTop + (scrollBottom - scrollWindow.bottom);\r\n          }\r\n        }\r\n\r\n        this._scrollElement.scrollTop = scrollTop;\r\n        break;\r\n      }\r\n\r\n      scrollTop += pageHeight;\r\n    }\r\n  }\r\n\r\n  public componentDidMount() {\r\n\r\n    this._updatePages();\r\n    this._measureVersion++;\r\n    this._scrollElement = findScrollableParent(this.refs.root) as HTMLElement;\r\n\r\n    this._events.on(window, 'resize', this._onAsyncResize);\r\n    this._events.on(this.refs.root, 'focus', this._onFocus, true);\r\n    if (this._scrollElement) {\r\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\r\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IListProps) {\r\n    if (newProps.items !== this.props.items ||\r\n      newProps.renderCount !== this.props.renderCount ||\r\n      newProps.startIndex !== this.props.startIndex) {\r\n\r\n      // We have received new items so we want to make sure that initially we only render a single window to\r\n      // fill the currently visible rect, and then later render additional windows.\r\n      this._resetRequiredWindows();\r\n      this._requiredRect = null;\r\n\r\n      this._measureVersion++;\r\n      this._invalidatePageCache();\r\n      this._updatePages(newProps);\r\n    }\r\n  }\r\n\r\n  public shouldComponentUpdate(newProps: IListProps, newState: IListState) {\r\n    let { pages: oldPages } = this.state;\r\n    let { pages: newPages } = newState;\r\n    let shouldComponentUpdate = false;\r\n\r\n    if (newProps.items === this.props.items &&\r\n      oldPages!.length === newPages!.length) {\r\n      for (let i = 0; i < oldPages!.length; i++) {\r\n        let oldPage = oldPages![i];\r\n        let newPage = newPages![i];\r\n\r\n        if ((oldPage.key !== newPage.key ||\r\n          oldPage.itemCount !== newPage.itemCount)) {\r\n          shouldComponentUpdate = true;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      shouldComponentUpdate = true;\r\n    }\r\n\r\n    return shouldComponentUpdate;\r\n  }\r\n\r\n  public forceUpdate() {\r\n    this._invalidatePageCache();\r\n    // Ensure that when the list is force updated we update the pages first before render.\r\n    this._updateRenderRects(this.props, true);\r\n    this._updatePages();\r\n    this._measureVersion++;\r\n\r\n    super.forceUpdate();\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      className,\r\n      role\r\n    } = this.props;\r\n    const {\r\n      pages = []\r\n    } = this.state;\r\n    let pageElements: JSX.Element[] = [];\r\n    let divProps = getNativeProps(this.props, divProperties);\r\n\r\n    for (const page of pages) {\r\n      pageElements.push(this._renderPage(page));\r\n    }\r\n\r\n    // console.log(`Page elements ${pageElements.length}`);\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        { ...divProps }\r\n        role={ (role === undefined) ? 'list' : role }\r\n        className={ css('ms-List', className) }\r\n      >\r\n        <div ref='surface' className={ css('ms-List-surface') } role='presentation'>\r\n          { pageElements }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _shouldVirtualize(props: IListProps = this.props): boolean {\r\n    const {\r\n      onShouldVirtualize\r\n    } = props;\r\n    return !onShouldVirtualize || onShouldVirtualize(props);\r\n  }\r\n\r\n  /**\r\n   * when props.items change or forceUpdate called, throw away cached pages\r\n   */\r\n  private _invalidatePageCache() {\r\n    this._pageCache = {};\r\n  }\r\n\r\n  private _renderPage(page: IPage): JSX.Element {\r\n    let { usePageCache } = this.props;\r\n    let cachedPage;\r\n    // if usePageCache is set and cached page element can be found, just return cached page\r\n    if (usePageCache) {\r\n      cachedPage = this._pageCache[page.key];\r\n      if (cachedPage && cachedPage.pageElement) {\r\n        return cachedPage.pageElement;\r\n      }\r\n    }\r\n\r\n    const pageStyle = this._getPageStyle(page);\r\n\r\n    const {\r\n      onRenderPage = this._onRenderPage\r\n    } = this.props;\r\n\r\n    const pageElement = onRenderPage({\r\n      page: page,\r\n      className: css('ms-List-page'),\r\n      key: page.key,\r\n      ref: page.key,\r\n      style: pageStyle,\r\n      role: 'presentation'\r\n    }, this._onRenderPage);\r\n\r\n    // cache the first page for now since it is re-rendered a lot times unncessarily.\r\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\r\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\r\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\r\n    if (usePageCache && page.startIndex === 0) {\r\n      this._pageCache[page.key] = {\r\n        page: page,\r\n        pageElement: pageElement\r\n      };\r\n    }\r\n    return pageElement;\r\n  }\r\n\r\n  /** Generate the style object for the page. */\r\n  private _getPageStyle(page: IPage): React.StyleHTMLAttributes<HTMLDivElement> {\r\n    const {\r\n      getPageStyle\r\n    } = this.props;\r\n\r\n    return {\r\n      ...(getPageStyle ? getPageStyle(page) : {}),\r\n      ...(!page.items ? {\r\n        height: page.height\r\n      } : {})\r\n    };\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderPage(pageProps: IPageProps, defaultRender?: IRenderFunction<IPageProps>): any {\r\n    const {\r\n      onRenderCell,\r\n      role\r\n    } = this.props;\r\n\r\n    const {\r\n      page: {\r\n        items,\r\n      startIndex\r\n      },\r\n      ...divProps\r\n    } = pageProps;\r\n\r\n    // only assign list item role if no role is assigned\r\n    const cellRole = (role === undefined) ? 'listitem' : 'presentation';\r\n\r\n    const cells = (items || []).map((item: any, offset: number) => {\r\n      const index = startIndex + offset;\r\n\r\n      let itemKey = this.props.getKey ?\r\n        this.props.getKey(item, index) :\r\n        item && item.key;\r\n\r\n      if (itemKey === null || itemKey === undefined) {\r\n        itemKey = index;\r\n      }\r\n\r\n      return (\r\n        <div\r\n          role={ cellRole }\r\n          className={ css('ms-List-cell') }\r\n          key={ itemKey }\r\n          data-list-index={ index }\r\n          data-automationid='ListCell'\r\n        >\r\n          { onRenderCell && onRenderCell(item, index) }\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div { ...divProps }>\r\n        { cells }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** Track the last item index focused so that we ensure we keep it rendered. */\r\n  private _onFocus(ev: any) {\r\n    let target = ev.target as HTMLElement;\r\n\r\n    while (target !== this.refs.surface) {\r\n      let indexString = target.getAttribute('data-list-index');\r\n\r\n      if (indexString) {\r\n        this._focusedIndex = Number(indexString);\r\n        break;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\r\n   * we will call onAsyncIdle which will reset it back to it's correct value.\r\n   */\r\n  private _onScroll() {\r\n    this._resetRequiredWindows();\r\n  }\r\n\r\n  private _resetRequiredWindows() {\r\n    this._requiredWindowsAhead = 0;\r\n    this._requiredWindowsBehind = 0;\r\n  }\r\n\r\n  /**\r\n   * Debounced method to asynchronously update the visible region on a scroll event.\r\n   */\r\n  private _onAsyncScroll() {\r\n    this._updateRenderRects();\r\n\r\n    // Only update pages when the visible rect falls outside of the materialized rect.\r\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\r\n      this._updatePages();\r\n    } else {\r\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\r\n   * either, we increase the amount we render and re-evaluate.\r\n   */\r\n  private _onAsyncIdle() {\r\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\r\n    const {\r\n      _requiredWindowsAhead: requiredWindowsAhead,\r\n      _requiredWindowsBehind: requiredWindowsBehind\r\n    } = this;\r\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\r\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\r\n\r\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\r\n\r\n      // console.log('idling', windowsBehind, windowsAhead);\r\n\r\n      this._requiredWindowsAhead = windowsAhead;\r\n      this._requiredWindowsBehind = windowsBehind;\r\n      this._updateRenderRects();\r\n      this._updatePages();\r\n    }\r\n\r\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\r\n      // Async increment on next tick.\r\n      this._onAsyncIdle();\r\n    }\r\n  }\r\n\r\n  private _onAsyncResize() {\r\n    this.forceUpdate();\r\n  }\r\n\r\n  private _updatePages(props: IListProps = this.props) {\r\n    // console.log('updating pages');\r\n\r\n    if (!this._requiredRect) {\r\n      this._updateRenderRects(props);\r\n    }\r\n\r\n    let newListState = this._buildPages(props);\r\n    let oldListPages = this.state.pages;\r\n\r\n    this.setState(newListState, () => {\r\n      // If measured version is invalid since we've updated the DOM\r\n      const heightsChanged = this._updatePageMeasurements(oldListPages as IPage[], newListState.pages as IPage[]);\r\n\r\n      // On first render, we should re-measure so that we don't get a visual glitch.\r\n      if (heightsChanged) {\r\n        this._materializedRect = null;\r\n        if (!this._hasCompletedFirstRender) {\r\n          this._hasCompletedFirstRender = true;\r\n          this._updatePages(props);\r\n        } else {\r\n          this._onAsyncScroll();\r\n        }\r\n      } else {\r\n        // Enqueue an idle bump.\r\n        this._onAsyncIdle();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _updatePageMeasurements(oldPages: IPage[], newPages: IPage[]) {\r\n    const renderedIndexes: {\r\n      [index: number]: IPage;\r\n    } = {};\r\n\r\n    let heightChanged = false;\r\n\r\n    // when not in virtualize mode, we render all the items without page measurement\r\n    if (!this._shouldVirtualize()) {\r\n      return heightChanged;\r\n    }\r\n\r\n    for (let i = 0; i < oldPages.length; i++) {\r\n      let page = oldPages[i];\r\n\r\n      if (page.items) {\r\n        renderedIndexes[page.startIndex] = page;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < newPages.length; i++) {\r\n      let page = newPages[i];\r\n\r\n      if (page.items) {\r\n        heightChanged = this._measurePage(page) || heightChanged;\r\n\r\n        if (!renderedIndexes[page.startIndex]) {\r\n          this._onPageAdded(page);\r\n        } else {\r\n          delete renderedIndexes[page.startIndex];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let index in renderedIndexes) {\r\n      if (renderedIndexes.hasOwnProperty(index)) {\r\n        this._onPageRemoved(renderedIndexes[index]);\r\n      }\r\n    }\r\n\r\n    return heightChanged;\r\n  }\r\n\r\n  /**\r\n   * Given a page, measure its dimensions, update cache.\r\n   * @returns True if the height has changed.\r\n   */\r\n  private _measurePage(page: IPage): boolean {\r\n    let hasChangedHeight = false;\r\n    let pageElement = this.refs[page.key] as HTMLElement;\r\n    let cachedHeight = this._cachedPageHeights[page.startIndex];\r\n\r\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\r\n\r\n    if (pageElement && this._shouldVirtualize() && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {\r\n      let newClientRect = {\r\n        width: pageElement.clientWidth,\r\n        height: pageElement.clientHeight\r\n      };\r\n\r\n      if (newClientRect.height || newClientRect.width) {\r\n        hasChangedHeight = page.height !== newClientRect.height;\r\n\r\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\r\n\r\n        page.height = newClientRect.height;\r\n\r\n        this._cachedPageHeights[page.startIndex] = {\r\n          height: newClientRect.height,\r\n          measureVersion: this._measureVersion\r\n        };\r\n\r\n        this._estimatedPageHeight = Math.round(\r\n          ((this._estimatedPageHeight * this._totalEstimates) + newClientRect.height) /\r\n          (this._totalEstimates + 1));\r\n\r\n        this._totalEstimates++;\r\n      }\r\n    }\r\n\r\n    return hasChangedHeight;\r\n  }\r\n\r\n  /** Called when a page has been added to the DOM. */\r\n  private _onPageAdded(page: IPage) {\r\n    let { onPageAdded } = this.props;\r\n\r\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\r\n\r\n    if (onPageAdded) {\r\n      onPageAdded(page);\r\n    }\r\n  }\r\n\r\n  /** Called when a page has been removed from the DOM. */\r\n  private _onPageRemoved(page: IPage) {\r\n    let { onPageRemoved } = this.props;\r\n\r\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\r\n\r\n    if (onPageRemoved) {\r\n      onPageRemoved(page);\r\n    }\r\n  }\r\n\r\n  /** Build up the pages that should be rendered. */\r\n  private _buildPages(props: IListProps): IListState {\r\n    let { items, startIndex, renderCount, getPageHeight } = props;\r\n\r\n    renderCount = this._getRenderCount(props);\r\n\r\n    const materializedRect = { ...EMPTY_RECT };\r\n    const pages: IPage[] = [];\r\n\r\n    let itemsPerPage = 1;\r\n    let pageTop = 0;\r\n    let currentSpacer = null;\r\n    let focusedIndex = this._focusedIndex;\r\n    let endIndex = startIndex! + renderCount;\r\n    const shouldVirtualize = this._shouldVirtualize(props);\r\n\r\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\r\n    // So we should default to rendering only the first page so that we can get information.\r\n    // However if the user provides a measure function, let's just assume they know the right heights.\r\n    let isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\r\n\r\n    const allowedRect = this._allowedRect;\r\n\r\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\r\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\r\n      const pageHeight = pageSpecification.height;\r\n      const pageData = pageSpecification.data;\r\n\r\n      itemsPerPage = pageSpecification.itemCount;\r\n\r\n      let pageBottom = pageTop + pageHeight - 1;\r\n\r\n      let isPageRendered = findIndex(this.state.pages as IPage[], (page: IPage) => !!page.items && page.startIndex === itemIndex) > -1;\r\n      let isPageInAllowedRange = !allowedRect || pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!;\r\n      let isPageInRequiredRange = !this._requiredRect || pageBottom >= this._requiredRect!.top && pageTop <= this._requiredRect!.bottom!;\r\n      let isPageVisible = !isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered)) || !shouldVirtualize;\r\n      let isPageFocused = focusedIndex >= itemIndex && focusedIndex < (itemIndex + itemsPerPage);\r\n      let isFirstPage = itemIndex === startIndex;\r\n\r\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' + isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\r\n\r\n      // Only render whats visible, focused, or first page,\r\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\r\n      if (isPageVisible || isPageFocused || isFirstPage) {\r\n        if (currentSpacer) {\r\n          pages.push(currentSpacer);\r\n          currentSpacer = null;\r\n        }\r\n\r\n        let itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\r\n        let newPage = this._createPage(undefined, items!.slice(itemIndex, itemIndex + itemsInPage), itemIndex, undefined, undefined, pageData);\r\n\r\n        newPage.top = pageTop;\r\n        newPage.height = pageHeight;\r\n\r\n        pages.push(newPage);\r\n\r\n        if (isPageInRequiredRange && this._allowedRect) {\r\n          _mergeRect(materializedRect, {\r\n            top: pageTop,\r\n            bottom: pageBottom,\r\n            height: pageHeight,\r\n            left: allowedRect.left,\r\n            right: allowedRect.right,\r\n            width: allowedRect.width\r\n          });\r\n        }\r\n\r\n      } else {\r\n        if (!currentSpacer) {\r\n          currentSpacer = this._createPage('spacer-' + itemIndex, undefined, itemIndex, 0, undefined, pageData);\r\n        }\r\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\r\n        currentSpacer.itemCount += itemsPerPage;\r\n      }\r\n      pageTop += (pageBottom - pageTop + 1);\r\n\r\n      // in virtualized mode, we render need to render first page then break and measure,\r\n      // otherwise, we render all items without measurement to make rendering fast\r\n      if (isFirstRender && shouldVirtualize) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (currentSpacer) {\r\n      currentSpacer.key = 'spacer-end';\r\n      pages.push(currentSpacer);\r\n    }\r\n\r\n    this._materializedRect = materializedRect;\r\n\r\n    // console.log('materialized: ', materializedRect);\r\n    return {\r\n      pages: pages,\r\n      measureVersion: this._measureVersion\r\n    };\r\n  }\r\n\r\n  private _getPageSpecification(itemIndex: number, visibleRect: IRectangle): {\r\n    // These return values are now no longer optional.\r\n    itemCount: number;\r\n    height: number;\r\n    data?: any;\r\n  } {\r\n    const {\r\n      getPageSpecification\r\n    } = this.props;\r\n    if (getPageSpecification) {\r\n      const pageData = getPageSpecification(itemIndex, visibleRect);\r\n\r\n      const {\r\n        itemCount = this._getItemCountForPage(itemIndex, visibleRect)\r\n      } = pageData;\r\n\r\n      const {\r\n        height = this._getPageHeight(itemIndex, itemCount, visibleRect)\r\n      } = pageData;\r\n\r\n      return {\r\n        itemCount: itemCount,\r\n        height: height,\r\n        data: pageData.data\r\n      };\r\n    } else {\r\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\r\n\r\n      return {\r\n        itemCount: itemCount,\r\n        height: this._getPageHeight(itemIndex, itemCount, visibleRect)\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\r\n   * cached height, or estimated page height, or default page height.\r\n   */\r\n  private _getPageHeight(itemIndex: number, itemsPerPage: number, visibleRect: IRectangle): number {\r\n    if (this.props.getPageHeight) {\r\n      return this.props.getPageHeight(itemIndex, visibleRect);\r\n    } else {\r\n      let cachedHeight = (this._cachedPageHeights[itemIndex]);\r\n\r\n      return cachedHeight ? cachedHeight.height : (this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT);\r\n    }\r\n  }\r\n\r\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\r\n    let itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;\r\n\r\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\r\n  }\r\n\r\n  private _createPage(pageKey: string | undefined, items: any[] | undefined, startIndex: number = -1, count: number = items ? items.length : 0, style: any = {}, data: any = undefined): IPage {\r\n    pageKey = pageKey || ('page-' + startIndex);\r\n    const cachedPage = this._pageCache[pageKey];\r\n    if (cachedPage && cachedPage.page) {\r\n      return cachedPage.page;\r\n    }\r\n\r\n    // Fill undefined cells because array.map will ignore undefined cells.\r\n    if (items) {\r\n      for (let i = 0; i < items.length; i++) {\r\n        items[i] = items[i] || undefined;\r\n      }\r\n    }\r\n\r\n    return {\r\n      key: pageKey,\r\n      startIndex: startIndex,\r\n      itemCount: count,\r\n      items: items,\r\n      style: style || {},\r\n      top: 0,\r\n      height: 0,\r\n      data: data\r\n    };\r\n  }\r\n\r\n  private _getRenderCount(props?: IListProps): number {\r\n    let { items, startIndex, renderCount } = props || this.props;\r\n\r\n    return (renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount);\r\n  }\r\n\r\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\r\n  private _updateRenderRects(props?: IListProps, forceUpdate?: boolean) {\r\n    props = props || this.props;\r\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\r\n    const { pages } = this.state;\r\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\r\n    if (!this._shouldVirtualize()) {\r\n      return;\r\n    }\r\n\r\n    let surfaceRect = this._surfaceRect;\r\n    let scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\r\n    let scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\r\n\r\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\r\n    // This needs to be called to recalculate when new pages should be loaded.\r\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\r\n    if (\r\n      forceUpdate ||\r\n      !pages ||\r\n      !this._surfaceRect ||\r\n      !scrollHeight ||\r\n      scrollHeight !== this._scrollHeight ||\r\n      Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3) {\r\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this.refs.surface);\r\n      this._scrollTop = scrollTop;\r\n    }\r\n\r\n    // If the scroll height has changed, something in the container likely resized and\r\n    // we should redo the page heights incase their content resized.\r\n    if (forceUpdate ||\r\n      !scrollHeight ||\r\n      scrollHeight !== this._scrollHeight) {\r\n      this._measureVersion++;\r\n    }\r\n\r\n    this._scrollHeight = scrollHeight;\r\n\r\n    // If the surface is above the container top or below the container bottom, or if this is not the first\r\n    // render return empty rect.\r\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\r\n    // used to calculate the width of the list items.\r\n    const visibleTop = Math.max(0, -surfaceRect.top);\r\n    const visibleRect = {\r\n      top: visibleTop,\r\n      left: surfaceRect.left,\r\n      bottom: visibleTop + window.innerHeight,\r\n      right: surfaceRect.right,\r\n      width: surfaceRect.width,\r\n      height: window.innerHeight\r\n    };\r\n\r\n    // The required/allowed rects are adjusted versions of the visible rect.\r\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\r\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\r\n  }\r\n}\r\n\r\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\r\n  const top = rect.top - (pagesBefore * rect.height);\r\n  const height = rect.height + ((pagesBefore + pagesAfter) * rect.height);\r\n\r\n  return {\r\n    top: top,\r\n    bottom: top + height,\r\n    height: height,\r\n    left: rect.left,\r\n    right: rect.right,\r\n    width: rect.width\r\n  };\r\n}\r\n\r\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\r\n  return (\r\n    innerRect.top >= outerRect.top &&\r\n    innerRect.left >= outerRect.left &&\r\n    innerRect.bottom! <= outerRect.bottom! &&\r\n    innerRect.right! <= outerRect.right!);\r\n}\r\n\r\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\r\n  targetRect.top = (newRect.top < targetRect.top || targetRect.top === -1) ? newRect.top : targetRect.top;\r\n  targetRect.left = (newRect.left < targetRect.left || targetRect.left === -1) ? newRect.left : targetRect.left;\r\n  targetRect.bottom = (newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1) ? newRect.bottom : targetRect.bottom;\r\n  targetRect.right = (newRect.right! > targetRect.right! || targetRect.right === -1) ? newRect.right : targetRect.right;\r\n  targetRect.width = targetRect.right! - targetRect.left + 1;\r\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\r\n\r\n  return targetRect;\r\n}\r\n"]}