{"version":3,"file":"HoverCard.Props.js","sourceRoot":"../src/","sources":["components/HoverCard/HoverCard.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { HoverCard } from './HoverCard';\r\nimport { IExpandingCardProps } from './ExpandingCard.Props';\r\nimport { IStyle } from '../../Styling';\r\n\r\nexport interface IHoverCard {\r\n\r\n}\r\n\r\n/**\r\n * HoverCard component props.\r\n */\r\nexport interface IHoverCardProps extends React.HTMLAttributes<HTMLDivElement | HoverCard> {\r\n  /**\r\n   * Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: IHoverCard) => void;\r\n\r\n  /**\r\n   * Additional properties to pass through for HoverCard, reference detail properties in IHoverCardProps\r\n   */\r\n  expandingCardProps?: IExpandingCardProps;\r\n\r\n  /**\r\n   * Whether or not to mark the container as described by the hover card.\r\n   * If not specified, the caller should mark as element as described by the hover card id.\r\n   */\r\n  setAriaDescribedBy?: boolean;\r\n\r\n  /**\r\n   * Length of compact card delay\r\n   * @default 500\r\n   */\r\n  cardOpenDelay?: number;\r\n\r\n  /**\r\n   * Length of card dismiss delay. A min number is necessary for pointer to hop between target and card\r\n   * @default 100\r\n   */\r\n  cardDismissDelay?: number;\r\n\r\n  /**\r\n   * Time in ms when expanded card should open after compact card\r\n   * @default 1500\r\n   */\r\n  expandedCardOpenDelay?: number;\r\n\r\n  /**\r\n   * If true disables Card dismiss upon mouse leave, so that card sticks around.\r\n   * @default false\r\n   */\r\n  sticky?: boolean;\r\n\r\n  /**\r\n   * Enables instant open of the full card upon click\r\n   * @default false\r\n   */\r\n  instantOpenOnClick?: boolean;\r\n\r\n  /**\r\n   * Custom styles for this component\r\n   */\r\n  styles?: IHoverCardStyles;\r\n\r\n  /**\r\n   * Optional target element to tag hover card on\r\n   */\r\n  target?: HTMLElement | string;\r\n\r\n  /**\r\n   * Callback when card becomes visible\r\n   */\r\n  onCardVisible?: () => void;\r\n\r\n  /**\r\n   * Callback when card hides\r\n   */\r\n  onCardHide?: () => void;\r\n\r\n  /**\r\n   * Trap focus or not\r\n   */\r\n  trapFocus?: boolean;\r\n}\r\n\r\nexport interface IHoverCardStyles {\r\n  /**\r\n   * Style for the host element in the default enabled, non-toggled state.\r\n   */\r\n  host?: IStyle;\r\n}\r\n"]}