{"version":3,"file":"CalendarPage.js","sourceRoot":"../src/","sources":["components/Calendar/CalendarPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ComponentPage,\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { DateRangeType } from 'office-ui-fabric-react/lib/Calendar';\r\nimport { CalendarButtonExample } from './examples/Calendar.Button.Example';\r\nimport { CalendarInlineExample } from './examples/Calendar.Inline.Example';\r\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\r\nimport { CalendarStatus } from './Calendar.checklist';\r\nimport { addMonths, addYears } from '../../utilities/dateMath/DateMath';\r\n\r\nconst CalendarButtonExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Button.Example.tsx') as string;\r\nconst CalendarInlineExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Inline.Example.tsx') as string;\r\n\r\nexport class CalendarPage extends React.Component<IComponentDemoPageProps, any> {\r\n  public render() {\r\n    const today = new Date(Date.now());\r\n    return (\r\n      <ComponentPage\r\n        title={ 'Calendar' }\r\n        componentName='CalendarExample'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard title='Inline Calendar' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample\r\n                isMonthPickerVisible={ false }\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ false }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with overlayed month picker when header is clicked'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                showMonthPickerAsOverlay={ true }\r\n                highlightCurrentMonth={ true }\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ false }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with month picker'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                highlightCurrentMonth={ true }\r\n                showGoToToday={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with week selection'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Week }\r\n                autoNavigateOnSelection={ true }\r\n                showGoToToday={ true }\r\n                showNavigateButtons={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with month selection'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Month }\r\n                autoNavigateOnSelection={ true }\r\n                showGoToToday={ true }\r\n                showNavigateButtons={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard title='Inline Calendar with week numbers' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample\r\n                isMonthPickerVisible={ false }\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ false }\r\n                showWeekNumbers={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard title='Inline Calendar with month picker and no day picker' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Month }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ true }\r\n                highlightCurrentMonth={ true }\r\n                isDayPickerVisible={ false }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with date boundary (minDate, maxDate)'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ true }\r\n                highlightCurrentMonth={ true }\r\n                showGoToToday={ false }\r\n                minDate={ addMonths(today, -1) }\r\n                maxDate={ addYears(today, 1) }\r\n              />\r\n\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Calendar launched from a button'\r\n              code={ CalendarButtonExampleCode }\r\n            >\r\n              <CalendarButtonExample\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Month picker launched from a button'\r\n              code={ CalendarButtonExampleCode }\r\n            >\r\n              <CalendarButtonExample\r\n                isDayPickerVisible={ false }\r\n                highlightCurrentMonth={ true }\r\n                buttonString={ 'Click for Month Picker' }\r\n              />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/Calendar.Props.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              The calendar component allows a user to browse through a calendar and pick a date value.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div />\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Use the control as a single entity.</li>\r\n              <li>Set the default date to the current date unless a specific date is required for context (e.g. the date of the conference).</li>\r\n              <li>The control is designed to resize relative to available screen width. Allow it to render in either wide or narrow as appropriate.</li>\r\n              <li>When the control is engaged, the Calendar renders as a flyout and has defined widths (300px -narrow and 440px â€“ wide). Plan your UI implementation accordingly.</li>\r\n              <li>The control renders date in a specific format. If allowing for manual entry of date, provide helper text in the appropriate format.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't attempt to break apart year from month/day selectors. If granularity is required, use the Dropdown control or something similar.</li>\r\n              <li>Don't attempt to force resize the control in any way.</li>\r\n              <li>Don't force the control to render one mode vs. the other (year or month/day)</li>\r\n              <li>The flyout selector is a light dismiss control. Don't modify this behavior in any way.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }\r\n        componentStatus={\r\n          <ComponentStatus\r\n            {...CalendarStatus}\r\n          />\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n"]}