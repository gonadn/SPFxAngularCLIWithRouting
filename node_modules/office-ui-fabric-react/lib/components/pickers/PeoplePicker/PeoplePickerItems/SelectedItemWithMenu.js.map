{"version":3,"file":"SelectedItemWithMenu.js","sourceRoot":"../src/","sources":["components/pickers/PeoplePicker/PeoplePickerItems/SelectedItemWithMenu.tsx"],"names":[],"mappings":";;;AAAA,oBAAoB;AACpB,6BAA+B;AAC/B,mBAAmB;AACnB,mDAAqE;AAErE,+CAA+D;AAC/D,6DAA6E;AAC7E,6CAAgD;AAChD,mDAAkD;AAClD,wDAA0D;AAC1D,IAAM,MAAM,GAAQ,YAAY,CAAC;AAMjC;IAA0C,gDAAqE;IAM7G,8BAAY,KAAqC;QAAjD,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,KAAK,GAAG,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC;;IAChD,CAAC;IAEM,qCAAM,GAAb;QACM,IAAA,eAIU,EAHZ,cAAI,EACJ,8BAAY,EACZ,gDAAqB,CACR;QACf,MAAM,CAAC,CACL,kDAAyB,IAAI,EAAG,SAAS,EAAG,eAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,aAAa,CAAC;YAC9F,oBAAC,qBAAS,IAAC,SAAS,EAAG,eAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,gBAAgB,CAAC;gBAC/E,6BAAK,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;oBAC/D,oBAAC,iBAAO,uBACD,IAAW,IAChB,QAAQ,EAAG,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,yBAAe,CAAC,IAAI,IAC7E,CACE;gBACN,6BAAK,GAAG,EAAC,aAAa,EAAC,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;oBACjF,oBAAC,mBAAU,IACT,SAAS,EAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,EAChC,OAAO,EAAG,IAAI,CAAC,iBAAiB,GAChC,CACE;gBACN,6BAAK,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;oBAC/D,oBAAC,mBAAU,IACT,SAAS,EAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAClC,OAAO,EAAG,YAAY,EACtB,SAAS,EAAG,qBAAqB,GACjC,CACE;gBACJ,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CACnC,oBAAC,+BAAc,IACb,KAAK,EAAG,IAAI,CAAC,SAAU,EACvB,kBAAkB,EAAG,IAAI,EACzB,MAAM,EAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAC9B,SAAS,EAAG,IAAI,CAAC,sBAAsB,EACvC,eAAe,2BACf,CAAC;oBACH,CAAC,CAAC,IAAI,CACE,CACR,CACP,CAAC;IACJ,CAAC;IAGO,gDAAiB,GAAzB,UAA0B,EAAQ;QAChC,IAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC;IACjD,CAAC;IAGO,qDAAsB,GAA9B,UAA+B,EAAS;QACtC,IAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC,CAAC;IAClD,CAAC;IAPD;QADC,oBAAQ;iEAGR;IAGD;QADC,oBAAQ;sEAGR;IACH,2BAAC;CAAA,AA9DD,CAA0C,yBAAa,GA8DtD;AA9DY,oDAAoB","sourcesContent":["/* tslint:disable */\r\nimport * as React from 'react';\r\n/* tslint:enable */\r\nimport { BaseComponent, autobind, css } from '../../../../Utilities';\r\nimport { IPeoplePickerItemWithMenuProps } from './PeoplePickerItem.Props';\r\nimport { Persona, PersonaPresence } from '../../../../Persona';\r\nimport { ContextualMenu, DirectionalHint } from '../../../../ContextualMenu';\r\nimport { IconButton } from '../../../../Button';\r\nimport { FocusZone } from '../../../../FocusZone';\r\nimport * as stylesImport from './PickerItemsDefault.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IPeoplePickerItemState {\r\n  contextualMenuVisible: boolean;\r\n}\r\n\r\nexport class SelectedItemWithMenu extends BaseComponent<IPeoplePickerItemWithMenuProps, IPeoplePickerItemState> {\r\n  public refs: {\r\n    [key: string]: any,\r\n    ellipsisRef: HTMLElement\r\n  };\r\n\r\n  constructor(props: IPeoplePickerItemWithMenuProps) {\r\n    super(props);\r\n    this.state = { contextualMenuVisible: false };\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      item,\r\n      onRemoveItem,\r\n      removeButtonAriaLabel\r\n    } = this.props;\r\n    return (\r\n      <div data-is-focusable={ true } className={ css('ms-PickerItem-container', styles.itemContainer) }>\r\n        <FocusZone className={ css('ms-PickerPersona-container', styles.personaContainer) } >\r\n          <div className={ css('ms-PickerItem-content', styles.itemContent) }>\r\n            <Persona\r\n              { ...item as any }\r\n              presence={ item.presence !== undefined ? item.presence : PersonaPresence.none }\r\n            />\r\n          </div>\r\n          <div ref='ellipsisRef' className={ css('ms-PickerItem-content', styles.itemContent) }>\r\n            <IconButton\r\n              iconProps={ { iconName: 'More' } }\r\n              onClick={ this._onContextualMenu }\r\n            />\r\n          </div>\r\n          <div className={ css('ms-PickerItem-content', styles.itemContent) }>\r\n            <IconButton\r\n              iconProps={ { iconName: 'Cancel' } }\r\n              onClick={ onRemoveItem }\r\n              ariaLabel={ removeButtonAriaLabel }\r\n            />\r\n          </div>\r\n          { this.state.contextualMenuVisible ? (\r\n            <ContextualMenu\r\n              items={ item.menuItems! }\r\n              shouldFocusOnMount={ true }\r\n              target={ this.refs.ellipsisRef }\r\n              onDismiss={ this._onCloseContextualMenu }\r\n              directionalHint={ DirectionalHint.bottomAutoEdge }\r\n            />)\r\n            : null }\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onContextualMenu(ev?: any) {\r\n    this.setState({ contextualMenuVisible: true });\r\n  }\r\n\r\n  @autobind\r\n  private _onCloseContextualMenu(ev: Event) {\r\n    this.setState({ contextualMenuVisible: false });\r\n  }\r\n}\r\n"]}