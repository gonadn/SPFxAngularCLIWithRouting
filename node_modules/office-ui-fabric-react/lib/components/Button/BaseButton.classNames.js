"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utilities_1 = require("../../Utilities");
var Styling_1 = require("../../Styling");
exports.getClassNames = Utilities_1.memoizeFunction(function (styles, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {
    var isExpanded = expanded && !isSplit;
    return {
        root: Styling_1.mergeStyles(className, 'ms-Button', variantClassName, styles.root, checked && [
            'is-checked',
            styles.rootChecked
        ], isExpanded && [
            'is-expanded',
            styles.rootExpanded,
            {
                selectors: {
                    ':hover .ms-Button-icon': styles.iconExpandedHovered,
                    ':hover .ms-Button-menuIcon': styles.rootExpandedHovered,
                    ':hover': styles.rootExpandedHovered
                }
            }
        ], disabled && [
            'is-disabled',
            styles.rootDisabled
        ], !disabled && !isExpanded && !checked && {
            selectors: {
                ':hover': styles.rootHovered,
                ':hover .ms-Button-icon': styles.iconHovered,
                ':hover .ms-Button-description': styles.descriptionHovered,
                ':hover .ms-Button-menuIcon': styles.menuIconHovered,
                ':focus': styles.rootFocused,
                ':active': styles.rootPressed,
                ':active .ms-Button-icon': styles.iconPressed,
                ':active .ms-Button-description': styles.descriptionPressed,
                ':active .ms-Button-menuIcon': styles.menuIconPressed
            }
        }, disabled && checked && [
            styles.rootCheckedDisabled
        ], !disabled && checked && {
            selectors: {
                ':hover': styles.rootCheckedHovered,
                ':active': styles.rootCheckedPressed
            }
        }),
        flexContainer: Styling_1.mergeStyles('ms-Button-flexContainer', styles.flexContainer),
        textContainer: Styling_1.mergeStyles('ms-Button-textContainer', styles.textContainer),
        icon: Styling_1.mergeStyles('ms-Button-icon', iconClassName, styles.icon, isExpanded && styles.iconExpanded, checked && styles.iconChecked, disabled && styles.iconDisabled),
        label: Styling_1.mergeStyles('ms-Button-label', styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled),
        menuIcon: Styling_1.mergeStyles('ms-Button-menuIcon', menuIconClassName, styles.menuIcon, checked && styles.menuIconChecked, disabled && styles.menuIconDisabled, !disabled &&
            !isExpanded &&
            !checked && {
            selectors: {
                ':hover': styles.menuIconHovered,
                ':active': styles.menuIconPressed,
            },
        }, isExpanded && [
            'is-expanded',
            styles.menuIconExpanded,
            {
                selectors: {
                    ':hover': styles.menuIconExpandedHovered,
                },
            },
        ]),
        description: Styling_1.mergeStyles('ms-Button-description', styles.description, checked && styles.descriptionChecked, disabled && styles.descriptionDisabled),
        screenReaderText: Styling_1.mergeStyles('ms-Button-screenReaderText', styles.screenReaderText)
    };
});
//# sourceMappingURL=BaseButton.classNames.js.map