{"version":3,"file":"Checkbox.Props.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRenderFunction } from '../../Utilities';\r\nimport { IIconProps } from '../Icon/Icon.Props';\r\n\r\n/**\r\n * Checkbox class interface.\r\n */\r\nexport interface ICheckbox {\r\n  /** Gets the current checked state. */\r\n  checked: boolean;\r\n\r\n  /** Sets focus to the checkbox. */\r\n  focus: () => void;\r\n}\r\n\r\n/**\r\n * Checkbox properties.\r\n */\r\nexport interface ICheckboxProps extends React.ButtonHTMLAttributes<HTMLElement | HTMLInputElement> {\r\n  /**\r\n   * Optional callback to access the ICheckbox interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: ICheckbox) => void;\r\n\r\n  /**\r\n   * Additional class name to provide on the root element, in addition to the ms-Checkbox class.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Checked state. Mutually exclusive to \"defaultChecked\". Use this if you control the checked state at a higher\r\n   * level and plan to pass in the correct value based on handling onChange events and re-rendering.\r\n   */\r\n  checked?: boolean;\r\n\r\n  /**\r\n   * Default checked state. Mutually exclusive to \"checked\". Use this if you want an uncontrolled component, and\r\n   * want the Checkbox instance to maintain its own state.\r\n   */\r\n  defaultChecked?: boolean;\r\n\r\n  /**\r\n   * Label to display next to the checkbox.\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Disabled state of the checkbox.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Callback that is called when the checked value has changed.\r\n   */\r\n  onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;\r\n\r\n  /**\r\n   * Optional input props that will be mixed into the input element, *before* other props are applied. This allows\r\n   * you to extend the input element with additional attributes, such as data-automation-id needed for automation.\r\n   * Note that if you provide, for example, \"disabled\" as well as \"inputProps.disabled\", the former will take\r\n   * precedence over the later.\r\n   */\r\n  inputProps?: React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>;\r\n\r\n  /**\r\n   * Allows you to set the checkbox to be at the before (start) or after (end) the label.\r\n   * @default 'start'\r\n   */\r\n  boxSide?: 'start' | 'end';\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Accessible label for the checkbox.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * ID for element that contains label information for the checkbox.\r\n   */\r\n  ariaLabelledBy?: string;\r\n\r\n  /**\r\n   * ID for element that provides extended information for the checkbox.\r\n   */\r\n  ariaDescribedBy?: string;\r\n\r\n  /**\r\n   * Custom styles for this component\r\n   */\r\n  styles?: ICheckboxStyles;\r\n\r\n  /**\r\n   * Custom render function for the label.\r\n   */\r\n  onRenderLabel?: IRenderFunction<ICheckboxProps>;\r\n\r\n  /**\r\n   * Custom icon props for the check mark rendered by the checkbox\r\n   */\r\n  checkmarkIconProps?: IIconProps;\r\n}\r\n\r\nexport interface ICheckboxStyles {\r\n  /**\r\n   * Style for the root element (a button) of the checkbox component in the default enabled/unchecked state.\r\n   */\r\n  root?: IStyle;\r\n\r\n  /**\r\n   * Style for the label part (contains the customized checkbox + text) when enabled.\r\n   */\r\n  label?: IStyle;\r\n\r\n  /**\r\n   * Style for the label when reversed\r\n   */\r\n  labelReversed?: IStyle;\r\n\r\n  /**\r\n   * Style override for the label part when disabled.\r\n   */\r\n  labelDisabled?: IStyle;\r\n\r\n  /**\r\n   * Style for checkbox in its default unchecked/enabled state.\r\n   */\r\n  checkbox?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkbox when enabled/unchecked/hovered.\r\n   */\r\n  checkboxHovered?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkbox when enabled/unchecked/focused.\r\n   */\r\n  checkboxFocused?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkbox when enabled/checked.\r\n   */\r\n  checkboxChecked?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkbox when enabled/checked/hovered.\r\n   */\r\n  checkboxCheckedHovered?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkbox when enabled/checked/focused.\r\n   */\r\n  checkboxCheckedFocused?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkbox when disabled/unchecked.\r\n   */\r\n  checkboxDisabled?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkbox when disabled/checked.\r\n   */\r\n  checkboxCheckedDisabled?: IStyle;\r\n\r\n  /**\r\n   * Style for the checkmark in the default enabled/unchecked state.\r\n   */\r\n  checkmark?: IStyle;\r\n\r\n  /**\r\n   * Style override for the checkmark when enabled/checked.\r\n   */\r\n  checkmarkChecked?: IStyle;\r\n\r\n  /**\r\n   * Style override for checkmark when disabled/unchecked.\r\n   */\r\n  checkmarkDisabled?: IStyle;\r\n\r\n  /**\r\n * Style override for checkmark when disabled/checked.\r\n */\r\n  checkmarkCheckedDisabled?: IStyle;\r\n\r\n  /**\r\n   * Style for text appearing with the checkbox in its default enabled state.\r\n   */\r\n  text?: IStyle;\r\n\r\n  /**\r\n   * Style override for text appearing with the checkbox when enabled/hovered.\r\n   */\r\n  textHovered?: IStyle;\r\n\r\n  /**\r\n   * Style override for text appearing with the checkbox when enabled/focused.\r\n   */\r\n  textFocused?: IStyle;\r\n\r\n  /**\r\n   * Style override for text appearing with the checkbox when disabled.\r\n   */\r\n  textDisabled?: IStyle;\r\n}\r\n"]}