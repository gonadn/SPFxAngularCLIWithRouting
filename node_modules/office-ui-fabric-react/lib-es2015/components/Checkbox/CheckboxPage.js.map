{"version":3,"file":"CheckboxPage.js","sourceRoot":"../src/","sources":["components/Checkbox/CheckboxPage.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,WAAW,EAEX,aAAa,EACb,kBAAkB,EACnB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,oBAAoB,EAAE,MAAM,mCAAmC,CAAC;AACzE,OAAO,EAAE,8BAA8B,EAAE,MAAM,4CAA4C,CAAC;AAC5F,OAAO,EAAE,eAAe,EAAE,MAAM,4CAA4C,CAAC;AAC7E,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,IAAM,wBAAwB,GAAG,OAAO,CAAC,gGAAgG,CAAW,CAAC;AACrJ,IAAM,kCAAkC,GAAG,OAAO,CAAC,yGAAyG,CAAW,CAAC;AAExK;IAAkC,wCAA6C;IAA/E;;IAiFA,CAAC;IAhFQ,6BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,aAAa,IACZ,KAAK,EAAG,UAAU,EAClB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV;gBACE,oBAAC,WAAW,IACV,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAG,wBAAwB;oBAE/B,oBAAC,oBAAoB,OAAG,CACZ;gBAEd,oBAAC,WAAW,IACV,KAAK,EAAC,yBAAyB,EAC/B,IAAI,EAAG,kCAAkC;oBAEzC,oBAAC,8BAA8B,OAAG,CACtB,CACV,EAER,gBAAgB,EACd,oBAAC,kBAAkB,IACjB,OAAO,EAAG;oBACR,OAAO,CAAS,8EAA8E,CAAC;iBAChG,GACD,EAEJ,QAAQ,EACN;gBACE,sSAEI;gBAEJ,qPAEI;gBAEJ,uKAEI;gBAEJ,oYAEI;gBAEJ,uLAEI,CACA,EAER,aAAa,EACX,gCAAO,EAET,GAAG,EACD;gBACE;oBACE,iIAAuG,CACpG,CACD,EAER,KAAK,EACH;gBACE;oBACE,0GAAgF;oBAChF,gJAAiH;oBACjH,8HAAoG,CACjG,CACD,EAER,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAC5C,eAAe,EACb,oBAAC,eAAe,uBACV,cAAc,EAClB,GAEJ,CACH,CAAC;IACJ,CAAC;IACH,mBAAC;AAAD,CAAC,AAjFD,CAAkC,KAAK,CAAC,SAAS,GAiFhD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  ComponentPage,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { CheckboxBasicExample } from './examples/Checkbox.Basic.Example';\r\nimport { CheckboxImplementationExamples } from './examples/Checkbox.ImplementationExamples';\r\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\r\nimport { CheckboxStatus } from './Checkbox.checklist';\r\n\r\nconst CheckboxBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Checkbox/examples/Checkbox.Basic.Example.tsx') as string;\r\nconst CheckboxImplementationExamplesCode = require('!raw-loader!office-ui-fabric-react/src/components/Checkbox/examples/Checkbox.ImplementationExamples.tsx') as string;\r\n\r\nexport class CheckboxPage extends React.Component<IComponentDemoPageProps, any> {\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title={ 'Checkbox' }\r\n        componentName='CheckboxExample'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard\r\n              title='Default Checkbox'\r\n              code={ CheckboxBasicExampleCode }\r\n            >\r\n              <CheckboxBasicExample />\r\n            </ExampleCard>\r\n\r\n            <ExampleCard\r\n              title='Implementation Examples'\r\n              code={ CheckboxImplementationExamplesCode }\r\n            >\r\n              <CheckboxImplementationExamples />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/Checkbox/Checkbox.Props.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              A Checkbox is a UI element that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap. It can also be used to indicate a subordinate setting or preference when paired with another control.\r\n            </p>\r\n\r\n            <p>\r\n              A Checkbox is used to select or deselect action items. It can be used for a single item or for a list of multiple items that a user can choose from. The control has two selection states: unselected and selected.\r\n            </p>\r\n\r\n            <p>\r\n              Use a single Checkbox for a subordinate setting, such as with a \"Remember me?\" login scenario or with a terms of service agreement.\r\n            </p>\r\n\r\n            <p>\r\n              For a binary choice, the main difference between a Checkbox and a toggle switch is that the Checkbox is for status and the toggle switch is for action. You can delay committing a Checkbox interaction (as part of a form submit, for example), while you should immediately commit a toggle switch interaction. Also, only Checkboxes allow for multi-selection.\r\n            </p>\r\n\r\n            <p>\r\n              Use multiple Checkboxes for multi-select scenarios in which a user chooses one or more items from a group of choices that are not mutually exclusive.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div />\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Allow users to choose any combination of options when several Checkboxes are grouped together.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't use a Checkbox as an on/off control. Instead use a toggle switch.</li>\r\n              <li>Donâ€™t use a Checkbox when the user can choose only one option from the group, use radio buttons instead.</li>\r\n              <li>Don't put two groups of Checkboxes next to each other. Separate the two groups with labels.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }\r\n        componentStatus={\r\n          <ComponentStatus\r\n            {...CheckboxStatus}\r\n          />\r\n        }\r\n      />\r\n    );\r\n  }\r\n}"]}