{"version":3,"file":"Suggestions.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/Suggestions.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  autobind,\r\n  KeyCodes\r\n} from '../../../Utilities';\r\nimport { CommandButton, IconButton, IButton } from '../../../Button';\r\nimport { Spinner } from '../../../Spinner';\r\nimport { ISuggestionItemProps, ISuggestionsProps } from './Suggestions.Props';\r\nimport * as stylesImport from './Suggestions.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport class SuggestionsItem<T> extends BaseComponent<ISuggestionItemProps<T>, {}> {\r\n  public render() {\r\n    let {\r\n      suggestionModel,\r\n      RenderSuggestion,\r\n      onClick,\r\n      className,\r\n      onRemoveItem\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        className={ css(\r\n          'ms-Suggestions-item',\r\n          styles.suggestionsItem,\r\n          {\r\n            ['is-suggested ' + styles.suggestionsItemIsSuggested]: suggestionModel.selected\r\n          },\r\n          className\r\n        ) }\r\n      >\r\n        <CommandButton\r\n          onClick={ onClick }\r\n          className={ css('ms-Suggestions-itemButton', styles.itemButton) }\r\n        >\r\n          { RenderSuggestion(suggestionModel.item, this.props) }\r\n        </CommandButton>\r\n        { this.props.showRemoveButton ? (\r\n          <IconButton\r\n            iconProps={ { iconName: 'Cancel', style: { fontSize: '12px' } } }\r\n            title='Remove'\r\n            ariaLabel='Remove'\r\n            onClick={ onRemoveItem }\r\n            className={ css('ms-Suggestions-closeButton', styles.closeButton) }\r\n          />) : (null)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class Suggestions<T> extends BaseComponent<ISuggestionsProps<T>, {}> {\r\n\r\n  protected _searchForMoreButton: IButton;\r\n  protected _selectedElement: HTMLDivElement;\r\n  private SuggestionsItemOfProperType = SuggestionsItem as new (props: ISuggestionItemProps<T>) => SuggestionsItem<T>;\r\n\r\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\r\n    super(suggestionsProps);\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    this.scrollSelected();\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      mostRecentlyUsedHeaderText,\r\n      searchForMoreText,\r\n      className,\r\n      moreSuggestionsAvailable,\r\n      noResultsFoundText,\r\n      suggestions,\r\n      isLoading,\r\n      isSearching,\r\n      loadingText,\r\n      onRenderNoResultFound,\r\n      searchingText,\r\n      isMostRecentlyUsedVisible,\r\n      resultsMaximumNumber,\r\n      resultsFooterFull,\r\n      resultsFooter,\r\n      suggestionsAvailableAlertText,\r\n      suggestionsHeaderText\r\n    } = this.props;\r\n\r\n    let noResults = () => {\r\n      return noResultsFoundText ?\r\n        (\r\n          <div role='alert' className={ css('ms-Suggestions-none', styles.suggestionsNone) }>\r\n            { noResultsFoundText }\r\n          </div>\r\n        ) : null;\r\n    };\r\n    // MostRecently Used text should supercede the header text if it's there and available.\r\n    let headerText: string | undefined = suggestionsHeaderText;\r\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\r\n      headerText = mostRecentlyUsedHeaderText;\r\n    }\r\n    let footerTitle = (suggestions.length >= (resultsMaximumNumber as number)) ? resultsFooterFull : resultsFooter;\r\n    return (\r\n      <div\r\n        className={ css(\r\n          'ms-Suggestions',\r\n          className ? className : '',\r\n          styles.root) }\r\n      >\r\n        { headerText ?\r\n          (<div className={ css('ms-Suggestions-title', styles.suggestionsTitle) }>\r\n            { headerText }\r\n          </div>) : (null) }\r\n        { isLoading && (\r\n          <Spinner\r\n            className={ css('ms-Suggestions-spinner', styles.suggestionsSpinner) }\r\n            label={ loadingText }\r\n          />) }\r\n        { (!suggestions || !suggestions.length) && !isLoading ?\r\n          (onRenderNoResultFound ? onRenderNoResultFound(undefined, noResults) : noResults()) :\r\n          this._renderSuggestions()\r\n        }\r\n        { searchForMoreText && moreSuggestionsAvailable && (\r\n          <CommandButton\r\n            componentRef={ this._resolveRef('_searchForMoreButton') }\r\n            className={ css('ms-SearchMore-button', styles.searchMoreButton) }\r\n            iconProps={ { iconName: 'Search' } }\r\n            onClick={ this._getMoreResults }\r\n            onKeyDown={ this._onKeyDown }\r\n          >\r\n            { searchForMoreText }\r\n          </CommandButton>\r\n        ) }\r\n        { isSearching ?\r\n          (<Spinner\r\n            className={ css('ms-Suggestions-spinner', styles.suggestionsSpinner) }\r\n            label={ searchingText }\r\n          />) : (null)\r\n        }\r\n        {\r\n          !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ?\r\n            (<div className={ css('ms-Suggestions-title', styles.suggestionsTitle) }>\r\n              { footerTitle && footerTitle(this.props) }\r\n            </div>) : (null)\r\n        }\r\n        { (!isLoading && !isSearching && suggestions && suggestions.length > 0 && suggestionsAvailableAlertText) ?\r\n          (<span\r\n            role='alert'\r\n            className={ css('ms-Suggestions-suggestionsAvailable', styles.suggestionsAvailable) }\r\n          >\r\n            { suggestionsAvailableAlertText }\r\n          </span>) : (null)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focusSearchForMoreButton() {\r\n    if (this._searchForMoreButton) {\r\n      this._searchForMoreButton.focus();\r\n    }\r\n  }\r\n\r\n  // TODO get the element to scroll into view properly regardless of direction.\r\n  public scrollSelected() {\r\n    if (this._selectedElement) {\r\n      this._selectedElement.scrollIntoView(false);\r\n    }\r\n  }\r\n\r\n  private _renderSuggestions(): JSX.Element {\r\n    let {\r\n      suggestions,\r\n      onRenderSuggestion,\r\n      suggestionsItemClassName,\r\n      resultsMaximumNumber,\r\n      showRemoveButtons,\r\n      suggestionsContainerAriaLabel } = this.props;\r\n    let TypedSuggestionsItem = this.SuggestionsItemOfProperType;\r\n\r\n    if (resultsMaximumNumber) {\r\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className={ css('ms-Suggestions-container', styles.suggestionsContainer) }\r\n        id='suggestion-list'\r\n        role='list'\r\n        aria-label={ suggestionsContainerAriaLabel }\r\n      >\r\n        { suggestions.map((suggestion, index) =>\r\n          <div\r\n            ref={ this._resolveRef(suggestion.selected ? '_selectedElement' : '') }\r\n            // tslint:disable-next-line:no-string-literal\r\n            key={ (suggestion.item as any)['key'] ? (suggestion.item as any)['key'] : index }\r\n            id={ 'sug-' + index }\r\n            role='listitem'\r\n            aria-label={ suggestion.ariaLabel }\r\n          >\r\n            <TypedSuggestionsItem\r\n              id={ 'sug-item' + index }\r\n              suggestionModel={ suggestion }\r\n              RenderSuggestion={ onRenderSuggestion as any }\r\n              onClick={ this._onClickTypedSuggestionsItem(suggestion.item, index) }\r\n              className={ suggestionsItemClassName }\r\n              showRemoveButton={ showRemoveButtons }\r\n              onRemoveItem={ this._onRemoveTypedSuggestionsItem(suggestion.item, index) }\r\n            />\r\n          </div>) }\r\n      </div>);\r\n  }\r\n\r\n  @autobind\r\n  private _getMoreResults() {\r\n    if (this.props.onGetMoreResults) {\r\n      this.props.onGetMoreResults();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClickTypedSuggestionsItem(item: T, index: number): (ev: React.MouseEvent<HTMLElement>) => void {\r\n    return (ev: React.MouseEvent<HTMLElement>): void => {\r\n      this.props.onSuggestionClick(ev, item, index);\r\n    };\r\n  }\r\n\r\n  @autobind\r\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLButtonElement>) {\r\n    if ((ev.keyCode === KeyCodes.up || ev.keyCode === KeyCodes.down) && typeof this.props.refocusSuggestions === 'function') {\r\n      this.props.refocusSuggestions(ev.keyCode);\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onRemoveTypedSuggestionsItem(item: T, index: number): (ev: React.MouseEvent<HTMLElement>) => void {\r\n    return (ev: React.MouseEvent<HTMLElement>): void => {\r\n      let onSuggestionRemove = this.props.onSuggestionRemove!;\r\n      onSuggestionRemove(ev, item, index);\r\n      ev.stopPropagation();\r\n    };\r\n  }\r\n}"]}