{"version":3,"file":"BaseAutoFill.Props.js","sourceRoot":"../src/","sources":["components/pickers/AutoFill/BaseAutoFill.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { BaseAutoFill } from './BaseAutoFill';\r\nimport { KeyCodes } from '../../../Utilities';\r\nexport interface IBaseAutoFill {\r\n\r\n  /**\r\n   * The current index of the cursor in the input area. Returns -1 if the input element\r\n   * is not ready.\r\n   */\r\n  cursorLocation: number;\r\n  /**\r\n   * A boolean for whether or not there is a value selected in the input area.\r\n   */\r\n  isValueSelected: boolean;\r\n  /**\r\n   * The current text value that the user has entered.\r\n   */\r\n  value: string;\r\n  /**\r\n   * The current index of where the selection starts. Returns -1 if the input element\r\n   * is not ready.\r\n   */\r\n  selectionStart: number;\r\n  /**\r\n   * the current index of where the selection ends. Returns -1 if the input element\r\n   * is not ready.\r\n   */\r\n  selectionEnd: number;\r\n  /**\r\n   * The current input element.\r\n   */\r\n  inputElement: HTMLInputElement;\r\n  /**\r\n   * Focus the input element.\r\n   */\r\n  focus(): void;\r\n  /**\r\n   * Clear all text in the input. Sets value to '';\r\n   */\r\n  clear(): void;\r\n}\r\n\r\nexport interface IBaseAutoFillProps extends\r\n  React.InputHTMLAttributes<HTMLInputElement | BaseAutoFill> {\r\n  /**\r\n   * Gets the compoonent ref.\r\n   */\r\n  componentRef?: (componentRef?: IBaseAutoFill) => void;\r\n\r\n  /**\r\n   * The suggested autofill value that will display.\r\n   */\r\n  suggestedDisplayValue?: string;\r\n\r\n  /**\r\n   * A callback for when the current input value changes.\r\n   */\r\n  onInputValueChange?: (newValue?: string) => void;\r\n\r\n  /**\r\n   * When the user uses left arrow, right arrow, clicks, or deletes text autofill is disabled\r\n   * Since the user has taken control. It is automatically reenabled when the user enters text and the\r\n   * cursor is at the end of the text in the input box. This specifies other key presses that will reenabled\r\n   * autofill.\r\n   * @default [KeyCodes.down, KeyCodes.up]\r\n   */\r\n  enableAutoFillOnKeyPress?: KeyCodes[];\r\n\r\n  /**\r\n   * the default value to be visible\r\n   */\r\n  defaultVisibleValue?: string;\r\n\r\n  /**\r\n   * Handler for checking and updating the value if needed\r\n   *  in componentWillReceiveProps\r\n   *\r\n   * @param {IBaseAutoFillProps} defaultVisibleValue - the defaultVisibleValue that got passed\r\n   *  in to the auto fill's componentWillReceiveProps\r\n   * @returns {string} - the updated value to set, if needed\r\n   */\r\n  updateValueInWillReceiveProps?: () => string | null;\r\n\r\n  /**\r\n   * Handler for checking if the full value of the input should\r\n   * be seleced in componentDidUpdate\r\n   *\r\n   * @returns {boolean} - should the full value of the input be selected?\r\n   */\r\n  shouldSelectFullInputValueInComponentDidUpdate?: () => boolean;\r\n\r\n  /**\r\n   * A callback used to modify the input string.\r\n   */\r\n  onInputChange?: (value: string) => string;\r\n}"]}