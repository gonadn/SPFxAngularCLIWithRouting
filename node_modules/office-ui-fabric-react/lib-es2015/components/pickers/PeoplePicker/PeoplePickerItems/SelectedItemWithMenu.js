import * as tslib_1 from "tslib";
/* tslint:disable */
import * as React from 'react';
/* tslint:enable */
import { BaseComponent, autobind, css } from '../../../../Utilities';
import { Persona, PersonaPresence } from '../../../../Persona';
import { ContextualMenu } from '../../../../ContextualMenu';
import { IconButton } from '../../../../Button';
import { FocusZone } from '../../../../FocusZone';
import * as stylesImport from './PickerItemsDefault.scss';
var styles = stylesImport;
var SelectedItemWithMenu = /** @class */ (function (_super) {
    tslib_1.__extends(SelectedItemWithMenu, _super);
    function SelectedItemWithMenu(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { contextualMenuVisible: false };
        return _this;
    }
    SelectedItemWithMenu.prototype.render = function () {
        var _a = this.props, item = _a.item, onRemoveItem = _a.onRemoveItem, removeButtonAriaLabel = _a.removeButtonAriaLabel;
        return (React.createElement("div", { "data-is-focusable": true, className: css('ms-PickerItem-container', styles.itemContainer) },
            React.createElement(FocusZone, { className: css('ms-PickerPersona-container', styles.personaContainer) },
                React.createElement("div", { className: css('ms-PickerItem-content', styles.itemContent) },
                    React.createElement(Persona, tslib_1.__assign({}, item, { presence: item.presence !== undefined ? item.presence : PersonaPresence.none }))),
                React.createElement("div", { ref: 'ellipsisRef', className: css('ms-PickerItem-content', styles.itemContent) },
                    React.createElement(IconButton, { iconProps: { iconName: 'More' }, onClick: this._onContextualMenu })),
                React.createElement("div", { className: css('ms-PickerItem-content', styles.itemContent) },
                    React.createElement(IconButton, { iconProps: { iconName: 'Cancel' }, onClick: onRemoveItem, ariaLabel: removeButtonAriaLabel })),
                this.state.contextualMenuVisible ? (React.createElement(ContextualMenu, { items: item.menuItems, shouldFocusOnMount: true, target: this.refs.ellipsisRef, onDismiss: this._onCloseContextualMenu, directionalHint: 7 /* bottomAutoEdge */ }))
                    : null)));
    };
    SelectedItemWithMenu.prototype._onContextualMenu = function (ev) {
        this.setState({ contextualMenuVisible: true });
    };
    SelectedItemWithMenu.prototype._onCloseContextualMenu = function (ev) {
        this.setState({ contextualMenuVisible: false });
    };
    tslib_1.__decorate([
        autobind
    ], SelectedItemWithMenu.prototype, "_onContextualMenu", null);
    tslib_1.__decorate([
        autobind
    ], SelectedItemWithMenu.prototype, "_onCloseContextualMenu", null);
    return SelectedItemWithMenu;
}(BaseComponent));
export { SelectedItemWithMenu };
//# sourceMappingURL=SelectedItemWithMenu.js.map