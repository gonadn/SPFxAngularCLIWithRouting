{"version":3,"file":"Calendar.Inline.Example.js","sourceRoot":"../src/","sources":["components/Calendar/examples/Calendar.Inline.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { addDays, getDateRangeArray } from 'office-ui-fabric-react/lib/utilities/dateMath/DateMath';\r\nimport {\r\n  Calendar,\r\n  DayOfWeek\r\n} from 'office-ui-fabric-react/lib/Calendar';\r\nimport { DateRangeType } from 'office-ui-fabric-react/lib/Calendar';\r\n\r\nconst DayPickerStrings = {\r\n  months: [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n  ],\r\n\r\n  shortMonths: [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec'\r\n  ],\r\n\r\n  days: [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday'\r\n  ],\r\n\r\n  shortDays: [\r\n    'S',\r\n    'M',\r\n    'T',\r\n    'W',\r\n    'T',\r\n    'F',\r\n    'S'\r\n  ],\r\n\r\n  goToToday: 'Go to today'\r\n};\r\n\r\nexport interface ICalendarInlineExampleState {\r\n  selectedDate: Date | null;\r\n  selectedDateRange: Date[] | null;\r\n}\r\n\r\nexport interface ICalendarInlineExampleProps {\r\n  isMonthPickerVisible?: boolean;\r\n  dateRangeType: DateRangeType;\r\n  autoNavigateOnSelection: boolean;\r\n  showGoToToday: boolean;\r\n  showNavigateButtons?: boolean;\r\n  highlightCurrentMonth?: boolean;\r\n  isDayPickerVisible?: boolean;\r\n  showMonthPickerAsOverlay?: boolean;\r\n  showWeekNumbers?: boolean;\r\n  minDate?: Date;\r\n  maxDate?: Date;\r\n}\r\n\r\nexport class CalendarInlineExample extends React.Component<ICalendarInlineExampleProps, ICalendarInlineExampleState> {\r\n  public constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      selectedDate: null,\r\n      selectedDateRange: null\r\n    };\r\n\r\n    this._onDismiss = this._onDismiss.bind(this);\r\n    this._onSelectDate = this._onSelectDate.bind(this);\r\n    this._goNext = this._goNext.bind(this);\r\n    this._goPrevious = this._goPrevious.bind(this);\r\n  }\r\n\r\n  public render() {\r\n    let divStyle: React.CSSProperties = {\r\n      height: '340px'\r\n    };\r\n\r\n    let buttonStyle: React.CSSProperties = {\r\n      margin: '17px 10px 0 0'\r\n    };\r\n\r\n    let dateRangeString: string | null = null;\r\n    if (this.state.selectedDateRange) {\r\n      let rangeStart = this.state.selectedDateRange[0];\r\n      let rangeEnd = this.state.selectedDateRange[this.state.selectedDateRange.length - 1];\r\n      dateRangeString = rangeStart.toLocaleDateString() + '-' + rangeEnd.toLocaleDateString();\r\n    }\r\n\r\n    return (\r\n      <div style={ divStyle }>\r\n        { <div>\r\n          Selected date(s): <span>{ !this.state.selectedDate ? 'Not set' : this.state.selectedDate.toLocaleString() }</span>\r\n        </div> }\r\n        <div>\r\n          Selected dates:\r\n          <span> { !dateRangeString ? 'Not set' : dateRangeString }</span>\r\n        </div>\r\n        { (this.props.minDate || this.props.maxDate) &&\r\n          <div>\r\n            Date boundary:\r\n            <span> { this.props.minDate ? this.props.minDate.toLocaleDateString() : 'Not set' }-{ this.props.maxDate ? this.props.maxDate.toLocaleDateString() : 'Not set' }</span>\r\n          </div>\r\n        }\r\n        <Calendar\r\n          onSelectDate={ this._onSelectDate }\r\n          onDismiss={ this._onDismiss }\r\n          isMonthPickerVisible={ this.props.isMonthPickerVisible }\r\n          dateRangeType={ this.props.dateRangeType }\r\n          autoNavigateOnSelection={ this.props.autoNavigateOnSelection }\r\n          showGoToToday={ this.props.showGoToToday }\r\n          value={ this.state.selectedDate! }\r\n          firstDayOfWeek={ DayOfWeek.Sunday }\r\n          strings={ DayPickerStrings }\r\n          highlightCurrentMonth={ this.props.highlightCurrentMonth }\r\n          isDayPickerVisible={ this.props.isDayPickerVisible }\r\n          showMonthPickerAsOverlay={ this.props.showMonthPickerAsOverlay }\r\n          showWeekNumbers={ this.props.showWeekNumbers }\r\n          minDate={ this.props.minDate }\r\n          maxDate={ this.props.maxDate }\r\n        />\r\n        { this.props.showNavigateButtons &&\r\n          <div>\r\n            <DefaultButton style={ buttonStyle } onClick={ this._goPrevious } text='Previous' />\r\n            <DefaultButton style={ buttonStyle } onClick={ this._goNext } text='Next' />\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onDismiss() {\r\n    this.setState((prevState: ICalendarInlineExampleState) => {\r\n      return prevState;\r\n    });\r\n  }\r\n\r\n  private _goPrevious() {\r\n    this.setState((prevState: ICalendarInlineExampleState) => {\r\n      let selectedDate = prevState.selectedDate || new Date();\r\n      let dateRangeArray = getDateRangeArray(selectedDate, this.props.dateRangeType, DayOfWeek.Sunday);\r\n\r\n      let subtractFrom = dateRangeArray[0];\r\n      let daysToSubtract = dateRangeArray.length;\r\n\r\n      if (this.props.dateRangeType === DateRangeType.Month) {\r\n        subtractFrom = new Date(subtractFrom.getFullYear(), subtractFrom.getMonth(), 1);\r\n        daysToSubtract = 1;\r\n      }\r\n\r\n      let newSelectedDate = addDays(subtractFrom, -daysToSubtract);\r\n      return prevState.selectedDate = newSelectedDate;\r\n    });\r\n  }\r\n\r\n  private _goNext() {\r\n    this.setState((prevState: ICalendarInlineExampleState) => {\r\n      let selectedDate = prevState.selectedDate || new Date();\r\n      let dateRangeArray = getDateRangeArray(selectedDate, this.props.dateRangeType, DayOfWeek.Sunday);\r\n      let newSelectedDate = addDays(dateRangeArray.pop()!, 1);\r\n      return prevState.selectedDate = newSelectedDate;\r\n    });\r\n  }\r\n\r\n  private _onSelectDate(date: Date, dateRangeArray: Date[]) {\r\n    this.setState((prevState: ICalendarInlineExampleState) => {\r\n      prevState.selectedDate = date;\r\n      prevState.selectedDateRange = dateRangeArray;\r\n      return prevState;\r\n    });\r\n  }\r\n}\r\n"]}