{"version":3,"file":"TextFieldPage.js","sourceRoot":"../src/","sources":["components/TextField/TextFieldPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  ComponentPage,\r\n  IComponentDemoPageProps,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { TextFieldAddonExample } from './examples/TextField.Addon.Example';\r\nimport { TextFieldBasicExample } from './examples/TextField.Basic.Example';\r\nimport { TextFieldCustomRenderExample } from './examples/TextField.CustomRender.Example';\r\nimport { TextFieldPlaceholderExample } from './examples/TextField.Placeholder.Example';\r\nimport { TextFieldMultilineExample } from './examples/TextField.Multiline.Example';\r\nimport { TextFieldUnderlinedExample } from './examples/TextField.Underlined.Example';\r\nimport { TextFieldBorderlessExample } from './examples/TextField.Borderless.Example';\r\nimport { TextFieldErrorMessageExample } from './examples/TextField.ErrorMessage.Example';\r\nimport { TextFieldIconExample } from './examples/TextField.Icon.Example';\r\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\r\nimport { TextFieldStatus } from './TextField.checklist';\r\n\r\nconst TextFieldAddonExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Addon.Example.tsx') as string;\r\nconst TextFieldBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Basic.Example.tsx') as string;\r\nconst TextFieldCustomRenderExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.CustomRender.Example.tsx') as string;\r\nconst TextFieldPlaceholderExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Placeholder.Example.tsx') as string;\r\nconst TextFieldMultilineExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Multiline.Example.tsx') as string;\r\nconst TextFieldUnderlinedExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Underlined.Example.tsx') as string;\r\nconst TextFieldBorderlessExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Borderless.Example.tsx') as string;\r\nconst TextFieldErrorMessageExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.ErrorMessage.Example.tsx') as string;\r\nconst TextFieldIconExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Icon.Example.tsx') as string;\r\n\r\nexport class TextFieldPage extends React.Component<IComponentDemoPageProps, {}> {\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='TextField'\r\n        componentName='TextFieldExample'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard\r\n              title='Default TextField with Label'\r\n              code={ TextFieldBasicExampleCode }\r\n            >\r\n              <TextFieldBasicExample />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='TextField with Placeholder'\r\n              code={ TextFieldPlaceholderExampleCode }\r\n            >\r\n              <TextFieldPlaceholderExample />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Multiline TextField'\r\n              code={ TextFieldMultilineExampleCode }\r\n            >\r\n              <TextFieldMultilineExample />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Underlined TextField'\r\n              code={ TextFieldUnderlinedExampleCode }\r\n            >\r\n              <TextFieldUnderlinedExample />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Borderless TextField'\r\n              code={ TextFieldBorderlessExampleCode }\r\n            >\r\n              <TextFieldBorderlessExample />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        implementationExampleCards={\r\n          <div>\r\n            <ExampleCard\r\n              title='Textfield with an addon'\r\n              code={ TextFieldAddonExampleCode }\r\n            >\r\n              <TextFieldAddonExample />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='TextField with an icon'\r\n              code={ TextFieldIconExampleCode }\r\n            >\r\n              <TextFieldIconExample />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='TextField with custom Label'\r\n              code={ TextFieldCustomRenderExampleCode }\r\n            >\r\n              <TextFieldCustomRenderExample />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='TextField error message variations'\r\n              code={ TextFieldErrorMessageExampleCode }\r\n            >\r\n              <TextFieldErrorMessageExample />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/TextField/TextField.Props.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              The TextField component enables a user to type text into an app. It's typically used to capture a single line of text, but can be configured to capture multiple lines of text. The text displays on the screen in a simple, uniform format.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div />\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Use the TextField to accept data input on a form or page.</li>\r\n              <li>Label the TextField with a helpful name. </li>\r\n              <li>Provide concise helper text that specifies what content is expected to be entered.</li>\r\n              <li>Provide all appropriate states for the control (static, hover, focus, engaged, unavailable, error).</li>\r\n              <li>When part of a form, provide clear designations for which fields are required vs. optional.</li>\r\n              <li>Provide all appropriate methods for submitting provided data (onEnter or a dedicated ‘Submit’ button).</li>\r\n              <li>Provide all appropriate methods of clearing provided data (‘X’ or something similar).</li>\r\n              <li>Allow for selection, copy and paste of field data.</li>\r\n              <li>Whenever possible, format TextField relative to the expected entry (4-digit PIN, 10-digit phone number (3 separate fields), etc).</li>\r\n              <li>When long entries are expected, provide a mechanism for overflow or expansion of the control itself.</li>\r\n              <li>Ensure that the TextField is functional through use of mouse/keyboard or touch when available.</li>\r\n              <li>Ensure that the TextField is accessible through screen reader and/or other accessibility tools.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don’t use a TextField to render basic copy as part of a body element of a page.</li>\r\n              <li>Don’t provide an unlabeled TextField and expect that users will know what to do with it.</li>\r\n              <li>Don’t place a TextField inline with body copy.  </li>\r\n              <li>Don’t be overly verbose with helper text.</li>\r\n              <li>Don’t occlude the entry or allow entry when the active content is not visible.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }\r\n        componentStatus={\r\n          <ComponentStatus\r\n            {...TextFieldStatus}\r\n          />\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n"]}