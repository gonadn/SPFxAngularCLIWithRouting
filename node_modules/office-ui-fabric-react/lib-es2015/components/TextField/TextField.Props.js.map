{"version":3,"file":"TextField.Props.js","sourceRoot":"../src/","sources":["components/TextField/TextField.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IRenderFunction } from '../../Utilities';\r\nimport { IIconProps } from '../../Icon';\r\n\r\nexport interface ITextField {\r\n  /** Gets the current value of the input. */\r\n  value: string | undefined;\r\n\r\n  /** Sets focus to the input. */\r\n  focus: () => void;\r\n\r\n  /** Select the value of the text field. */\r\n  select: () => void;\r\n\r\n  /** Sets the selection start of the text field to a specified value. */\r\n  setSelectionStart: (value: number) => void;\r\n\r\n  /** Sets the selection end of the text field to a specified value. */\r\n  setSelectionEnd: (value: number) => void;\r\n\r\n  /**\r\n   * Sets the start and end positions of a selection in a text field.\r\n   * @param start Index of the start of the selection.\r\n   * @param end Index of the end of the selection.\r\n   */\r\n  setSelectionRange: (start: number, end: number) => void;\r\n\r\n  /** Gets the selection start of the text field. Returns -1 if there is no selection. */\r\n  selectionStart: number;\r\n\r\n  /** Gets the selection end of the text field. Returns -1 if there is no selection. */\r\n  selectionEnd: number;\r\n}\r\n\r\n/**\r\n * TextField component props.\r\n */\r\nexport interface ITextFieldProps extends React.AllHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\r\n  /**\r\n   * Optional callback to access the ITextField interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: ITextField) => void;\r\n\r\n  /**\r\n   * Whether or not the textfield is a multiline textfield.\r\n   * @default false\r\n   */\r\n  multiline?: boolean;\r\n\r\n  /**\r\n   * Whether or not the multiline textfield is resizable.\r\n   * @default true\r\n   */\r\n  resizable?: boolean;\r\n\r\n  /**\r\n   * Whether or not to auto adjust textField height. Applies only to multiline textfield.\r\n   * @default false\r\n   */\r\n  autoAdjustHeight?: boolean;\r\n\r\n  /**\r\n   * Whether or not the textfield is underlined.\r\n   * @default false\r\n   */\r\n  underlined?: boolean;\r\n\r\n  /**\r\n   * Whether or not the textfield is borderless.\r\n   * @default false\r\n   */\r\n  borderless?: boolean;\r\n\r\n  /**\r\n   * Label for the textfield.\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Optional custom renderer for the label\r\n   */\r\n  onRenderLabel?: IRenderFunction<ITextFieldProps>;\r\n\r\n  /**\r\n   * The textfield input description\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n  * String for addon.\r\n  */\r\n  addonString?: string;\r\n\r\n  /**\r\n  * Custom render function for addon\r\n  */\r\n  onRenderAddon?: IRenderFunction<ITextFieldProps>;\r\n\r\n  /**\r\n   * Optional icon props for an icon.\r\n   */\r\n  iconProps?: IIconProps;\r\n\r\n  /**\r\n   * Default value of the textfield, if any. Only provide this if the textfield is an uncontrolled component;\r\n   * otherwise, use the \"value\" property.\r\n   */\r\n  defaultValue?: string;\r\n\r\n  /**\r\n   * Current value of the textfield. Only provide this if the textfield is a controlled component where you\r\n   * are maintaining its current state; otherwise, use the \"defaultValue\" property.\r\n   */\r\n  value?: string;\r\n\r\n  /**\r\n   * Disabled state of the textfield.\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * If set, this will display an error message for the text field.\r\n   */\r\n  errorMessage?: string;\r\n\r\n  /**\r\n   * Callback for the onChanged event.\r\n   */\r\n  onChanged?: (newValue: any) => void;\r\n\r\n  /**\r\n   * Callback for the onBeforeChange event.\r\n   */\r\n  onBeforeChange?: (newValue: any) => void;\r\n\r\n  /**\r\n   * Callback for the onNotifyValidationResult event.\r\n   */\r\n  onNotifyValidationResult?: (errorMessage: string, value: string | undefined) => void;\r\n\r\n  /**\r\n   * The method is used to get the validation error message and determine whether the input value is valid or not.\r\n   *\r\n   *   When it returns string:\r\n   *   - If valid, it returns empty string.\r\n   *   - If invalid, it returns the error message string and the text field will\r\n   *     show a red border and show an error message below the text field.\r\n   *\r\n   *   When it returns Promise<string>:\r\n   *   - The resolved value is display as error message.\r\n   *   - The rejected, the value is thrown away.\r\n   *\r\n   */\r\n  onGetErrorMessage?: (value: string) => string | PromiseLike<string> | undefined;\r\n\r\n  /**\r\n   * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\r\n   * @default 200\r\n   */\r\n  deferredValidationTime?: number;\r\n\r\n  /**\r\n   * Optional class name that is added to the container of the component.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Optional class name that is added specifically to the input/textarea element.\r\n   */\r\n  inputClassName?: string;\r\n\r\n  /**\r\n   * Aria Label for textfield, if any.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Run validation only on input focus\r\n   * @default false\r\n   */\r\n  validateOnFocusIn?: boolean;\r\n\r\n  /**\r\n   * Run validation only on input focus out\r\n   * @default false\r\n   */\r\n  validateOnFocusOut?: boolean;\r\n\r\n  /**\r\n   * Optional flag to disable onload validation\r\n   * @default true\r\n   */\r\n  validateOnLoad?: boolean;\r\n\r\n  /**\r\n   * @deprecated\r\n   * Deprecated; use iconProps instead.\r\n   */\r\n  iconClass?: string;\r\n\r\n  /**\r\n * Internal ID passed to render functions.\r\n */\r\n  componentId?: string;\r\n\r\n}\r\n"]}