{"version":3,"file":"DetailsRowCheck.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRowCheck.tsx"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,sCAAsC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AACpC,OAAO,KAAK,qBAAqB,MAAM,wBAAwB,CAAC;AAChE,OAAO,KAAK,iBAAiB,MAAM,qBAAqB,CAAC;AAEzD,wBAAwB;AACxB,IAAM,WAAW,GAAQ,iBAAiB,CAAC;AAe3C,MAAM,CAAC,IAAM,eAAe,GAAG,UAAC,KAA4B;IAExD,IAAA,oBAAiB,EAAjB,sCAAiB,EACjB,qBAAkB,EAAlB,uCAAkB,EAClB,sBAAmB,EAAnB,wCAAmB,EACnB,mBAAgB,EAAhB,qCAAgB,EAChB,mBAAgB,EAAhB,qCAAgB,EAChB,2BAAS,EACT,oHAAc,CACN;IAEV,IAAI,SAAS,GAAG,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,QAAQ,CAAC;IAEnD,MAAM,CAAC,CACL,gDACO,WAAW,IAChB,IAAI,EAAC,UAAU,EACf,SAAS,EACP,GAAG,CAAC,SAAS,EAAE,qBAAqB,EAAE,qBAAqB,CAAC,KAAK,EAAE,WAAW,CAAC,SAAS;YACtF,GAAC,qCAAmC,qBAAqB,CAAC,UAAY,IAAG,CAAC,KAAK,CAAC,SAAS;YACzF,GAAC,mCAAiC,qBAAqB,CAAC,QAAU,IAAG,KAAK,CAAC,QAAQ;gBACnF,kBAEW,SAAS,2BACA,IAAI,uBACV,iBAAiB;QAEnC,oBAAC,KAAK,IACJ,OAAO,EAAG,SAAS,GACnB,CACE,CACP,CAAC;;AACJ,CAAC,CAAC","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\nimport { css } from '../../Utilities';\r\nimport { Check } from '../../Check';\r\nimport * as DetailsRowCheckStyles from './DetailsRowCheck.scss';\r\nimport * as CheckStylesModule from '../Check/Check.scss';\r\n\r\n// tslint:disable:no-any\r\nconst CheckStyles: any = CheckStylesModule;\r\n// tslint:enable:no-any\r\n\r\nexport interface IDetailsRowCheckProps extends React.HTMLAttributes<HTMLElement> {\r\n  isHeader?: boolean;\r\n  selected?: boolean;\r\n  /**\r\n   * Deprecated at v.65.1 and will be removed by v 1.0. Use 'selected' instead.\r\n   * @deprecated\r\n   */\r\n  isSelected?: boolean;\r\n  anySelected?: boolean;\r\n  canSelect: boolean;\r\n}\r\n\r\nexport const DetailsRowCheck = (props: IDetailsRowCheckProps) => {\r\n  const {\r\n    canSelect = false,\r\n    isSelected = false,\r\n    anySelected = false,\r\n    selected = false,\r\n    isHeader = false,\r\n    className,\r\n    ...buttonProps\r\n  } = props;\r\n\r\n  let isPressed = props.isSelected || props.selected;\r\n\r\n  return (\r\n    <div\r\n      { ...buttonProps }\r\n      role='checkbox'\r\n      className={\r\n        css(className, 'ms-DetailsRow-check', DetailsRowCheckStyles.check, CheckStyles.checkHost, {\r\n          [`ms-DetailsRow-check--isDisabled ${DetailsRowCheckStyles.isDisabled}`]: !props.canSelect,\r\n          [`ms-DetailsRow-check--isHeader ${DetailsRowCheckStyles.isHeader}`]: props.isHeader\r\n        })\r\n      }\r\n      aria-checked={ isPressed }\r\n      data-selection-toggle={ true }\r\n      data-automationid='DetailsRowCheck'\r\n    >\r\n      <Check\r\n        checked={ isPressed }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]}