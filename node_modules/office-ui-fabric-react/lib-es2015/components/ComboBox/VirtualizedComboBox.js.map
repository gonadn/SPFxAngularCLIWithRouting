{"version":3,"file":"VirtualizedComboBox.js","sourceRoot":"../src/","sources":["components/ComboBox/VirtualizedComboBox.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAgB,MAAM,iBAAiB,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAGlC;IAAyC,+CAAiC;IAA1E;;IAsDA,CAAC;IAhDQ,yCAAW,GAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACtC,CAAC;IACH,CAAC;IAEM,mCAAK,GAAZ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEM,oCAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,QAAQ,uBACH,IAAI,CAAC,KAAK,IACd,YAAY,EAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAC5C,YAAY,EAAG,IAAI,CAAC,aAAa,EACjC,cAAc,EAAG,IAAI,CAAC,eAAe,IACrC,CACH,CAAC;IACJ,CAAC;IAGS,2CAAa,GAAvB,UAAwB,KAAqB;QAEzC,IAAA,iCAAY,CACJ;QAEV,0BAA0B;QAC1B,MAAM,CAAC,CACL,oBAAC,IAAI,IACH,YAAY,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EACxC,IAAI,EAAC,SAAS,EACd,KAAK,EAAG,KAAK,CAAC,OAAO,EACrB,YAAY,EAAG,YAAY,CAAC,CAAC,CAAC,UAAC,IAAuB,IAAK,OAAA,YAAY,CAAC,IAAI,CAAC,EAAlB,CAAkB,CAAC,CAAC,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,GAC1F,CACH,CAAC;IACJ,CAAC;IAGS,6CAAe,GAAzB,UAA0B,SAAiB;QACzC,sDAAsD;QACtD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IApBD;QADC,QAAQ;4DAeR;IAGD;QADC,QAAQ;8DAIR;IACH,0BAAC;CAAA,AAtDD,CAAyC,aAAa,GAsDrD;SAtDY,mBAAmB","sourcesContent":["import * as React from 'react';\r\nimport { autobind, BaseComponent, customizable } from '../../Utilities';\r\nimport { ComboBox } from './ComboBox';\r\nimport { IComboBoxProps, IComboBox } from './ComboBox.Props';\r\nimport { List } from '../../List';\r\nimport { SelectableOptionMenuItemType, ISelectableOption } from '../../utilities/selectableOption/SelectableOption.Props';\r\n\r\nexport class VirtualizedComboBox extends BaseComponent<IComboBoxProps, {}> implements IComboBox {\r\n  /** The combo box element */\r\n  private _comboBox: ComboBox;\r\n  /** The virtualized list element */\r\n  private _list: List;\r\n\r\n  public dismissMenu(): void {\r\n    if (this._comboBox) {\r\n      return this._comboBox.dismissMenu();\r\n    }\r\n  }\r\n\r\n  public focus() {\r\n    if (this._comboBox) {\r\n      this._comboBox.focus();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <ComboBox\r\n        {...this.props}\r\n        componentRef={ this._resolveRef('_comboBox') }\r\n        onRenderList={ this._onRenderList }\r\n        onScrollToItem={ this._onScrollToItem }\r\n      />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  protected _onRenderList(props: IComboBoxProps): JSX.Element {\r\n    const {\r\n      onRenderItem\r\n    } = props;\r\n\r\n    // Render virtualized list\r\n    return (\r\n      <List\r\n        componentRef={ this._resolveRef('_list') }\r\n        role='listbox'\r\n        items={ props.options }\r\n        onRenderCell={ onRenderItem ? (item: ISelectableOption) => onRenderItem(item) : () => null }\r\n      />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  protected _onScrollToItem(itemIndex: number): void {\r\n    // We are using the List component, call scrollToIndex\r\n    this._list.scrollToIndex(itemIndex);\r\n  }\r\n}"]}