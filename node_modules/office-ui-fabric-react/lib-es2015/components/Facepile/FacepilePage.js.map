{"version":3,"file":"FacepilePage.js","sourceRoot":"../src/","sources":["components/Facepile/FacepilePage.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,WAAW,EAEX,aAAa,EACb,kBAAkB,EACnB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAC7E,OAAO,EAAE,oBAAoB,EAAE,MAAM,mCAAmC,CAAC;AACzE,OAAO,EAAE,uBAAuB,EAAE,MAAM,sCAAsC,CAAC;AAC/E,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAC/C,OAAO,EAAE,eAAe,EAAE,MAAM,4CAA4C,CAAC;AAC7E,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,IAAM,0BAA0B,GAAG,OAAO,CAAC,kGAAkG,CAAW,CAAC;AACzJ,IAAM,wBAAwB,GAAG,OAAO,CAAC,gGAAgG,CAAW,CAAC;AACrJ,IAAM,2BAA2B,GAAG,OAAO,CAAC,mGAAmG,CAAW,CAAC;AAE3J;IAAkC,wCAA4C;IAA9E;;IA2FA,CAAC;IA1FQ,6BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,aAAa,IACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV;gBACE,oBAAC,WAAW,IAAC,KAAK,EAAC,wCAAwC,EAAC,IAAI,EAAG,wBAAwB;oBACzF,oBAAC,oBAAoB,OAAG,CACZ;gBACd,oBAAC,WAAW,IAAC,KAAK,EAAC,gCAAgC,EAAC,IAAI,EAAG,2BAA2B;oBACpF,oBAAC,uBAAuB,OAAG,CACf;gBACd,oBAAC,WAAW,IAAC,KAAK,EAAC,yCAAyC,EAAC,IAAI,EAAG,0BAA0B;oBAC5F,oBAAC,sBAAsB,OAAG,CACd,CACV,EAER,gBAAgB,EACd,oBAAC,kBAAkB,IACjB,OAAO,EAAG;oBACR,OAAO,CAAS,8EAA8E,CAAC;iBAChG,GACD,EAEJ,QAAQ,EACN;gBACE,wRAEI;gBAEJ,4BAAI,SAAS,EAAG,cAAc,CAAC,MAAM,oBAAqB;gBAC1D,oIAEI;gBAEJ,4BAAI,SAAS,EAAG,cAAc,CAAC,MAAM,kBAAmB;gBACxD,8RAEI;gBAEJ,4BAAI,SAAS,EAAG,cAAc,CAAC,MAAM,iBAAkB;gBACvD,wIAEI;gBAEJ,4BAAI,SAAS,EAAG,cAAc,CAAC,MAAM,mDAAoD;gBAEzF,6NAEI;gBAEJ,4BAAI,SAAS,EAAG,cAAc,CAAC,MAAM,eAAgB;gBAErD,oPAEI,CAEA,EAER,aAAa,EACX,gCAAO,EAET,GAAG,EACD;gBACE;oBACE,oJAA0H;oBAC1H,0FAAgE;oBAChE,qMAA2K,CACxK,CACD,EAER,KAAK,EACH;gBACE;oBACE,oEAA0C;oBAC1C,kJAAwH;oBACxH,8KAA+I,CAC5I,CACD,EAER,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAC5C,eAAe,EACb,oBAAC,eAAe,uBACV,cAAc,EAClB,GAEJ,CACH,CAAC;IACJ,CAAC;IACH,mBAAC;AAAD,CAAC,AA3FD,CAAkC,KAAK,CAAC,SAAS,GA2FhD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  ComponentPage,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { FacepileAddFaceExample } from './examples/Facepile.AddFace.Example';\r\nimport { FacepileBasicExample } from './examples/Facepile.Basic.Example';\r\nimport { FacepileOverflowExample } from './examples/Facepile.Overflow.Example';\r\nimport { FontClassNames } from '../../Styling';\r\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\r\nimport { FacepileStatus } from './Facepile.checklist';\r\n\r\nconst FacepileAddFaceExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Facepile/examples/Facepile.AddFace.Example.tsx') as string;\r\nconst FacepileBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Facepile/examples/Facepile.Basic.Example.tsx') as string;\r\nconst FacepileOverflowExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Facepile/examples/Facepile.Overflow.Example.tsx') as string;\r\n\r\nexport class FacepilePage extends React.Component<IComponentDemoPageProps, {}> {\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='Facepile'\r\n        componentName='FacepileExample'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard title='Facepile with size and fade in options' code={ FacepileBasicExampleCode }>\r\n              <FacepileBasicExample />\r\n            </ExampleCard>\r\n            <ExampleCard title='Facepile with overflow buttons' code={ FacepileOverflowExampleCode }>\r\n              <FacepileOverflowExample />\r\n            </ExampleCard>\r\n            <ExampleCard title='Facepile with face adding functionality' code={ FacepileAddFaceExampleCode }>\r\n              <FacepileAddFaceExample />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/Facepile/Facepile.Props.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              The Facepile shows a list of faces or initials in a horizontal lockup. Each circle represents a person. Many times this component is used when sharing who has access to a specific view or file or when assigning a user to a task within a workflow.\r\n            </p>\r\n\r\n            <h2 className={ FontClassNames.xLarge }>Adding people</h2>\r\n            <p>\r\n              The component can include an add button which can be used for quickly adding a person to the list.\r\n            </p>\r\n\r\n            <h2 className={ FontClassNames.xLarge }>Empty state</h2>\r\n            <p>\r\n              The empty state of the Facepile should include only an add button. Another variant is to use an input field with placeholder text instructing the user to add a person. See the PeoplePicker component for the menu used to add people to the Facepile list.\r\n            </p>\r\n\r\n            <h2 className={ FontClassNames.xLarge }>One person</h2>\r\n            <p>\r\n              When there is only one person in the Facepile, consider using their name next to the face or initials.\r\n            </p>\r\n\r\n            <h2 className={ FontClassNames.xLarge }>Expanding the list when there is no overflow</h2>\r\n\r\n            <p>\r\n              When there is a need to show the Facepile expanded into a vertical list, include a downward chevron button. Clicking or tapping on the chevron would open a standard list view of personas.\r\n            </p>\r\n\r\n            <h2 className={ FontClassNames.xLarge }>Overflow</h2>\r\n\r\n            <p>\r\n              When the Facepile exceeds a max number of 5 people, show a button at the end of the list indicating how many are not being shown. Clicking or tapping on the overflow would open a standard list view of personas.\r\n            </p>\r\n\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div />\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Use if looking for a way to represent who has access to an area and need to show that as a people representation.</li>\r\n              <li>Only show the Add button if a user has access to do so.</li>\r\n              <li>Allow a way for the user to understand who the person is. Many common ways to do this are with a tooltip or adding the ability to open up a PeopleCard Experience.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Use for things other than people.</li>\r\n              <li>Overwhelm users by listing every single person as a circle but truncate and provide a way to see the full list.</li>\r\n              <li>Donâ€™t use this control for experiences where you need to manage details of hundreds of users, you are better off using a list control.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }\r\n        componentStatus={\r\n          <ComponentStatus\r\n            {...FacepileStatus}\r\n          />\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n"]}