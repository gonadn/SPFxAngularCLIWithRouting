"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = require("fs");
/* tslint:disable:no-function-expression - Mocha uses a poorly scoped "this" pointer */
class TestFileComparer {
    static assertFileMatchesExpected(actualFilename, expectedFilename) {
        const actualContent = fs.readFileSync(actualFilename).toString('utf8');
        const expectedContent = fs.readFileSync(expectedFilename).toString('utf8');
        chai_1.assert(this.areEquivalentFileContents(actualContent, expectedContent), 'The file content does not match the expected value:'
            + '\nEXPECTED: ' + expectedFilename
            + '\nACTUAL: ' + actualFilename);
    }
    /**
     * Compares the contents of two files, and returns true if they are equivalent.
     * Note that these files are not normally edited by a human; the "equivalence"
     * comparison here is intended to ignore spurious changes that might be introduced
     * by a tool, e.g. Git newline normalization or an editor that strips
     * whitespace when saving.
     */
    static areEquivalentFileContents(actualFileContent, expectedFileContent) {
        // NOTE: "\s" also matches "\r" and "\n"
        const normalizedActual = actualFileContent.replace(/[\s]+/g, ' ');
        const normalizedExpected = expectedFileContent.replace(/[\s]+/g, ' ');
        return normalizedActual === normalizedExpected;
    }
    /**
     * Generates the report and writes it to disk.
     * @param reportFilename - The output filename
     * @param value - A string value to be written to file.
     */
    static writeFile(reportFilename, value) {
        const fileContent = this.generateFileContent(value);
        fs.writeFileSync(reportFilename, fileContent);
    }
    static generateFileContent(value) {
        // Normalize to CRLF
        if (!value) {
            throw new Error(`Expected non undefined parameter: ${value}`);
        }
        const fileContent = value.toString().replace(/\r?\n/g, '\r\n');
        return fileContent;
    }
}
exports.default = TestFileComparer;

//# sourceMappingURL=TestFileComparer.js.map
