{"version":3,"sources":["ast/AstNamespace.ts"],"names":[],"mappings":"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","file":"ast/AstNamespace.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\nimport AstModuleVariable from './AstModuleVariable';\r\nimport { AstItemKind, IAstItemOptions } from './AstItem';\r\nimport { IExportedSymbol } from './IExportedSymbol';\r\nimport AstModule from './AstModule';\r\n\r\nconst allowedTypes: string[] = ['string', 'number', 'boolean'];\r\n\r\n/**\r\n  * This class is part of the AstItem abstract syntax tree. It represents exports of\r\n  * a namespace, the exports can be module variable constants of type \"string\", \"boolean\" or \"number\".\r\n  * An AstNamespace is defined using TypeScript's \"namespace\" keyword.\r\n  *\r\n  * @remarks A note about terminology:\r\n  * - EcmaScript \"namespace modules\" are not conventional namespaces; their semantics are\r\n  * more like static classes in C# or Java.\r\n  * - API Extractor's support for namespaces is currently limited to representing tables of\r\n  * constants, and has a benefit of enabling WebPack to avoid bundling unused values.\r\n  * - We currently still recommend to use static classes for utility libraries, since this\r\n  * provides getters/setters, public/private, and some other structure missing from namespaces.\r\n  */\r\nexport default class AstNamespace extends AstModule {\r\n  private _exportedNormalizedSymbols: IExportedSymbol[] = [];\r\n\r\n  constructor(options: IAstItemOptions) {\r\n    super(options);\r\n    this.kind = AstItemKind.Namespace;\r\n    this.name = options.declarationSymbol.name;\r\n\r\n    const exportSymbols: ts.Symbol[] = this.typeChecker.getExportsOfModule(this.declarationSymbol);\r\n    if (exportSymbols) {\r\n      if (this.context.policies.namespaceSupport === 'conservative') {\r\n        this._processConservativeMembers(exportSymbols);\r\n      } else {\r\n        this._processPermissiveMembers(exportSymbols);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Used when policies.namespaceSupport=conservative\r\n  private _processConservativeMembers(exportSymbols: ts.Symbol[]): void {\r\n    for (const exportSymbol of exportSymbols) {\r\n      const followedSymbol: ts.Symbol = this.followAliases(exportSymbol);\r\n\r\n      if (!followedSymbol.declarations) {\r\n        // This is an API Extractor bug, but it could happen e.g. if we upgrade to a new\r\n        // version of the TypeScript compiler that introduces new AST variations that we\r\n        // haven't tested before.\r\n        this.reportWarning(`The definition \"${exportSymbol.name}\" has no declarations`);\r\n        continue;\r\n      }\r\n\r\n      if (!(followedSymbol.flags === ts.SymbolFlags.BlockScopedVariable)) {\r\n        this.reportWarning(`Unsupported export \"${exportSymbol.name}\" ` +\r\n          'Currently the \"namespace\" block only supports constant variables.');\r\n        continue;\r\n      }\r\n\r\n      // Since we are imposing that the items within a namespace be\r\n      // const properties we are only taking the first declaration.\r\n      // If we decide to add support for other types within a namespace\r\n      // we will have for evaluate each declaration.\r\n      const declaration: ts.Declaration = followedSymbol.getDeclarations()[0];\r\n\r\n      if (declaration.parent.flags !== ts.NodeFlags.Const) {\r\n        this.reportWarning(`Export \"${exportSymbol.name}\" is missing the \"const\" ` +\r\n          'modifier. Currently the \"namespace\" block only supports constant variables.');\r\n        continue;\r\n      }\r\n\r\n      const propertySignature: ts.PropertySignature = declaration as ts.PropertySignature;\r\n      if (!propertySignature.type || allowedTypes.indexOf(propertySignature.type.getText()) < 0) {\r\n        this.reportWarning(`Export \"${exportSymbol.name}\" must specify and be of type` +\r\n          '\"string\", \"number\" or \"boolean\"');\r\n        continue;\r\n      }\r\n\r\n      if (!propertySignature.initializer) {\r\n        this.reportWarning(`Export \"${exportSymbol.name}\" must have an initialized value`);\r\n        continue;\r\n      }\r\n\r\n      // Typescript's VariableDeclaration AST nodes have an VariableDeclarationList parent,\r\n      // and the VariableDeclarationList exists within a VariableStatement, which is where\r\n      // the JSDoc comment Node can be found.\r\n      // If there is no parent or grandparent of this VariableDeclaration then\r\n      // we do not know how to obtain the JSDoc comment.\r\n      let jsdocNode: ts.Node;\r\n      if (!declaration.parent || !declaration.parent.parent ||\r\n        declaration.parent.parent.kind !== ts.SyntaxKind.VariableStatement) {\r\n        this.reportWarning(`Unable to locate the documentation node for \"${exportSymbol.name}\"; `\r\n          + `this may be an API Extractor bug`);\r\n      } else {\r\n        jsdocNode = declaration.parent.parent;\r\n      }\r\n\r\n      const exportMemberOptions: IAstItemOptions = {\r\n        context: this.context,\r\n        declaration,\r\n        declarationSymbol: followedSymbol,\r\n        jsdocNode: jsdocNode,\r\n        exportSymbol\r\n      };\r\n\r\n      this.addMemberItem(new AstModuleVariable(exportMemberOptions));\r\n\r\n      this._exportedNormalizedSymbols.push({\r\n        exportedName: exportSymbol.name,\r\n        followedSymbol: followedSymbol\r\n      });\r\n    }\r\n  }\r\n\r\n  // Used when policies.namespaceSupport=permissive\r\n  private _processPermissiveMembers(exportSymbols: ts.Symbol[]): void {\r\n    for (const exportSymbol of exportSymbols) {\r\n      this.processModuleExport(exportSymbol);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}