{"version":3,"sources":["ast/AstProperty.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AAEjC,uCAAyD;AACzD,2CAAoC;AAEpC;;;GAGG;AACH,iBAAkB,SAAQ,mBAAS;IAKjC,YAAY,OAAwB;QAClC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,qBAAW,CAAC,QAAQ,CAAC;QAEjC,MAAM,WAAW,GAA2B,OAAO,CAAC,WAAqC,CAAC;QAC1F,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACpB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,gCAAgC;YAChC,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,WAAW,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC;gBACnD,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;oBACpD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACzB,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAEM,kBAAkB;QACvB,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC;YAC9B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,UAAU;SAC1B,CAAC,CAAC;IACL,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","file":"ast/AstProperty.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nimport { AstItemKind, IAstItemOptions } from './AstItem';\r\nimport AstMember from './AstMember';\r\n\r\n/**\r\n * This class is part of the AstItem abstract syntax tree. It represents properties of classes or interfaces\r\n * (It does not represent member methods)\r\n */\r\nclass AstProperty extends AstMember {\r\n  public type: string;\r\n  public isStatic: boolean;\r\n  public isReadOnly: boolean;\r\n\r\n  constructor(options: IAstItemOptions) {\r\n    super(options);\r\n    this.kind = AstItemKind.Property;\r\n\r\n    const declaration: ts.PropertyDeclaration = options.declaration as ts.PropertyDeclaration;\r\n    if (declaration.type) {\r\n      this.type = declaration.type.getText();\r\n    } else {\r\n      this.hasIncompleteTypes = true;\r\n      this.type = 'any';\r\n    }\r\n\r\n    if (this.documentation.hasReadOnlyTag) {\r\n      this.isReadOnly = true;\r\n    } else {\r\n      // Check for a readonly modifier\r\n      for (const modifier of declaration.modifiers || []) {\r\n        if (modifier.kind === ts.SyntaxKind.ReadonlyKeyword) {\r\n          this.isReadOnly = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getDeclarationLine(): string {\r\n    return super.getDeclarationLine({\r\n      type: this.type,\r\n      readonly: this.isReadOnly\r\n    });\r\n  }\r\n}\r\n\r\nexport default AstProperty;\r\n"],"sourceRoot":"..\\..\\src"}