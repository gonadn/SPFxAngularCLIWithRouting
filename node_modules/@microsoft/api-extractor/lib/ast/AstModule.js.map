{"version":3,"sources":["ast/AstModule.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA+B;AAE/B,iCAAiC;AAEjC,yDAAkD;AAClD,2DAAoD;AACpD,uCAAgC;AAChC,+CAAwC;AAExC;;IAEI;AACJ,eAAyB,SAAQ,0BAAgB;IAErC,mBAAmB,CAAC,YAAuB;QACnD,MAAM,cAAc,GAAc,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAEnE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;YACjC,gFAAgF;YAChF,gFAAgF;YAChF,yBAAyB;YACzB,IAAI,CAAC,aAAa,CAAC,oCAAoC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;YAC5E,MAAM,CAAC;QACT,CAAC;QAED,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;YACtD,MAAM,OAAO,GAAoB;gBAC/B,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,WAAW;gBACX,iBAAiB,EAAE,cAAc;gBACjC,SAAS,EAAE,WAAW;gBACtB,YAAY;aACb,CAAC;YAEF,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC7E,IAAI,CAAC,aAAa,CAAC,IAAI,2BAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;YACrD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,aAAa,CAAC,IAAI,sBAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,4CAA4C;YAC7F,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,aAAa,CAAC,IAAI,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YAC/C,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtD,IAAI,CAAC,aAAa,CAAC,IAAI,iBAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,aAAa,CAAC,uBAAuB,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAED,kBAAe,SAAS,CAAC;AAEzB,0DAA0D;AAC1D,iDAA0C","file":"ast/AstModule.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\nimport { IAstItemOptions } from './AstItem';\r\nimport AstItemContainer from './AstItemContainer';\r\nimport AstStructuredType from './AstStructuredType';\r\nimport AstEnum from './AstEnum';\r\nimport AstFunction from './AstFunction';\r\n\r\n/**\r\n  * This is an abstract base class for AstPackage and AstNamespace.\r\n  */\r\nabstract class AstModule extends AstItemContainer {\r\n\r\n  protected processModuleExport(exportSymbol: ts.Symbol): void {\r\n    const followedSymbol: ts.Symbol = this.followAliases(exportSymbol);\r\n\r\n    if (!followedSymbol.declarations) {\r\n      // This is an API Extractor bug, but it could happen e.g. if we upgrade to a new\r\n      // version of the TypeScript compiler that introduces new AST variations that we\r\n      // haven't tested before.\r\n      this.reportWarning(`Definition with no declarations: ${exportSymbol.name}`);\r\n      return;\r\n    }\r\n\r\n    for (const declaration of followedSymbol.declarations) {\r\n      const options: IAstItemOptions = {\r\n        context: this.context,\r\n        declaration,\r\n        declarationSymbol: followedSymbol,\r\n        jsdocNode: declaration,\r\n        exportSymbol\r\n      };\r\n\r\n      if (followedSymbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface)) {\r\n        this.addMemberItem(new AstStructuredType(options));\r\n      } else if (followedSymbol.flags & ts.SymbolFlags.ValueModule) {\r\n        this.addMemberItem(new AstNamespace(options)); // tslint:disable-line:no-use-before-declare\r\n      } else if (followedSymbol.flags & ts.SymbolFlags.Function) {\r\n        this.addMemberItem(new AstFunction(options));\r\n      } else if (followedSymbol.flags & ts.SymbolFlags.Enum) {\r\n        this.addMemberItem(new AstEnum(options));\r\n      } else {\r\n        this.reportWarning(`Unsupported export: ${exportSymbol.name}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default AstModule;\r\n\r\n// This is defer imported to break the circular dependency\r\nimport AstNamespace from './AstNamespace';\r\n"],"sourceRoot":"..\\..\\src"}