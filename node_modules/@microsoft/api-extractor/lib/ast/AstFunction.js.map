{"version":3,"sources":["ast/AstFunction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,uCAAkE;AAClE,iDAA0C;AAC1C,4DAAqD;AACrD,oDAA6C;AAE7C;;;;;IAKI;AACJ,iBAAkB,SAAQ,iBAAO;IAI/B,YAAY,OAAwB;QAClC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,qBAAW,CAAC,QAAQ,CAAC;QAEjC,MAAM,iBAAiB,GAA2B,OAAO,CAAC,WAAqC,CAAC;QAEhG,aAAa;QACb,EAAE,CAAC,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;gBACjD,MAAM,iBAAiB,GAAc,2BAAiB,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;gBACzF,MAAM,YAAY,GAAiB,IAAI,sBAAY,CAAC;oBAClD,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,WAAW,EAAE,KAAK;oBAClB,iBAAiB,EAAE,iBAAiB;oBACpC,SAAS,EAAE,KAAK;iBACjB,CAAC,CAAC;gBACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;QAED,cAAc;QACd,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC1B,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,kBAAkB;QACvB,MAAM,CAAC,uBAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","file":"ast/AstFunction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport AstItem, { AstItemKind, IAstItemOptions } from './AstItem';\r\nimport AstParameter from './AstParameter';\r\nimport TypeScriptHelpers from '../TypeScriptHelpers';\r\nimport PrettyPrinter from '../PrettyPrinter';\r\n\r\n/**\r\n  * This class is part of the AstItem abstract syntax tree. It represents functions that are directly\r\n  * defined inside a package and are not member of classes, interfaces, or nested type literal expressions\r\n  *\r\n  * @see AstMethod for functions that are members of classes, interfaces, or nested type literal expressions\r\n  */\r\nclass AstFunction extends AstItem {\r\n  public returnType: string;\r\n  public params: AstParameter[];\r\n\r\n  constructor(options: IAstItemOptions) {\r\n    super(options);\r\n    this.kind = AstItemKind.Function;\r\n\r\n    const methodDeclaration: ts.FunctionDeclaration = options.declaration as ts.FunctionDeclaration;\r\n\r\n    // Parameters\r\n    if (methodDeclaration.parameters) {\r\n      this.params = [];\r\n      for (const param of methodDeclaration.parameters) {\r\n        const declarationSymbol: ts.Symbol = TypeScriptHelpers.tryGetSymbolForDeclaration(param);\r\n        const astParameter: AstParameter = new AstParameter({\r\n          context: this.context,\r\n          declaration: param,\r\n          declarationSymbol: declarationSymbol,\r\n          jsdocNode: param\r\n        });\r\n        this.innerItems.push(astParameter);\r\n        this.params.push(astParameter);\r\n      }\r\n    }\r\n\r\n    // Return type\r\n    if (methodDeclaration.type) {\r\n      this.returnType = methodDeclaration.type.getText();\r\n    } else {\r\n      this.hasIncompleteTypes = true;\r\n      this.returnType = 'any';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a text string such as \"someName?: SomeTypeName;\", or in the case of a type\r\n   * literal expression, returns a text string such as \"someName?:\".\r\n   */\r\n  public getDeclarationLine(): string {\r\n    return PrettyPrinter.getDeclarationSummary(this.declaration);\r\n  }\r\n}\r\n\r\nexport default AstFunction;\r\n"],"sourceRoot":"..\\..\\src"}