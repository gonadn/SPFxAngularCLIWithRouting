{"version":3,"sources":["ast/AstPackage.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA+B;AAE/B,iCAAiC;AAEjC,uCAAyD;AACzD,2CAAoC;AACpC,4DAAqD;AAGrD;;;IAGI;AACJ,gBAAgC,SAAQ,mBAAS;IA2B/C,YAAY,OAAyB,EAAE,QAAuB;QAC5D,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;QA3B3C,+BAA0B,GAAsB,EAAE,CAAC;QA4BzD,IAAI,CAAC,IAAI,GAAG,qBAAW,CAAC,OAAO,CAAC;QAChC,6DAA6D;QAC7D,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC;QAEhC,MAAM,aAAa,GAAgB,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/F,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,GAAG,CAAC,CAAC,MAAM,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;gBAEvC,MAAM,cAAc,GAAc,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;gBACnE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;oBACnC,YAAY,EAAE,YAAY,CAAC,IAAI;oBAC/B,cAAc,EAAE,cAAc;iBAC/B,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;IA1CO,MAAM,CAAC,WAAW,CAAC,OAAyB,EAAE,QAAuB;QAC3E,MAAM,cAAc,GAAc,2BAAiB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACtF,IAAI,SAA+B,CAAC;QACpC,IAAI,gBAAgB,GAAY,SAAS,CAAC;QAE1C,GAAG,CAAC,CAAC,MAAM,aAAa,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC3D,SAAS,GAAG,aAAqC,CAAC;gBAClD,GAAG,CAAC,CAAC,MAAM,oBAAoB,IAAI,SAAS,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;oBAC1E,EAAE,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,oBAAoB,CAAC,CAAC,CAAC;wBACjE,gBAAgB,GAAG,SAAS,CAAC;oBAC/B,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,CAAC;YACL,OAAO;YACP,WAAW,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3C,iBAAiB,EAAE,cAAc;YACjC,SAAS,EAAE,gBAAgB;SAC5B,CAAC;IACJ,CAAC;IAsBD;;;;;;;;;;OAUG;IACI,wBAAwB,CAAC,MAAiB;QAC/C,MAAM,cAAc,GAAc,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC7D,GAAG,CAAC,CAAC,MAAM,cAAc,IAAI,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC;YAC7D,EAAE,CAAC,CAAC,cAAc,CAAC,cAAc,KAAK,cAAc,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC;YACrC,CAAC;QACH,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAEM,uBAAuB;QAC5B,iDAAiD;QACjD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;CACF;AAxED,6BAwEC","file":"ast/AstPackage.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\nimport { ExtractorContext } from '../ExtractorContext';\r\nimport { AstItemKind, IAstItemOptions } from './AstItem';\r\nimport AstModule from './AstModule';\r\nimport TypeScriptHelpers from '../TypeScriptHelpers';\r\nimport { IExportedSymbol } from './IExportedSymbol';\r\n\r\n/**\r\n  * This class is part of the AstItem abstract syntax tree.  It represents the top-level\r\n  * exports for an Rush package.  This object acts as the root of the Extractor's tree.\r\n  */\r\nexport default class AstPackage extends AstModule {\r\n  private _exportedNormalizedSymbols: IExportedSymbol[] = [];\r\n\r\n  private static _getOptions(context: ExtractorContext, rootFile: ts.SourceFile): IAstItemOptions {\r\n    const rootFileSymbol: ts.Symbol = TypeScriptHelpers.getSymbolForDeclaration(rootFile);\r\n    let statement: ts.VariableStatement;\r\n    let foundDescription: ts.Node = undefined;\r\n\r\n    for (const statementNode of rootFile.statements) {\r\n      if (statementNode.kind === ts.SyntaxKind.VariableStatement) {\r\n        statement = statementNode as ts.VariableStatement;\r\n        for (const statementDeclaration of statement.declarationList.declarations) {\r\n          if (statementDeclaration.name.getText() === 'packageDescription') {\r\n            foundDescription = statement;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      context,\r\n      declaration: rootFileSymbol.declarations[0],\r\n      declarationSymbol: rootFileSymbol,\r\n      jsdocNode: foundDescription\r\n    };\r\n  }\r\n\r\n  constructor(context: ExtractorContext, rootFile: ts.SourceFile) {\r\n    super(AstPackage._getOptions(context, rootFile));\r\n    this.kind = AstItemKind.Package;\r\n    // The scoped package name. (E.g. \"@microsoft/api-extractor\")\r\n    this.name = context.packageName;\r\n\r\n    const exportSymbols: ts.Symbol[] = this.typeChecker.getExportsOfModule(this.declarationSymbol);\r\n    if (exportSymbols) {\r\n      for (const exportSymbol of exportSymbols) {\r\n        this.processModuleExport(exportSymbol);\r\n\r\n        const followedSymbol: ts.Symbol = this.followAliases(exportSymbol);\r\n        this._exportedNormalizedSymbols.push({\r\n          exportedName: exportSymbol.name,\r\n          followedSymbol: followedSymbol\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and returns the original symbol name.\r\n   *\r\n   * For example, suppose a class is defined as \"export default class MyClass { }\"\r\n   * but exported from the package's index.ts like this:\r\n   *\r\n   *    export { default as _MyClass } from './MyClass';\r\n   *\r\n   * In this example, given the symbol for _MyClass, getExportedSymbolName() will return\r\n   * the string \"MyClass\".\r\n   */\r\n  public tryGetExportedSymbolName(symbol: ts.Symbol): string {\r\n    const followedSymbol: ts.Symbol = this.followAliases(symbol);\r\n    for (const exportedSymbol of this._exportedNormalizedSymbols) {\r\n      if (exportedSymbol.followedSymbol === followedSymbol) {\r\n        return exportedSymbol.exportedName;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public shouldHaveDocumentation(): boolean {\r\n    // We don't write JSDoc for the AstPackage object\r\n    return false;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}