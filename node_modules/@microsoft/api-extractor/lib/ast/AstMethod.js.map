{"version":3,"sources":["ast/AstMethod.ts"],"names":[],"mappings":"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","file":"ast/AstMethod.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport { AstItemKind, IAstItemOptions } from './AstItem';\r\nimport AstMember from './AstMember';\r\nimport AstParameter from './AstParameter';\r\nimport TypeScriptHelpers from '../TypeScriptHelpers';\r\nimport { Markup } from '../markup/Markup';\r\nimport ApiDefinitionReference, { IScopedPackageName } from '../ApiDefinitionReference';\r\n\r\n/**\r\n * This class is part of the AstItem abstract syntax tree. It represents functions that are members of\r\n * classes, interfaces, or nested type literal expressions. Unlike AstFunctions, AstMethods can have\r\n * access modifiers (public, private, etc.) or be optional, because they are members of a structured type\r\n *\r\n * @see AstFunction for functions that are defined inside of a package\r\n */\r\nexport default class AstMethod extends AstMember {\r\n  public readonly returnType: string;\r\n  public readonly params: AstParameter[];\r\n\r\n  constructor(options: IAstItemOptions) {\r\n    super(options);\r\n\r\n    // tslint:disable-next-line:no-bitwise\r\n    if ((options.declarationSymbol.flags & ts.SymbolFlags.Constructor) !== 0) {\r\n      this.kind = AstItemKind.Constructor;\r\n    } else {\r\n      this.kind = AstItemKind.Method;\r\n    }\r\n\r\n    const methodDeclaration: ts.MethodDeclaration = options.declaration as ts.MethodDeclaration;\r\n\r\n    // Parameters\r\n    if (methodDeclaration.parameters) {\r\n      this.params = [];\r\n      for (const param of methodDeclaration.parameters) {\r\n        const declarationSymbol: ts.Symbol = TypeScriptHelpers.tryGetSymbolForDeclaration(param);\r\n        const astParameter: AstParameter = new AstParameter({\r\n          context: this.context,\r\n          declaration: param,\r\n          declarationSymbol: declarationSymbol,\r\n          jsdocNode: param\r\n        });\r\n\r\n        this.innerItems.push(astParameter);\r\n        this.params.push(astParameter);\r\n      }\r\n    }\r\n\r\n    // Return type\r\n    if (this.kind !== AstItemKind.Constructor) {\r\n      if (methodDeclaration.type) {\r\n        this.returnType = methodDeclaration.type.getText();\r\n      } else {\r\n        this.returnType = 'any';\r\n        this.hasIncompleteTypes = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected onCompleteInitialization(): void {\r\n    super.onCompleteInitialization();\r\n\r\n    // If this is a class constructor, and if the documentation summary was omitted, then\r\n    // we fill in a default summary versus flagging it as \"undocumented\".\r\n    // Generally class constructors have uninteresting documentation.\r\n    if (this.kind === AstItemKind.Constructor) {\r\n      if (this.documentation.summary.length === 0) {\r\n        this.documentation.summary.push(\r\n          ...Markup.createTextElements('Constructs a new instance of the '));\r\n\r\n        const scopedPackageName: IScopedPackageName = ApiDefinitionReference\r\n          .parseScopedPackageName(this.context.package.name);\r\n\r\n        this.documentation.summary.push(\r\n          Markup.createApiLinkFromText(this.parentContainer.name, {\r\n              scopeName: scopedPackageName.scope,\r\n              packageName: scopedPackageName.package,\r\n              exportName: this.parentContainer.name,\r\n              memberName: ''\r\n            }\r\n          )\r\n        );\r\n\r\n        this.documentation.summary.push(...Markup.createTextElements(' class'));\r\n      }\r\n      this.needsDocumentation = false;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}