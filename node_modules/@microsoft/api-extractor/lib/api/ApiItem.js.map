{"version":3,"sources":["api/ApiItem.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","file":"api/ApiItem.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  MarkupBasicElement,\r\n  MarkupStructuredElement\r\n} from '../markup/MarkupElement';\r\n\r\n/**\r\n * Represents a reference to an ApiItem.\r\n * @alpha\r\n */\r\nexport interface IApiItemReference {\r\n  /**\r\n   * The name of the NPM scope, or an empty string if there is no scope.\r\n   * @remarks\r\n   * Example: \"@microsoft\"\r\n   */\r\n  scopeName: string;\r\n\r\n  /**\r\n   * The name of the NPM package that the API item belongs to, without the NPM scope.\r\n   * @remarks\r\n   * Example: \"sample-package\"\r\n   */\r\n  packageName: string;\r\n\r\n  /**\r\n   * The name of an exported API item, or an empty string.\r\n   * @remarks\r\n   * The name does not include any generic parameters or other punctuation.\r\n   * Example: \"SampleClass\"\r\n   */\r\n  exportName: string;\r\n\r\n  /**\r\n   * The name of a member of the exported item, or an empty string.\r\n   * @remarks\r\n   * The name does not include any parameters or punctuation.\r\n   * Example: \"toString\"\r\n   */\r\n  memberName: string;\r\n}\r\n\r\n/**\r\n * Whether the function is public, private, or protected.\r\n * @alpha\r\n */\r\nexport type ApiAccessModifier = 'public' | 'private' | 'protected' | '';\r\n\r\n/**\r\n * Parameter Doc item.\r\n * @alpha\r\n */\r\nexport interface IApiParameter {\r\n  /**\r\n   * the parameter name\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * describes the parameter\r\n   */\r\n  description: MarkupBasicElement[];\r\n\r\n  /**\r\n   * Whether the parameter is optional\r\n   */\r\n  isOptional: boolean;\r\n\r\n  /**\r\n   * Whether the parameter has the '...' spread suffix\r\n   */\r\n  isSpread: boolean;\r\n\r\n  /**\r\n   * The data type of the parameter\r\n   */\r\n  type: string;\r\n}\r\n\r\n/**\r\n * An ordered map of items, indexed by the symbol name.\r\n * @alpha\r\n */\r\nexport interface IApiNameMap<T> {\r\n  /**\r\n   * For a given name, returns the object with that name.\r\n   */\r\n  [name: string]: T;\r\n}\r\n\r\n/**\r\n * Return value of a method or function.\r\n * @alpha\r\n */\r\nexport interface IApiReturnValue {\r\n  /**\r\n   * The data type returned by the function\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * Describes the return value\r\n   */\r\n  description: MarkupBasicElement[];\r\n}\r\n\r\n/**\r\n * DocItems are the typescript adaption of the json schemas\r\n * defined in API-json-schema.json. IDocElement is a component\r\n * for IDocItems because they represent formated rich text.\r\n *\r\n * This is the base class for other DocItem types.\r\n * @alpha\r\n */\r\nexport interface IApiBaseDefinition {\r\n  /**\r\n   * kind of item: 'class', 'enum', 'function', etc.\r\n   */\r\n  kind: string;\r\n  isBeta: boolean;\r\n  summary: MarkupBasicElement[];\r\n  remarks: MarkupStructuredElement[];\r\n  deprecatedMessage?: MarkupBasicElement[];\r\n}\r\n\r\n/**\r\n * A property of a TypeScript class or interface\r\n * @alpha\r\n */\r\nexport interface IApiProperty extends IApiBaseDefinition {\r\n\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'property';\r\n\r\n  /**\r\n   * a text summary of the method definition\r\n   */\r\n  signature: string;\r\n\r\n  /**\r\n   * For an interface member, whether it is optional\r\n   */\r\n  isOptional: boolean;\r\n\r\n  /**\r\n   * Whether the property is read-only\r\n   */\r\n  isReadOnly: boolean;\r\n\r\n  /**\r\n   * For a class member, whether it is static\r\n   */\r\n  isStatic: boolean;\r\n\r\n  /**\r\n   * The data type of this property\r\n   */\r\n  type: string;\r\n}\r\n\r\n/**\r\n * A member function of a typescript class or interface.\r\n * @alpha\r\n */\r\nexport interface IApiMethod extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'method';\r\n\r\n  /**\r\n   * a text summary of the method definition\r\n   */\r\n  signature: string;\r\n\r\n  /**\r\n   * the access modifier of the method\r\n   */\r\n  accessModifier: ApiAccessModifier;\r\n\r\n  /**\r\n   * for an interface member, whether it is optional\r\n   */\r\n  isOptional: boolean;\r\n\r\n  /**\r\n   * for a class member, whether it is static\r\n   */\r\n  isStatic: boolean;\r\n\r\n  /**\r\n   * a mapping of parameter name to IApiParameter\r\n   */\r\n\r\n  parameters: IApiNameMap<IApiParameter>;\r\n\r\n  /**\r\n   * describes the return value of the method\r\n   */\r\n  returnValue: IApiReturnValue;\r\n}\r\n\r\n/**\r\n * A Typescript function.\r\n * @alpha\r\n */\r\nexport interface IApiFunction extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'function';\r\n\r\n  /**\r\n   * a text summary of the method definition\r\n   */\r\n  signature: string;\r\n\r\n  /**\r\n   * parameters of the function\r\n   */\r\n  parameters: IApiNameMap<IApiParameter>;\r\n\r\n  /**\r\n   * a description of the return value\r\n   */\r\n  returnValue: IApiReturnValue;\r\n}\r\n\r\n/**\r\n * A Typescript function.\r\n * @alpha\r\n */\r\nexport interface IApiConstructor extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'constructor';\r\n\r\n  /**\r\n   * a text summary of the method definition\r\n   */\r\n  signature: string;\r\n\r\n  /**\r\n   * parameters of the function\r\n   */\r\n  parameters: IApiNameMap<IApiParameter>;\r\n}\r\n\r\n/**\r\n * IApiClass represetns an exported class.\r\n * @alpha\r\n */\r\nexport interface IApiClass extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'class';\r\n  /**\r\n   * Can be a combination of methods and/or properties\r\n   */\r\n  members: IApiNameMap<ApiMember>;\r\n\r\n  /**\r\n   * Interfaces implemented by this class\r\n   */\r\n  implements?: string;\r\n\r\n  /**\r\n   * The base class for this class\r\n   */\r\n  extends?: string;\r\n\r\n  /**\r\n   * Generic type parameters for this class\r\n   */\r\n  typeParameters?: string[];\r\n}\r\n\r\n/**\r\n * IApiEnum represents an exported enum.\r\n * @alpha\r\n */\r\nexport interface IApiEnum extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'enum';\r\n\r\n  values: IApiEnumMember[];\r\n}\r\n\r\n/**\r\n * A member of an IApiEnum.\r\n *\r\n * @alpha\r\n */\r\nexport interface IApiEnumMember extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'enum value';\r\n\r\n  value: string;\r\n}\r\n\r\n/**\r\n * IApiInterface represents an exported interface.\r\n * @alpha\r\n */\r\nexport interface IApiInterface extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'interface';\r\n  /**\r\n   * A mapping from the name of a member API to its ApiMember\r\n   */\r\n  members: IApiNameMap<ApiMember>;\r\n\r\n  /**\r\n   * Interfaces implemented by this interface\r\n   */\r\n  implements?: string;\r\n\r\n  /**\r\n   * The base interface for this interface\r\n   */\r\n  extends?: string;\r\n\r\n  /**\r\n   * Generic type parameters for this interface\r\n   */\r\n  typeParameters?: string[];\r\n}\r\n\r\n/**\r\n * IApiInterface represents an exported interface.\r\n * @alpha\r\n */\r\nexport interface IApiNamespace extends IApiBaseDefinition {\r\n  /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'namespace';\r\n\r\n  /**\r\n   * A mapping from the name of a member API to its ApiMember\r\n   */\r\n  exports: IApiNameMap<ApiItem>;\r\n}\r\n\r\n/**\r\n * IApiPackage is an object contaning the exported\r\n * definions of this API package. The exports can include:\r\n * classes, interfaces, enums, functions.\r\n * @alpha\r\n */\r\nexport interface IApiPackage {\r\n   /**\r\n   * {@inheritdoc IApiBaseDefinition.kind}\r\n   */\r\n  kind: 'package';\r\n\r\n  /**\r\n   * The name of the NPM package, including the optional scope.\r\n   * @remarks\r\n   * Example: \"@microsoft/example-package\"\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * IDocItems of exported API items\r\n   */\r\n  exports: IApiNameMap<ApiItem>;\r\n\r\n  /**\r\n   * The following are needed so that this interface and can share\r\n   * common properties with others that extend IApiBaseDefinition. The IApiPackage\r\n   * does not extend the IApiBaseDefinition because a summary is not required for\r\n   * a package.\r\n   */\r\n  isBeta: boolean;\r\n  summary: MarkupBasicElement[];\r\n  remarks: MarkupStructuredElement[];\r\n  deprecatedMessage?: MarkupBasicElement[];\r\n}\r\n\r\n/**\r\n * A member of a class.\r\n * @alpha\r\n */\r\nexport type ApiMember = IApiProperty | IApiMethod | IApiConstructor;\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport type ApiItem = IApiProperty | ApiMember | IApiFunction | IApiConstructor |\r\n   IApiClass | IApiEnum | IApiEnumMember | IApiInterface | IApiNamespace | IApiPackage;\r\n\r\n/**\r\n * Describes a return type and description of the return type\r\n * that is given in documentation comments.\r\n *\r\n * @alpha\r\n */\r\nexport interface IApiReturnValue {\r\n  type: string;\r\n  description: MarkupBasicElement[];\r\n}\r\n"],"sourceRoot":"..\\..\\src"}