{"version":3,"sources":["ExternalApiHelper.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAC7B,yBAAyB;AACzB,qDAAkD;AAElD;;;;;;;;GAQG;AACH;IAEE;;;;;;;OAOG;IACI,MAAM,CAAC,eAAe,CAAC,OAAe,EAAE,SAAiB,EAAE,uBAA+B;QAC/F,MAAM,cAAc,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;QAC9E,MAAM,gBAAgB,GAAW,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAE9D,MAAM,gBAAgB,GAAQ;YAC5B,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,UAAU;YAClB,gBAAgB,EAAE,MAAM;YACxB,sBAAsB,EAAE,IAAI;YAC5B,GAAG,EAAE,OAAO;YACZ,OAAO,EAAE,gBAAgB;SAC1B,CAAC;QAEF,IAAI,UAAU,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;QAED,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;QAED,MAAM,SAAS,GAAc,IAAI,qBAAS,CAAC;YACzC,QAAQ,EAAE;gBACR,UAAU,EAAE,UAAU;gBACtB,UAAU,EAAE,gBAAgB;gBAC5B,gBAAgB,EAAE,gBAAgB;aACnC;YACD,OAAO,EAAE;gBACP,oBAAoB,EAAE,cAAc;aACrC;YACD,aAAa,EAAE;gBACb,OAAO,EAAE,KAAK;aACf;YACD,WAAW,EAAE;gBACX,OAAO,EAAE,IAAI;gBACb,YAAY,EAAE,UAAU;aACzB;SACF,EAAE;YACA,YAAY,EAAE;gBACb,UAAU,EAAE,CAAC,OAAe,OAAuB,CAAC;aACrD;SACF,CAAC,CAAC;QAEH,SAAS,CAAC,cAAc,EAAE,CAAC;IAC7B,CAAC;CACF;AAzDD,oCAyDC","file":"ExternalApiHelper.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { Extractor } from './extractor/Extractor';\r\n\r\n/**\r\n * ExternalApiHelper has the specific use case of generating an API json file from third-party definition files.\r\n * This class is invoked by the gulp-core-build-typescript gulpfile, where the external package names are\r\n * hard wired.\r\n * The job of this method is almost the same as the API Extractor task that is executed on first party packages,\r\n * with the exception that all packages analyzed here are external packages with definition files.\r\n *\r\n * @beta\r\n */\r\nexport default class ExternalApiHelper {\r\n\r\n  /**\r\n   * @param rootDir - the absolute path containing a 'package.json' file and is also a parent of the\r\n   * external package file. Ex: build.absolute_build_path.\r\n   * @param libFolder - the path to the lib folder relative to the rootDir, this is where\r\n   * 'external-api-json/external_package.api.json' file will be written. Ex: 'lib'.\r\n   * @param externalPackageFilePath - the path to the '*.d.ts' file of the external package relative to the rootDir.\r\n   * Ex: 'resources/external-api-json/es6-collection/index.t.ds'\r\n   */\r\n  public static generateApiJson(rootDir: string, libFolder: string, externalPackageFilePath: string): void {\r\n    const entryPointFile: string = path.resolve(rootDir, externalPackageFilePath);\r\n    const entryPointFolder: string = path.dirname(entryPointFile);\r\n\r\n    const overrideTsconfig: { } = {\r\n      target: 'es5',\r\n      module: 'commonjs',\r\n      moduleResolution: 'node',\r\n      experimentalDecorators: true,\r\n      jsx: 'react',\r\n      rootDir: entryPointFolder\r\n    };\r\n\r\n    let outputPath: string = path.resolve(rootDir, libFolder);\r\n    if (!fs.existsSync(outputPath)) {\r\n      fs.mkdirSync(outputPath);\r\n    }\r\n\r\n    outputPath = path.join(outputPath, 'external-api-json');\r\n    if (!fs.existsSync(outputPath)) {\r\n      fs.mkdirSync(outputPath);\r\n    }\r\n\r\n    const extractor: Extractor = new Extractor({\r\n      compiler: {\r\n        configType: 'tsconfig',\r\n        rootFolder: entryPointFolder,\r\n        overrideTsconfig: overrideTsconfig\r\n      },\r\n      project: {\r\n        entryPointSourceFile: entryPointFile\r\n      },\r\n      apiReviewFile: {\r\n        enabled: false\r\n      },\r\n      apiJsonFile: {\r\n        enabled: true,\r\n        outputFolder: outputPath\r\n      }\r\n    }, {\r\n       customLogger: {\r\n        logVerbose: (message: string) => { /* don't log */ }\r\n      }\r\n    });\r\n\r\n    extractor.analyzeProject();\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}