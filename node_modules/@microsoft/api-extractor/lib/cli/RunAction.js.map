{"version":3,"sources":["cli/RunAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,gCAAgC;AAChC,yBAAyB;AACzB,6BAA6B;AAC7B,oEAA2E;AAE3E,gEAIoC;AAEpC,sDAAmD;AAKnD,MAAM,kBAAkB,GAAW,oBAAoB,CAAC;AAExD,eAAuB,SAAQ,mCAAiB;IAK9C,YAAY,MAA+B;QACzC,KAAK,CAAC;YACJ,UAAU,EAAE,KAAK;YACjB,OAAO,EAAE,mCAAmC;YAC5C,aAAa,EAAE,mCAAmC;SACnD,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACrD,iBAAiB,EAAE,UAAU;YAC7B,kBAAkB,EAAE,IAAI;YACxB,GAAG,EAAE,MAAM;YACX,WAAW,EAAE,qBAAqB,kBAAkB,+CAA+C;SACpG,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC9C,iBAAiB,EAAE,SAAS;YAC5B,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,mEAAmE;kBAC5E,8EAA8E;kBAC9E,+EAA+E;kBAC/E,wDAAwD;SAC7D,CAAC,CAAC;IACL,CAAC;IAES,SAAS;QACjB,IAAI,cAAsB,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;YACpC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACjE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpC,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC/E,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,4EAA4E;YAC5E,sBAAsB;YACtB,MAAM,MAAM,GAAsB,IAAI,qCAAiB,EAAE,CAAC;YAC1D,MAAM,aAAa,GAAqB,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAExE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClB,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;YAChE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,yDAAyD;gBACzD,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,kBAAkB,CAAC,CAAC;YAChE,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpC,MAAM,IAAI,KAAK,CAAC,qBAAqB,kBAAkB,OAAO,CAAC,CAAC;YAClE,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,4BAA4B,cAAc,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QAC9E,CAAC;QAED,MAAM,MAAM,GAAqB,4BAAQ,CAAC,eAAe,CAAC,cAAc,EAAE,qBAAS,CAAC,UAAU,CAAC,CAAC;QAChG,MAAM,SAAS,GAAc,IAAI,qBAAS,CAAC,MAAM,EAAE;YACjD,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK;SACvC,CAAC,CAAC;QACH,SAAS,CAAC,cAAc,EAAE,CAAC;IAC7B,CAAC;CACF;AAjED,8BAiEC","file":"cli/RunAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport { JsonFile, PackageJsonLookup } from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  CommandLineAction,\r\n  CommandLineStringParameter,\r\n  CommandLineFlagParameter\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { Extractor } from '../extractor/Extractor';\r\nimport { IExtractorConfig } from '../extractor/IExtractorConfig';\r\n\r\nimport { ApiExtractorCommandLine } from './ApiExtractorCommandLine';\r\n\r\nconst AE_CONFIG_FILENAME: string = 'api-extractor.json';\r\n\r\nexport class RunAction extends CommandLineAction {\r\n  private _parser: ApiExtractorCommandLine;\r\n  private _configFileParameter: CommandLineStringParameter;\r\n  private _localParameter: CommandLineFlagParameter;\r\n\r\n  constructor(parser: ApiExtractorCommandLine) {\r\n    super({\r\n      actionVerb: 'run',\r\n      summary: 'Invoke API Extractor on a project',\r\n      documentation: 'Invoke API Extractor on a project'\r\n    });\r\n    this._parser = parser;\r\n  }\r\n\r\n  protected onDefineParameters(): void { // override\r\n    this._configFileParameter = this.defineStringParameter({\r\n      parameterLongName: '--config',\r\n      parameterShortName: '-c',\r\n      key: 'FILE',\r\n      description: `Use the specified ${AE_CONFIG_FILENAME} file path, rather than guessing its location`\r\n    });\r\n    this._localParameter = this.defineFlagParameter({\r\n      parameterLongName: '--local',\r\n      parameterShortName: '-l',\r\n      description: 'Indicates that API Extractor is running as part of a local build,'\r\n        + ' e.g. on a developer\\'s machine. This disables certain validation that would'\r\n        + ' normally be performed for a ship/production build. For example, the *.api.ts'\r\n        + ' review file is automatically copied in a local build.'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): void { // override\r\n    let configFilename: string;\r\n\r\n    if (this._configFileParameter.value) {\r\n      configFilename = path.normalize(this._configFileParameter.value);\r\n      if (!fsx.existsSync(configFilename)) {\r\n        throw new Error('Config file not found: ' + this._configFileParameter.value);\r\n      }\r\n    } else {\r\n      // Otherwise, figure out which project we're in and look for the config file\r\n      // at the project root\r\n      const lookup: PackageJsonLookup = new PackageJsonLookup();\r\n      const packageFolder: string|undefined = lookup.tryGetPackageFolder('.');\r\n\r\n      if (packageFolder) {\r\n        configFilename = path.join(packageFolder, AE_CONFIG_FILENAME);\r\n      } else {\r\n        // If there is no package, then try the current directory\r\n        configFilename = path.join(process.cwd(), AE_CONFIG_FILENAME);\r\n      }\r\n\r\n      if (!fsx.existsSync(configFilename)) {\r\n        throw new Error(`Unable to find an ${AE_CONFIG_FILENAME} file`);\r\n      }\r\n\r\n      console.log(`Using configuration from ${configFilename}` + os.EOL + os.EOL);\r\n    }\r\n\r\n    const config: IExtractorConfig = JsonFile.loadAndValidate(configFilename, Extractor.jsonSchema);\r\n    const extractor: Extractor = new Extractor(config, {\r\n      localBuild: this._localParameter.value\r\n    });\r\n    extractor.analyzeProject();\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}