{"version":3,"sources":["ExtractorContext.ts"],"names":[],"mappings":"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","file":"ExtractorContext.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport { PackageJsonLookup } from '@microsoft/node-core-library';\r\n\r\nimport AstPackage from './ast/AstPackage';\r\nimport DocItemLoader from './DocItemLoader';\r\nimport { ILogger } from './extractor/ILogger';\r\nimport { IExtractorPoliciesConfig } from './extractor/IExtractorConfig';\r\n\r\n/**\r\n * Options for ExtractorContext constructor.\r\n */\r\nexport interface IExtractorContextOptions {\r\n  /**\r\n   * Configuration for the TypeScript compiler.  The most important options to set are:\r\n   *\r\n   * - target: ts.ScriptTarget.ES5\r\n   * - module: ts.ModuleKind.CommonJS\r\n   * - moduleResolution: ts.ModuleResolutionKind.NodeJs\r\n   * - rootDir: inputFolder\r\n   */\r\n  program: ts.Program;\r\n\r\n  /**\r\n   * The entry point for the project.  This should correspond to the \"main\" field\r\n   * from NPM's package.json file.  If it is a relative path, it will be relative to\r\n   * the project folder described by IExtractorAnalyzeOptions.compilerOptions.\r\n   */\r\n  entryPointFile: string;\r\n\r\n  logger: ILogger;\r\n\r\n  policies: IExtractorPoliciesConfig;\r\n}\r\n\r\n/**\r\n * The main entry point for the \"api-extractor\" utility.  The Analyzer object invokes the\r\n * TypeScript Compiler API to analyze a project, and constructs the AstItem\r\n * abstract syntax tree.\r\n */\r\nexport class ExtractorContext {\r\n  public typeChecker: ts.TypeChecker;\r\n  public package: AstPackage;\r\n  /**\r\n   * One DocItemLoader is needed per analyzer to look up external API members\r\n   * as needed.\r\n   */\r\n  public readonly docItemLoader: DocItemLoader;\r\n\r\n  public readonly packageJsonLookup: PackageJsonLookup;\r\n\r\n  public readonly policies: IExtractorPoliciesConfig;\r\n\r\n  private _packageName: string;\r\n\r\n  // If the entry point is \"C:\\Folder\\project\\src\\index.ts\" and the nearest package.json\r\n  // is \"C:\\Folder\\project\\package.json\", then the packageFolder is \"C:\\Folder\\project\"\r\n  private _packageFolder: string;\r\n\r\n  private _logger: ILogger;\r\n\r\n  constructor(options: IExtractorContextOptions) {\r\n    this.packageJsonLookup = new PackageJsonLookup();\r\n\r\n    this.policies = options.policies;\r\n\r\n    this._packageFolder = this.packageJsonLookup.tryGetPackageFolder(options.entryPointFile);\r\n    this._packageName = this.packageJsonLookup.getPackageName(this._packageFolder);\r\n\r\n    this.docItemLoader = new DocItemLoader(this._packageFolder);\r\n\r\n    this._logger = options.logger;\r\n\r\n    // This runs a full type analysis, and then augments the Abstract Syntax Tree (i.e. declarations)\r\n    // with semantic information (i.e. symbols).  The \"diagnostics\" are a subset of the everyday\r\n    // compile errors that would result from a full compilation.\r\n    for (const diagnostic of options.program.getSemanticDiagnostics()) {\r\n      this.reportError('TypeScript: ' + diagnostic.messageText, diagnostic.file, diagnostic.start);\r\n    }\r\n\r\n    this.typeChecker = options.program.getTypeChecker();\r\n\r\n    const rootFile: ts.SourceFile = options.program.getSourceFile(options.entryPointFile);\r\n    if (!rootFile) {\r\n      throw new Error('Unable to load file: ' + options.entryPointFile);\r\n    }\r\n\r\n    this.package = new AstPackage(this, rootFile); // construct members\r\n    this.package.completeInitialization(); // creates ApiDocumentation\r\n    this.package.visitTypeReferencesForAstItem();\r\n  }\r\n\r\n  /**\r\n   * Returns the full name of the package being analyzed.\r\n   */\r\n  public get packageName(): string {\r\n    return this._packageName;\r\n  }\r\n\r\n  /**\r\n   * Returns the folder for the package being analyzed.\r\n   */\r\n  public get packageFolder(): string {\r\n    return this._packageFolder;\r\n  }\r\n\r\n  /**\r\n   * Reports an error message to the registered ApiErrorHandler.\r\n   */\r\n  public reportError(message: string, sourceFile: ts.SourceFile, start: number): void {\r\n    const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(start);\r\n\r\n    // If the file is under the packageFolder, then show a relative path\r\n    const relativePath: string = path.relative(this.packageFolder, sourceFile.fileName);\r\n    const shownPath: string = relativePath.substr(0, 2) === '..' ? sourceFile.fileName : relativePath;\r\n\r\n    // Format the error so that VS Code can follow it.  For example:\r\n    // \"src\\MyClass.ts(15,1): The JSDoc tag \"@blah\" is not supported by AEDoc\"\r\n    this._logger.logError(`${shownPath}(${lineAndCharacter.line + 1},${lineAndCharacter.character + 1}): `\r\n      + message);\r\n  }\r\n\r\n  /**\r\n   * Scans for external package api files and loads them into the docItemLoader member before\r\n   * any API analysis begins.\r\n   *\r\n   * @param externalJsonCollectionPath - an absolute path to to the folder that contains all the external\r\n   * api json files.\r\n   * Ex: if externalJsonPath is './resources', then in that folder\r\n   * are 'es6-collections.api.json', etc.\r\n   */\r\n  public loadExternalPackages(externalJsonCollectionPath: string): void {\r\n    if (!externalJsonCollectionPath) {\r\n      return;\r\n    }\r\n\r\n    const files: string[] = fsx.readdirSync(externalJsonCollectionPath);\r\n    files.forEach(file => {\r\n      if (path.extname(file) === '.json') {\r\n        const externalJsonFilePath: string = path.join(externalJsonCollectionPath, file);\r\n        this.docItemLoader.loadPackageIntoCache(externalJsonFilePath, path.parse(file).name.split('.').shift());\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}