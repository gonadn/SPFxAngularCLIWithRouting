{"version":3,"sources":["extractor/Extractor.ts"],"names":[],"mappings":"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","file":"extractor/Extractor.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport * as ts from 'typescript';\r\nimport lodash = require('lodash');\r\nimport colors = require('colors');\r\n\r\nimport { JsonFile, JsonSchema } from '@microsoft/node-core-library';\r\nimport {\r\n  IExtractorConfig,\r\n  IExtractorProjectConfig,\r\n  IExtractorApiJsonFileConfig\r\n} from './IExtractorConfig';\r\nimport { ExtractorContext } from '../ExtractorContext';\r\nimport { ILogger } from './ILogger';\r\nimport ApiJsonGenerator from '../generators/ApiJsonGenerator';\r\nimport ApiFileGenerator from '../generators/ApiFileGenerator';\r\n\r\n/**\r\n * Options for {@link Extractor.analyzeProject}.\r\n * @public\r\n */\r\nexport interface IAnalyzeProjectOptions {\r\n  /**\r\n   * If omitted, then the {@link IExtractorConfig.project} config will be used by default.\r\n   */\r\n  projectConfig?: IExtractorProjectConfig;\r\n}\r\n\r\n/**\r\n * Runtime options for Extractor.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorOptions {\r\n  /**\r\n   * If IExtractorConfig.project.configType = 'runtime', then the TypeScript compiler state\r\n   * must be provided via this option.\r\n   */\r\n  compilerProgram?: ts.Program;\r\n\r\n  /**\r\n   * Allows the caller to handle API Extractor errors; otherwise, they will be logged\r\n   * to the console.\r\n   */\r\n  customLogger?: Partial<ILogger>;\r\n\r\n  /**\r\n   * Indicates that API Extractor is running as part of a local build, e.g. on developer's\r\n   * machine. This disables certain validation that would normally be performed\r\n   * for a ship/production build. For example, the *.api.ts review file is\r\n   * automatically local in a debug build.\r\n   *\r\n   * The default value is false.\r\n   */\r\n  localBuild?: boolean;\r\n}\r\n\r\n/**\r\n * Used to invoke the API Extractor tool.\r\n * @public\r\n */\r\nexport class Extractor {\r\n  /**\r\n   * The JSON Schema for API Extractor config file (api-extractor-config.schema.json).\r\n   */\r\n  public static jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, './api-extractor.schema.json'));\r\n\r\n  private static _defaultConfig: Partial<IExtractorConfig> = JsonFile.load(path.join(__dirname,\r\n    './api-extractor-defaults.json'));\r\n\r\n  private static _defaultLogger: ILogger = {\r\n    logVerbose: (message: string) => console.log('(Verbose) ' + message),\r\n    logInfo: (message: string) => console.log(message),\r\n    logWarning: (message: string) => console.warn(colors.yellow(message)),\r\n    logError: (message: string) => console.error(colors.red(message))\r\n  };\r\n\r\n  private _config: IExtractorConfig;\r\n  private _program: ts.Program;\r\n  private _localBuild: boolean;\r\n  private _logger: ILogger;\r\n  private _absoluteRootFolder: string;\r\n\r\n  private static _applyConfigDefaults(config: IExtractorConfig): IExtractorConfig {\r\n    // Use the provided config to override the defaults\r\n    const normalized: IExtractorConfig  = lodash.merge(\r\n      lodash.cloneDeep(Extractor._defaultConfig), config);\r\n\r\n    return normalized;\r\n    }\r\n\r\n  public constructor (config: IExtractorConfig, options?: IExtractorOptions) {\r\n    this._logger = lodash.merge(lodash.cloneDeep(Extractor._defaultLogger),\r\n      options.customLogger);\r\n\r\n    this._config = Extractor._applyConfigDefaults(config);\r\n\r\n    this._logger.logVerbose('API Extractor Config: ' + JSON.stringify(this._config));\r\n\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n\r\n    this._localBuild = options.localBuild || false;\r\n\r\n    switch (this._config.compiler.configType) {\r\n      case 'tsconfig':\r\n        const rootFolder: string = this._config.compiler.rootFolder;\r\n        if (!fsx.existsSync(rootFolder)) {\r\n          throw new Error('The root folder does not exist: ' + rootFolder);\r\n        }\r\n\r\n        this._absoluteRootFolder = path.normalize(path.resolve(rootFolder));\r\n\r\n        let tsconfig: {} | undefined = this._config.compiler.overrideTsconfig;\r\n        if (!tsconfig) {\r\n          // If it wasn't overridden, then load it from disk\r\n          tsconfig = JsonFile.load(path.join(this._absoluteRootFolder, 'tsconfig.json'));\r\n        }\r\n\r\n        const commandLine: ts.ParsedCommandLine = ts.parseJsonConfigFileContent(tsconfig,\r\n          ts.sys, this._absoluteRootFolder);\r\n        this._program = ts.createProgram(commandLine.fileNames, commandLine.options);\r\n\r\n        if (commandLine.errors.length > 0) {\r\n          throw new Error('Error parsing tsconfig.json content: ' + commandLine.errors[0].messageText);\r\n        }\r\n\r\n        break;\r\n\r\n      case 'runtime':\r\n        if (!options.compilerProgram) {\r\n          throw new Error('The compiler.configType=runtime configuration was specified,'\r\n            + ' but the caller did not provide an options.compilerProgram object');\r\n        }\r\n\r\n        this._program = options.compilerProgram;\r\n        const rootDir: string = this._program.getCompilerOptions().rootDir;\r\n        if (!rootDir) {\r\n          throw new Error('The provided compiler state does not specify a root folder');\r\n        }\r\n        if (!fsx.existsSync(rootDir)) {\r\n          throw new Error('The rootDir does not exist: ' + rootDir);\r\n        }\r\n        this._absoluteRootFolder = path.resolve(rootDir);\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Unsupported config type');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invokes the API Extractor engine, using the configuration that was passed to the constructor.\r\n   */\r\n  public analyzeProject(options?: IAnalyzeProjectOptions): void {\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n\r\n    const projectConfig: IExtractorProjectConfig = options.projectConfig ?\r\n      options.projectConfig : this._config.project;\r\n\r\n    const context: ExtractorContext = new ExtractorContext({\r\n      program: this._program,\r\n      entryPointFile: path.resolve(this._absoluteRootFolder, projectConfig.entryPointSourceFile),\r\n      logger: this._logger,\r\n      policies: this._config.policies\r\n    });\r\n\r\n    for (const externalJsonFileFolder of projectConfig.externalJsonFileFolders) {\r\n      context.loadExternalPackages(path.resolve(this._absoluteRootFolder, externalJsonFileFolder));\r\n    }\r\n\r\n    const packageBaseName: string = path.basename(context.packageName);\r\n\r\n    const apiJsonFileConfig: IExtractorApiJsonFileConfig = this._config.apiJsonFile;\r\n\r\n    if (apiJsonFileConfig.enabled) {\r\n      const outputFolder: string = path.resolve(this._absoluteRootFolder,\r\n        apiJsonFileConfig.outputFolder);\r\n\r\n      fsx.mkdirsSync(outputFolder);\r\n\r\n      const jsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n      const apiJsonFilename: string = path.join(outputFolder, packageBaseName + '.api.json');\r\n\r\n      this._logger.logVerbose('Writing: ' + apiJsonFilename);\r\n      jsonGenerator.writeJsonFile(apiJsonFilename, context);\r\n    }\r\n\r\n    if (this._config.apiReviewFile.enabled) {\r\n      const generator: ApiFileGenerator = new ApiFileGenerator();\r\n      const apiReviewFilename: string = packageBaseName + '.api.ts';\r\n\r\n      const actualApiReviewPath: string = path.resolve(this._absoluteRootFolder,\r\n        this._config.apiReviewFile.tempFolder, apiReviewFilename);\r\n      const actualApiReviewShortPath: string = this._getShortFilePath(actualApiReviewPath);\r\n\r\n      const expectedApiReviewPath: string = path.resolve(this._absoluteRootFolder,\r\n        this._config.apiReviewFile.apiReviewFolder, apiReviewFilename);\r\n      const expectedApiReviewShortPath: string = this._getShortFilePath(expectedApiReviewPath);\r\n\r\n      const actualApiReviewContent: string = generator.generateApiFileContent(context);\r\n\r\n      // Write the actual file\r\n      fsx.mkdirsSync(path.dirname(actualApiReviewPath));\r\n      fsx.writeFileSync(actualApiReviewPath, actualApiReviewContent);\r\n\r\n      // Compare it against the expected file\r\n      if (fsx.existsSync(expectedApiReviewPath)) {\r\n        const expectedApiReviewContent: string = fsx.readFileSync(expectedApiReviewPath).toString();\r\n\r\n        if (!ApiFileGenerator.areEquivalentApiFileContents(actualApiReviewContent, expectedApiReviewContent)) {\r\n          if (!this._localBuild) {\r\n            // For production, issue a warning that will break the CI build.\r\n            this._logger.logWarning('You have changed the public API signature for this project.'\r\n              // @microsoft/gulp-core-build seems to run JSON.stringify() on the error messages for some reason,\r\n              // so try to avoid escaped characters:\r\n              + ` Please overwrite ${expectedApiReviewShortPath} with a`\r\n              + ` copy of ${actualApiReviewShortPath}`\r\n              + ' and then request an API review. See the Git repository README.md for more info.');\r\n          } else {\r\n            // For a local build, just copy the file automatically.\r\n            this._logger.logWarning('You have changed the public API signature for this project.'\r\n              + ` Updating ${expectedApiReviewShortPath}`);\r\n\r\n            fsx.writeFileSync(expectedApiReviewPath, actualApiReviewContent);\r\n          }\r\n        } else {\r\n          this._logger.logVerbose(`The API signature is up to date: ${actualApiReviewShortPath}`);\r\n        }\r\n      } else {\r\n        // NOTE: This warning seems like a nuisance, but it has caught genuine mistakes.\r\n        // For example, when projects were moved into category folders, the relative path for\r\n        // the API review files ended up in the wrong place.\r\n        this._logger.logError(`The API review file has not been set up. Do this by copying ${actualApiReviewShortPath}`\r\n          + ` to ${expectedApiReviewShortPath} and committing it.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _getShortFilePath(absolutePath: string): string {\r\n    if (!path.isAbsolute(absolutePath)) {\r\n      throw new Error('Expected absolute path: ' + absolutePath);\r\n    }\r\n    return path.relative(this._absoluteRootFolder, absolutePath).replace(/\\\\/g, '/');\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\src"}