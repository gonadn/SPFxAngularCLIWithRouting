{"version":3,"sources":["extractor/IExtractorConfig.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","file":"extractor/IExtractorConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * With this configuration, API Extractor configures the compiler based on settings that\r\n * it finds in the project's tsconfig.json file.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorTsconfigCompilerConfig {\r\n  configType: 'tsconfig';\r\n\r\n  /**\r\n   * The root folder for the project.\r\n   * @remarks\r\n   * This folder typically contains the tsconfig.json and package.json config files.\r\n   */\r\n  rootFolder: string;\r\n\r\n  /**\r\n   * Override the tsconfig.json file contents.\r\n   *\r\n   * @remarks\r\n   * Provides already parsed tsconfig.json contents conforming to the TypeScript tsconfig schema:\r\n   * http://json.schemastore.org/tsconfig\r\n   *\r\n   * If omitted, then by default the tsconfig.json file will be loaded from the root folder.\r\n   */\r\n  overrideTsconfig?: { };\r\n}\r\n\r\n/**\r\n * With this configuration, API Extractor is configured using an already prepared compiler state\r\n * that is provided programmatically at runtime.  This can potentially enable faster builds,\r\n * by reusing the same compiler invocation for tsc, tslint, and API Extractor.\r\n *\r\n * If configType='runtime' is specified, then IExtractorRuntimeOptions.compilerProgram must be\r\n * provided.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorRuntimeCompilerConfig {\r\n  configType: 'runtime';\r\n}\r\n\r\n/**\r\n * Describes a specific project that will be analyzed.  In principle, multiple individual\r\n * projects can be processed while reusing a common compiler state.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorProjectConfig {\r\n  /**\r\n   * Specifies the TypeScript source file that will be treated as the entry point\r\n   * for compilation.  This cannot always be inferred automatically.  (The package.json\r\n   * \"main\" and \"typings\" field point to the compiler output files, but this does not\r\n   * guarantee a specific location for the source files.)\r\n   */\r\n  entryPointSourceFile: string;\r\n\r\n  /**\r\n   * Indicates folders containing additional APJ JSON files (*.api.json) that will be\r\n   * consulted during the analysis.  This is useful for providing annotations for\r\n   * external packages that were not built using API Extractor.\r\n   */\r\n  externalJsonFileFolders?: string[];\r\n}\r\n\r\n/**\r\n * These policies determine how API Extractor validates various best practices for API design.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorPoliciesConfig {\r\n  /**\r\n   * Controls how API Extractor treats the TypeScript namespace keyword:\r\n   *\r\n   * conservative - (the default) namespaces may only be used to represent tables of constants\r\n   *\r\n   * permissive - arbitrary nesting of namespaces is allowed\r\n   */\r\n  namespaceSupport: 'conservative' | 'permissive';\r\n}\r\n\r\n/**\r\n * Configures how the API review files (*.api.ts) will be generated.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorApiReviewFileConfig {\r\n  /**\r\n   * Whether to generate review files at all.  The default is true.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * The file path of the folder containing API review file, relative to\r\n   * the project folder.  This is part of an API review workflow:  During a build,\r\n   * the API Extractor will output an API file, e.g. \"my-project/temp/my-project.api.ts\".\r\n   * It will then compare this file against the last reviewed file,\r\n   * e.g. \"../api-review/my-project.api.ts\" (assuming that apiReviewFolder is \"../api-review\").\r\n   * If the files are different, the build will fail with an error message that instructs\r\n   * the developer to update the approved file, and then commit it to Git.  When they\r\n   * create a Pull Request, a branch policy will look for changes under \"api-review/*\"\r\n   * and require signoff from the appropriate reviewers.\r\n   *\r\n   * The default value is \"./etc\".\r\n   *\r\n   * Example: \"config\" (for a standalone project)\r\n   * Example: \"../../common/api-review\"  (for a Git repository with Rush)\r\n   */\r\n  apiReviewFolder?: string;\r\n\r\n  /**\r\n   * The *.api.ts report is saved into this folder.  During a production build\r\n   * (i.e. when IExtractorRuntimeOptions.productionBuild=true) the temporary file will\r\n   * be compared with the file in apiReviewFolder; if there are differences, and error\r\n   * will be reported.  During a non-production build, the temporary file will be\r\n   * automatically copied to the apiReviewFolder.\r\n   *\r\n   * The default value is \"./temp\".\r\n   */\r\n  tempFolder?: string;\r\n}\r\n\r\n/**\r\n * Configures how the API JSON files (*.api.json) will be generated.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorApiJsonFileConfig {\r\n  /**\r\n   * Whether to generate API JSON files at all.  The default is true.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * Specifies where the *.api.json file should be written.\r\n   *\r\n   * The default value is \"./dist\"\r\n   */\r\n  outputFolder?: string;\r\n}\r\n\r\n/**\r\n * Configuration options for the API Extractor tool.  These options can be loaded\r\n * from a JSON config file.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorConfig {\r\n  /**\r\n   * Determines how the TypeScript compiler will be invoked.\r\n   * The compiler.configType selects the type of configuration;\r\n   * Different options are available according to the configuration type.\r\n   */\r\n  compiler: IExtractorTsconfigCompilerConfig | IExtractorRuntimeCompilerConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorPoliciesConfig}\r\n   */\r\n  policies?: IExtractorPoliciesConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorProjectConfig}\r\n   */\r\n  project: IExtractorProjectConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorApiReviewFileConfig}\r\n   */\r\n  apiReviewFile?: IExtractorApiReviewFileConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorApiJsonFileConfig}\r\n   */\r\n  apiJsonFile?: IExtractorApiJsonFileConfig;\r\n}\r\n"],"sourceRoot":"..\\..\\src"}