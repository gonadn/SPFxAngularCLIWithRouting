{"version":3,"sources":["markup/MarkupElement.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","file":"markup/MarkupElement.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IApiItemReference } from '../api/ApiItem';\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * A block of plain text, possibly with simple formatting such as bold or italics.\r\n *\r\n * @public\r\n */\r\nexport interface IMarkupText {\r\n  /** The kind of markup element */\r\n  kind: 'text';\r\n\r\n  /**\r\n   * The plain text content to display.\r\n   * @remarks\r\n   * If this text contains symbols such as HTML codes, they will be rendered literally,\r\n   * without any special formatting.\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * Whether the text should be formatted using boldface\r\n   */\r\n  bold?: boolean;\r\n\r\n  /**\r\n   * Whether the text should be formatted using italics\r\n   */\r\n  italics?: boolean;\r\n}\r\n\r\n/**\r\n * Indicates the the text should be colorized according to the specified language syntax.\r\n * If \"plain\" is specified, then no highlighting should be performed.\r\n *\r\n * @public\r\n */\r\nexport type MarkupHighlighter = 'javascript' | 'plain';\r\n\r\n/**\r\n * Source code shown in a fixed-width font, with syntax highlighting.\r\n * @remarks\r\n * NOTE: IMarkupHighlightedText is just a span of text, whereas IMarkupCodeBox is a box showing a larger code sample.\r\n * @public\r\n */\r\nexport interface IMarkupHighlightedText {\r\n  /** The kind of markup element */\r\n  kind: 'code';\r\n\r\n  /**\r\n   * The text content to display.\r\n   * @remarks\r\n   * This content will be highlighted using the specified syntax highlighter.\r\n   * If this text contains symbols such as HTML codes, they will be rendered literally.\r\n   */\r\n  text: string;\r\n\r\n  /** Indicates the syntax highlighting that will be applied to this text */\r\n  highlighter: MarkupHighlighter;\r\n}\r\n\r\n/**\r\n * Represents markup that can be used as the link text for a hyperlink\r\n *\r\n * @public\r\n */\r\nexport type MarkupLinkTextElement = IMarkupText | IMarkupHighlightedText;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * A hyperlink to an API item\r\n * @public\r\n */\r\nexport interface IMarkupApiLink {\r\n  /** The kind of markup element */\r\n  kind: 'api-link';\r\n\r\n  /** The link text */\r\n  elements: MarkupLinkTextElement[];\r\n\r\n  /** The API item that will serve as the hyperlink target */\r\n  target: IApiItemReference;\r\n}\r\n\r\n/**\r\n * A hyperlink to an internet URL\r\n * @public\r\n */\r\nexport interface IMarkupWebLink {\r\n  /** The kind of markup element */\r\n  kind: 'web-link';\r\n\r\n  /** The link text */\r\n  elements: MarkupLinkTextElement[];\r\n\r\n  /** The internet URL that will serve as the hyperlink target */\r\n  targetUrl: string;\r\n}\r\n\r\n/**\r\n * A paragraph separator, similar to the \"<p>\" tag in HTML\r\n * @public\r\n */\r\nexport interface IMarkupParagraph {\r\n  /** The kind of markup element */\r\n  kind: 'paragraph';\r\n}\r\n\r\n/**\r\n * A line break, similar to the \"<br>\" tag in HTML.\r\n * @public\r\n */\r\nexport interface IMarkupLineBreak {\r\n  /** The kind of markup element */\r\n  kind: 'break';\r\n}\r\n\r\n/**\r\n * Represents basic text consisting of paragraphs and links (without structures such as headers or tables).\r\n *\r\n * @public\r\n */\r\nexport type MarkupBasicElement = MarkupLinkTextElement | IMarkupApiLink | IMarkupWebLink | IMarkupParagraph\r\n  | IMarkupLineBreak;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * A top-level heading\r\n * @public\r\n */\r\nexport interface IMarkupHeading1 {\r\n  /** The kind of markup element */\r\n  kind: 'heading1';\r\n\r\n  /**\r\n   * The heading title\r\n   * @remarks\r\n   * Formatting such as bold/italics are not supported in headings.\r\n   * If this text contains symbols such as HTML codes, they will be rendered literally.\r\n   */\r\n  text: string;\r\n}\r\n\r\n/**\r\n * A sub heading\r\n * @public\r\n */\r\nexport interface IMarkupHeading2 {\r\n  /** The kind of markup element */\r\n  kind: 'heading2';\r\n\r\n  /** {@inheritdoc IMarkupHeading1.text} */\r\n  text: string;\r\n}\r\n\r\n/**\r\n * A box containing source code with syntax highlighting\r\n * @remarks\r\n * NOTE: IMarkupHighlightedText is just a span of text, whereas IMarkupCodeBox is a box showing a larger code sample.\r\n * @public\r\n */\r\nexport interface IMarkupCodeBox {\r\n  /** The kind of markup element */\r\n  kind: 'code-box';\r\n\r\n  /** {@inheritdoc IMarkupHighlightedText.text} */\r\n  text: string;\r\n  highlighter: MarkupHighlighter;\r\n}\r\n\r\n/**\r\n * A call-out box containing an informational note\r\n * @public\r\n */\r\nexport interface IMarkupNoteBox {\r\n  /** The kind of markup element */\r\n  kind: 'note-box';\r\n  elements: MarkupBasicElement[];\r\n}\r\n\r\n/**\r\n * A table, with an optional header row\r\n * @public\r\n */\r\nexport interface IMarkupTable {\r\n  /** The kind of markup element */\r\n  kind: 'table';\r\n  header?: IMarkupTableRow;\r\n  rows: IMarkupTableRow[];\r\n}\r\n\r\n/**\r\n * Represents structured text that contains headings, tables, and boxes.  These are the top-level\r\n * elements of a IMarkupPage.\r\n *\r\n * @public\r\n */\r\nexport type MarkupStructuredElement = MarkupBasicElement | IMarkupHeading1 | IMarkupHeading2 | IMarkupCodeBox\r\n  | IMarkupNoteBox | IMarkupTable;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * A cell inside an IMarkupTableRow element.\r\n *\r\n * @public\r\n */\r\nexport interface IMarkupTableCell {\r\n  /** The kind of markup element */\r\n  kind: 'table-cell';\r\n\r\n  /** The text content for the table cell */\r\n  elements: MarkupBasicElement[];\r\n}\r\n\r\n/**\r\n * A row inside an IMarkupTable element.\r\n *\r\n * @public\r\n */\r\nexport interface IMarkupTableRow {\r\n  /** The kind of markup element */\r\n  kind: 'table-row';\r\n  cells: IMarkupTableCell[];\r\n}\r\n\r\n/**\r\n * Represents an entire page.\r\n *\r\n * @public\r\n */\r\nexport interface IMarkupPage {\r\n  /** The kind of markup element */\r\n  kind: 'page';\r\n\r\n  breadcrumb: MarkupBasicElement[];\r\n  title: string;\r\n\r\n  elements: MarkupStructuredElement[];\r\n}\r\n\r\n/**\r\n * The super set of all markup interfaces, used e.g. for functions that recursively traverse\r\n * the tree.\r\n *\r\n * @public\r\n */\r\nexport type MarkupElement = MarkupStructuredElement | IMarkupTableCell | IMarkupTableRow | IMarkupPage;\r\n"],"sourceRoot":"..\\..\\src"}