{"version":3,"sources":["generators/AstItemVisitor.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,kDAA2C;AAE3C,4CAAqC;AACrC,sDAA+C;AAC/C,oDAA6C;AAC7C,gEAAyD;AAEzD,gDAAyC;AACzC,sDAA+C;AAC/C,oDAA6C;AAC7C,gEAAyD;AAEzD;;;IAGI;AACJ;IACY,KAAK,CAAC,OAAgB,EAAE,SAAkB;QAClD,EAAE,CAAC,CAAC,OAAO,YAAY,2BAAiB,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,sBAAsB,CAAC,OAA4B,EAAE,SAAS,CAAC,CAAC;QACvE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,iBAAO,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,YAAY,CAAC,OAAkB,EAAE,SAAS,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,sBAAY,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,iBAAiB,CAAC,OAAuB,EAAE,SAAS,CAAC,CAAC;QAC7D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,qBAAW,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAsB,EAAE,SAAS,CAAC,CAAC;QAC3D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,oBAAU,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,eAAe,CAAC,OAAqB,EAAE,SAAS,CAAC,CAAC;QACzD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,qBAAW,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAsB,EAAE,SAAS,CAAC,CAAC;QAC3D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,mBAAS,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,cAAc,CAAC,OAAoB,EAAE,SAAS,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,sBAAY,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,iBAAiB,CAAC,OAAuB,EAAE,SAAS,CAAC,CAAC;QAC7D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,2BAAiB,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,sBAAsB,CAAC,OAA4B,EAAE,SAAS,CAAC,CAAC;QACvE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAkBS,cAAc,CAAC,SAAoB,EAAE,SAAkB;QAC/D,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC5C,CAAC;IAES,gBAAgB,CAAC,WAAwB,EAAE,SAAkB;QACrE,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAC9C,CAAC;CACF;AAED,kBAAe,cAAc,CAAC","file":"generators/AstItemVisitor.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport AstPackage from '../ast/AstPackage';\r\nimport AstItem from '../ast/AstItem';\r\nimport AstEnum from '../ast/AstEnum';\r\nimport AstEnumValue from '../ast/AstEnumValue';\r\nimport AstFunction from '../ast/AstFunction';\r\nimport AstStructuredType from '../ast/AstStructuredType';\r\nimport AstMember from '../ast/AstMember';\r\nimport AstMethod from '../ast/AstMethod';\r\nimport AstNamespace from '../ast/AstNamespace';\r\nimport AstProperty from '../ast/AstProperty';\r\nimport AstModuleVariable from '../ast/AstModuleVariable';\r\n\r\n/**\r\n  * This is a helper class that provides a standard way to walk the AstItem\r\n  * abstract syntax tree.\r\n  */\r\nabstract class AstItemVisitor {\r\n  protected visit(astItem: AstItem, refObject?: Object): void {\r\n    if (astItem instanceof AstStructuredType) {\r\n      this.visitAstStructuredType(astItem as AstStructuredType, refObject);\r\n    } else if (astItem instanceof AstEnum) {\r\n      this.visitAstEnum(astItem as AstEnum, refObject);\r\n    } else if (astItem instanceof AstEnumValue) {\r\n      this.visitAstEnumValue(astItem as AstEnumValue, refObject);\r\n    } else if (astItem instanceof AstFunction) {\r\n      this.visitAstFunction(astItem as AstFunction, refObject);\r\n    } else if (astItem instanceof AstPackage) {\r\n      this.visitAstPackage(astItem as AstPackage, refObject);\r\n    } else if (astItem instanceof AstProperty) {\r\n      this.visitAstProperty(astItem as AstProperty, refObject);\r\n    } else if (astItem instanceof AstMethod) {\r\n      this.visitAstMethod(astItem as AstMethod, refObject);\r\n    } else if (astItem instanceof AstNamespace) {\r\n      this.visitAstNamespace(astItem as AstNamespace, refObject);\r\n    } else if (astItem instanceof AstModuleVariable) {\r\n      this.visitAstModuleVariable(astItem as AstModuleVariable, refObject);\r\n    } else {\r\n      throw new Error('Not implemented');\r\n    }\r\n  }\r\n\r\n  protected abstract visitAstStructuredType(astStructuredType: AstStructuredType, refObject?: Object): void;\r\n\r\n  protected abstract visitAstEnum(astEnum: AstEnum, refObject?: Object): void;\r\n\r\n  protected abstract visitAstEnumValue(astEnumValue: AstEnumValue, refObject?: Object): void;\r\n\r\n  protected abstract visitAstFunction(astFunction: AstFunction, refObject?: Object): void;\r\n\r\n  protected abstract visitAstPackage(astPackage: AstPackage, refObject?: Object): void;\r\n\r\n  protected abstract visitAstMember(astMember: AstMember, refObject?: Object): void;\r\n\r\n  protected abstract visitAstNamespace(astNamespace: AstNamespace, refObject?: Object): void;\r\n\r\n  protected abstract visitAstModuleVariable(astModuleVariable: AstModuleVariable, refObject?: Object): void;\r\n\r\n  protected visitAstMethod(astMethod: AstMethod, refObject?: Object): void {\r\n    this.visitAstMember(astMethod, refObject);\r\n  }\r\n\r\n  protected visitAstProperty(astProperty: AstProperty, refObject?: Object): void {\r\n    this.visitAstMember(astProperty, refObject);\r\n  }\r\n}\r\n\r\nexport default AstItemVisitor;\r\n"],"sourceRoot":"..\\..\\src"}