{"version":3,"sources":["generators/ApiFileGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yBAAyB;AAMzB,4CAAsD;AACtD,qDAA8C;AAC9C,kDAA2C;AAI3C,sDAA+C;AAC/C,oDAAiD;AAEjD;;;;;;;;;;GAUG;AACH,sBAAsC,SAAQ,wBAAc;IAA5D;;QACY,oBAAe,GAAmB,IAAI,wBAAc,EAAE,CAAC;IAuNnE,CAAC;IA9MC;;;;;;OAMG;IACI,MAAM,CAAC,4BAA4B,CAAC,iBAAyB,EAAE,mBAA2B;QAC/F,wCAAwC;QACxC,MAAM,gBAAgB,GAAW,iBAAiB,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC1E,MAAM,kBAAkB,GAAW,mBAAmB,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC9E,MAAM,CAAC,gBAAgB,KAAK,kBAAkB,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,cAAsB,EAAE,OAAyB;QACnE,MAAM,WAAW,GAAW,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QACjE,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;IAChD,CAAC;IAEM,sBAAsB,CAAC,OAAyB;QACrD,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAC5B,oBAAoB;QACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5B,MAAM,WAAW,GAAW,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACtF,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAES,sBAAsB,CAAC,iBAAoC;QACnE,MAAM,eAAe,GAAW,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;QAEvE,EAAE,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;YAC7D,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;YACvD,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACpC,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,KAAK,qBAAW,CAAC,WAAW,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;QAEvD,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;YAC/B,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,KAAK,qBAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvD,mEAAmE;gBACnE,8DAA8D;gBAC9D,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YACzC,CAAC;YAED,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,iBAAiB,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACnB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAES,YAAY,CAAC,OAAgB;QACrC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAElC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC;QAEzD,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;YAC/B,MAAM,OAAO,GAAc,OAAO,CAAC,oBAAoB,EAAE,CAAC;YAC1D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;gBAChD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;YACpE,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAES,iBAAiB,CAAC,YAA0B;QACpD,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAEvC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAChE,CAAC;IAES,eAAe,CAAC,UAAsB;QAC9C,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,UAAU,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACpB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;YACjC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC;IAES,iBAAiB,CAAC,YAA0B;QACpD,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAEvC,6DAA6D;QAC7D,4BAA4B;QAC5B,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,UAAU,YAAY,CAAC,IAAI,IAAI,CAAC,CAAC;QAEhE,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;YAC/B,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACpB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;gBACjC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAES,sBAAsB,CAAC,iBAAoC;QACnE,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QAE5C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,iBAAiB,CAAC,IAAI,KAAK,iBAAiB,CAAC,IAAI,MAAM,iBAAiB,CAAC,KAAK,GAAG,CAAC,CAAC;IACnH,CAAC;IAES,cAAc,CAAC,SAAoB;QAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QACtC,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,CAAC;QAE3D,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;YAC7B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAClC,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IAES,gBAAgB,CAAC,WAAwB;QACjD,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACtC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACK,mBAAmB,CAAC,OAAgB;QAC1C,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC7B,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,EAAE,CAAC,CAAC,OAAO,YAAY,oBAAU,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3E,KAAK,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QACzD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,MAAM,GAAW,EAAE,CAAC;YACxB,MAAM,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;gBACzC,KAAK,uBAAU,CAAC,QAAQ;oBACtB,MAAM,IAAI,WAAW,CAAC;oBACtB,KAAK,CAAC;gBACR,KAAK,uBAAU,CAAC,KAAK;oBACnB,MAAM,IAAI,QAAQ,CAAC;oBACnB,KAAK,CAAC;gBACR,KAAK,uBAAU,CAAC,IAAI;oBAClB,MAAM,IAAI,OAAO,CAAC;oBAClB,KAAK,CAAC;gBACR,KAAK,uBAAU,CAAC,MAAM;oBACpB,MAAM,IAAI,SAAS,CAAC;oBACpB,KAAK,CAAC;YACV,CAAC;YAED,+CAA+C;YAC/C,2DAA2D;YAC3D,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,MAAM,IAAI,GAAG,CAAC;gBAChB,CAAC;gBACD,MAAM,IAAI,aAAa,CAAC;YAC1B,CAAC;YAED,gFAAgF;YAChF,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,KAAK,CAAC,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAChE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,MAAM,IAAI,GAAG,CAAC;gBAChB,CAAC;gBACD,MAAM,IAAI,gBAAgB,CAAC;YAC7B,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,CAAC;QACH,CAAC;QAED,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEO,cAAc,CAAC,OAAgB;QACrC,MAAM,KAAK,GAAa,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAS,KAAK,WAAW,GAAG,CAAC,CAAC,CAAC;QAC7E,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEO,qBAAqB,CAAC,KAAe;QAC3C,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,4FAA4F;YAC5F,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;QACnC,CAAC;IACH,CAAC;CACF;AAxND,mCAwNC","file":"generators/ApiFileGenerator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fs from 'fs';\r\nimport { ExtractorContext } from '../ExtractorContext';\r\nimport AstStructuredType from '../ast/AstStructuredType';\r\nimport AstEnum from '../ast/AstEnum';\r\nimport AstEnumValue from '../ast/AstEnumValue';\r\nimport AstFunction from '../ast/AstFunction';\r\nimport AstItem, { AstItemKind } from '../ast/AstItem';\r\nimport AstItemVisitor from './AstItemVisitor';\r\nimport AstPackage from '../ast/AstPackage';\r\nimport AstMember from '../ast/AstMember';\r\nimport AstNamespace from '../ast/AstNamespace';\r\nimport AstModuleVariable from '../ast/AstModuleVariable';\r\nimport IndentedWriter from '../IndentedWriter';\r\nimport { ReleaseTag } from '../aedoc/ReleaseTag';\r\n\r\n/**\r\n * For a library such as \"example-package\", ApiFileGenerator generates the \"example-package.api.ts\"\r\n * report which is used to detect API changes.  The output is pseudocode whose syntax is similar\r\n * but not identical to a \"*.d.ts\" typings file.  The output file is designed to be committed to\r\n * Git with a branch policy that will trigger an API review workflow whenever the file contents\r\n * have changed.  For example, the API file indicates *whether* a class has been documented,\r\n * but it does not include the documentation text (since minor text changes should not require\r\n * an API review).\r\n *\r\n * @public\r\n */\r\nexport default class ApiFileGenerator extends AstItemVisitor {\r\n  protected _indentedWriter: IndentedWriter = new IndentedWriter();\r\n\r\n  /**\r\n   * We don't want to require documentation for any properties that occur\r\n   * anywhere within a TypeLiteral. If this value is above 0, then we are\r\n   * visiting something within a TypeLiteral.\r\n   */\r\n  private _insideTypeLiteral: number;\r\n\r\n  /**\r\n   * Compares the contents of two API files that were created using ApiFileGenerator,\r\n   * and returns true if they are equivalent.  Note that these files are not normally edited\r\n   * by a human; the \"equivalence\" comparison here is intended to ignore spurious changes that\r\n   * might be introduced by a tool, e.g. Git newline normalization or an editor that strips\r\n   * whitespace when saving.\r\n   */\r\n  public static areEquivalentApiFileContents(actualFileContent: string, expectedFileContent: string): boolean {\r\n    // NOTE: \"\\s\" also matches \"\\r\" and \"\\n\"\r\n    const normalizedActual: string = actualFileContent.replace(/[\\s]+/g, ' ');\r\n    const normalizedExpected: string = expectedFileContent.replace(/[\\s]+/g, ' ');\r\n    return normalizedActual === normalizedExpected;\r\n  }\r\n\r\n  /**\r\n   * Generates the report and writes it to disk.\r\n   *\r\n   * @param reportFilename - The output filename\r\n   * @param analyzer       - An Analyzer object representing the input project.\r\n   */\r\n  public writeApiFile(reportFilename: string, context: ExtractorContext): void {\r\n    const fileContent: string = this.generateApiFileContent(context);\r\n    fs.writeFileSync(reportFilename, fileContent);\r\n  }\r\n\r\n  public generateApiFileContent(context: ExtractorContext): string {\r\n    this._insideTypeLiteral = 0;\r\n    // Normalize to CRLF\r\n    this.visit(context.package);\r\n    const fileContent: string = this._indentedWriter.toString().replace(/\\r?\\n/g, '\\r\\n');\r\n    return fileContent;\r\n  }\r\n\r\n  protected visitAstStructuredType(astStructuredType: AstStructuredType): void {\r\n    const declarationLine: string = astStructuredType.getDeclarationLine();\r\n\r\n    if (astStructuredType.documentation.preapproved) {\r\n      this._indentedWriter.writeLine('// @internal (preapproved)');\r\n      this._indentedWriter.writeLine(declarationLine + ' {');\r\n      this._indentedWriter.writeLine('}');\r\n      return;\r\n    }\r\n\r\n    if (astStructuredType.kind !== AstItemKind.TypeLiteral) {\r\n      this._writeAedocSynopsis(astStructuredType);\r\n    }\r\n\r\n    this._indentedWriter.writeLine(declarationLine + ' {');\r\n\r\n    this._indentedWriter.indentScope(() => {\r\n      if (astStructuredType.kind === AstItemKind.TypeLiteral) {\r\n        // Type literals don't have normal JSDoc.  Write only the warnings,\r\n        // and put them after the '{' since the declaration is nested.\r\n        this._writeWarnings(astStructuredType);\r\n      }\r\n\r\n      for (const member of astStructuredType.getSortedMemberItems()) {\r\n        this.visit(member);\r\n        this._indentedWriter.writeLine();\r\n      }\r\n    });\r\n\r\n    this._indentedWriter.write('}');\r\n  }\r\n\r\n  protected visitAstEnum(astEnum: AstEnum): void {\r\n    this._writeAedocSynopsis(astEnum);\r\n\r\n    this._indentedWriter.writeLine(`enum ${astEnum.name} {`);\r\n\r\n    this._indentedWriter.indentScope(() => {\r\n      const members: AstItem[] = astEnum.getSortedMemberItems();\r\n      for (let i: number = 0; i < members.length; ++i) {\r\n        this.visit(members[i]);\r\n        this._indentedWriter.writeLine(i < members.length - 1 ? ',' : '');\r\n      }\r\n    });\r\n\r\n    this._indentedWriter.write('}');\r\n  }\r\n\r\n  protected visitAstEnumValue(astEnumValue: AstEnumValue): void {\r\n    this._writeAedocSynopsis(astEnumValue);\r\n\r\n    this._indentedWriter.write(astEnumValue.getDeclarationLine());\r\n  }\r\n\r\n  protected visitAstPackage(astPackage: AstPackage): void {\r\n    for (const astItem of astPackage.getSortedMemberItems()) {\r\n      this.visit(astItem);\r\n      this._indentedWriter.writeLine();\r\n      this._indentedWriter.writeLine();\r\n    }\r\n\r\n    this._writeAedocSynopsis(astPackage);\r\n  }\r\n\r\n  protected visitAstNamespace(astNamespace: AstNamespace): void {\r\n    this._writeAedocSynopsis(astNamespace);\r\n\r\n    // We have decided to call the astNamespace a 'module' in our\r\n    // public API documentation.\r\n    this._indentedWriter.writeLine(`module ${astNamespace.name} {`);\r\n\r\n    this._indentedWriter.indentScope(() => {\r\n      for (const astItem of astNamespace.getSortedMemberItems()) {\r\n        this.visit(astItem);\r\n        this._indentedWriter.writeLine();\r\n        this._indentedWriter.writeLine();\r\n      }\r\n    });\r\n\r\n    this._indentedWriter.write('}');\r\n  }\r\n\r\n  protected visitAstModuleVariable(astModuleVariable: AstModuleVariable): void {\r\n    this._writeAedocSynopsis(astModuleVariable);\r\n\r\n    this._indentedWriter.write(`${astModuleVariable.name}: ${astModuleVariable.type} = ${astModuleVariable.value};`);\r\n  }\r\n\r\n  protected visitAstMember(astMember: AstMember): void {\r\n    if (astMember.documentation) {\r\n      this._writeAedocSynopsis(astMember);\r\n    }\r\n\r\n    this._indentedWriter.write(astMember.getDeclarationLine());\r\n\r\n    if (astMember.typeLiteral) {\r\n      this._insideTypeLiteral += 1;\r\n      this.visit(astMember.typeLiteral);\r\n      this._insideTypeLiteral -= 1;\r\n    }\r\n  }\r\n\r\n  protected visitAstFunction(astFunction: AstFunction): void {\r\n    this._writeAedocSynopsis(astFunction);\r\n    this._indentedWriter.write(astFunction.getDeclarationLine());\r\n  }\r\n\r\n  /**\r\n   * Writes a synopsis of the AEDoc comments, which indicates the release tag,\r\n   * whether the item has been documented, and any warnings that were detected\r\n   * by the analysis.\r\n   */\r\n  private _writeAedocSynopsis(astItem: AstItem): void {\r\n    this._writeWarnings(astItem);\r\n    const lines: string[] = [];\r\n\r\n    if (astItem instanceof AstPackage && !astItem.documentation.summary.length) {\r\n      lines.push('(No packageDescription for this package)');\r\n    } else {\r\n      let footer: string = '';\r\n      switch (astItem.documentation.releaseTag) {\r\n        case ReleaseTag.Internal:\r\n          footer += '@internal';\r\n          break;\r\n        case ReleaseTag.Alpha:\r\n          footer += '@alpha';\r\n          break;\r\n        case ReleaseTag.Beta:\r\n          footer += '@beta';\r\n          break;\r\n        case ReleaseTag.Public:\r\n          footer += '@public';\r\n          break;\r\n      }\r\n\r\n      // deprecatedMessage is initialized by default,\r\n      // this ensures it has contents before adding '@deprecated'\r\n      if (astItem.documentation.deprecatedMessage.length > 0) {\r\n        if (footer) {\r\n          footer += ' ';\r\n        }\r\n        footer += '@deprecated';\r\n      }\r\n\r\n      // If we are anywhere inside a TypeLiteral, _insideTypeLiteral is greater than 0\r\n      if (this._insideTypeLiteral === 0 && astItem.needsDocumentation) {\r\n        if (footer) {\r\n          footer += ' ';\r\n        }\r\n        footer += '(undocumented)';\r\n      }\r\n\r\n      if (footer) {\r\n        lines.push(footer);\r\n      }\r\n    }\r\n\r\n    this._writeLinesAsComments(lines);\r\n  }\r\n\r\n  private _writeWarnings(astItem: AstItem): void {\r\n    const lines: string[] = astItem.warnings.map((x: string) => 'WARNING: ' + x);\r\n    this._writeLinesAsComments(lines);\r\n  }\r\n\r\n  private _writeLinesAsComments(lines: string[]): void {\r\n    if (lines.length) {\r\n      // Write the lines prefixed by slashes.  If there  are multiple lines, add \"//\" to each line\r\n      this._indentedWriter.write('// ');\r\n      this._indentedWriter.write(lines.join('\\n// '));\r\n      this._indentedWriter.writeLine();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}