{"version":3,"sources":["test/JsonSchema.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA+B;AAE/B,+BAA8B;AAC9B,6BAA6B;AAC7B,0CAAuC;AACvC,8CAAiE;AAEjE,mBAAmB,IAAY;IAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC;SAClC,IAAI,EAAE,CAAC;AACZ,CAAC;AAED,QAAQ,CAAC,YAAY,EAAE;IACrB,MAAM,UAAU,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,8BAA8B,CAAC,CAAC,CAAC;IAE9F,MAAM,MAAM,GAAe,uBAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAE3D,EAAE,CAAC,oDAAoD,EAAE,CAAC,IAAe;QACvE,MAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC,CAAC;QACrF,MAAM,UAAU,GAAW,mBAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACtE,aAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC5B,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE,CAAC,IAAe;QAChG,MAAM,SAAS,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC,CAAC;QACvF,MAAM,WAAW,GAAW,mBAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAErD,MAAM,aAAa,GAAW;;;;;;wCAMM,CAAC;QAErC,IAAI,UAAU,GAAW,CAAC,CAAC;QAE3B,MAAM,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC,SAA+B;YAC7E,EAAE,UAAU,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC/B,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,aAAa,CAAC,EACjE,SAAS,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,aAAM,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAC5B,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"test/JsonSchema.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types='mocha' />\r\n\r\nimport { assert } from 'chai';\r\nimport * as path from 'path';\r\nimport { JsonFile } from '../JsonFile';\r\nimport { JsonSchema, IJsonSchemaErrorInfo } from '../JsonSchema';\r\n\r\nfunction normalize(text: string): string {\r\n  return text.replace(/[\\r\\n ]+/g, ' ')\r\n    .trim();\r\n}\r\n\r\ndescribe('JsonSchema', () => {\r\n  const schemaPath: string = path.resolve(path.join(__dirname, './test-data/test-schema.json'));\r\n\r\n  const schema: JsonSchema = JsonSchema.fromFile(schemaPath);\r\n\r\n  it('loadAndValidate successfully validates a JSON file', (done: MochaDone) => {\r\n    const jsonPath: string = path.resolve(path.join(__dirname, './test-data/test.json'));\r\n    const jsonObject: Object = JsonFile.loadAndValidate(jsonPath, schema);\r\n    assert.isObject(jsonObject);\r\n    done();\r\n  });\r\n\r\n  it('validateObjectWithCallback successfully reports a compound validation error', (done: MochaDone) => {\r\n    const jsonPath2: string = path.resolve(path.join(__dirname, './test-data/test2.json'));\r\n    const jsonObject2: Object = JsonFile.load(jsonPath2);\r\n\r\n    const expectedError: string = `\r\nError: #/exampleOneOf (Description for exampleOneOf - this i...)\r\n    Data does not match any schemas from 'oneOf'\r\nError: #/exampleOneOf (Description for type1)\r\n      Additional properties not allowed: field2\r\nError: #/exampleOneOf (Description for type2)\r\n      Missing required property: field3`;\r\n\r\n    let errorCount: number = 0;\r\n\r\n    schema.validateObjectWithCallback(jsonObject2, (errorInfo: IJsonSchemaErrorInfo) => {\r\n      ++errorCount;\r\n      console.log(errorInfo.details);\r\n      assert.equal(normalize(errorInfo.details), normalize(expectedError),\r\n        'Error #' + errorCount.toString());\r\n    });\r\n\r\n    assert.equal(errorCount, 1);\r\n    done();\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}