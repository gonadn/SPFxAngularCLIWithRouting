"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types='mocha' />
const chai_1 = require("chai");
const path = require("path");
const JsonFile_1 = require("../JsonFile");
const JsonSchema_1 = require("../JsonSchema");
function normalize(text) {
    return text.replace(/[\r\n ]+/g, ' ')
        .trim();
}
describe('JsonSchema', () => {
    const schemaPath = path.resolve(path.join(__dirname, './test-data/test-schema.json'));
    const schema = JsonSchema_1.JsonSchema.fromFile(schemaPath);
    it('loadAndValidate successfully validates a JSON file', (done) => {
        const jsonPath = path.resolve(path.join(__dirname, './test-data/test.json'));
        const jsonObject = JsonFile_1.JsonFile.loadAndValidate(jsonPath, schema);
        chai_1.assert.isObject(jsonObject);
        done();
    });
    it('validateObjectWithCallback successfully reports a compound validation error', (done) => {
        const jsonPath2 = path.resolve(path.join(__dirname, './test-data/test2.json'));
        const jsonObject2 = JsonFile_1.JsonFile.load(jsonPath2);
        const expectedError = `
Error: #/exampleOneOf (Description for exampleOneOf - this i...)
    Data does not match any schemas from 'oneOf'
Error: #/exampleOneOf (Description for type1)
      Additional properties not allowed: field2
Error: #/exampleOneOf (Description for type2)
      Missing required property: field3`;
        let errorCount = 0;
        schema.validateObjectWithCallback(jsonObject2, (errorInfo) => {
            ++errorCount;
            console.log(errorInfo.details);
            chai_1.assert.equal(normalize(errorInfo.details), normalize(expectedError), 'Error #' + errorCount.toString());
        });
        chai_1.assert.equal(errorCount, 1);
        done();
    });
});

//# sourceMappingURL=JsonSchema.test.js.map
