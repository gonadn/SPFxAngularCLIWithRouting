{"version":3,"sources":["JsonFile.ts"],"names":[],"mappings":"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","file":"JsonFile.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as jju from 'jju';\r\n\r\nimport { JsonSchema, IJsonSchemaErrorInfo, IJsonSchemaValidateOptions } from './JsonSchema';\r\n\r\n/**\r\n * Options for JsonFile.stringify()\r\n *\r\n * @public\r\n */\r\nexport interface IJsonFileStringifyOptions {\r\n  /**\r\n   * If true, then \"\\n\" will be used for newlines instead of the default \"\\r\\n\".\r\n   */\r\n  unixNewlines?: boolean;\r\n}\r\n\r\n/**\r\n * Options for JsonFile.saveJsonFile()\r\n *\r\n * @public\r\n */\r\nexport interface IJsonFileSaveOptions extends IJsonFileStringifyOptions {\r\n  /**\r\n   * If there is an existing file, and the contents have not changed, then\r\n   * don't write anything; this preserves the old timestamp.\r\n   */\r\n  onlyIfChanged?: boolean;\r\n}\r\n\r\n/**\r\n * Utilities for reading/writing JSON files.\r\n * @public\r\n */\r\nexport class JsonFile {\r\n  /**\r\n   * Loads a JSON file.\r\n   */\r\n  public static load(jsonFilename: string): any { // tslint:disable-line:no-any\r\n    if (!fsx.existsSync(jsonFilename)) {\r\n      throw new Error(`Input file not found: ${jsonFilename}`);\r\n    }\r\n\r\n    const buffer: Buffer = fsx.readFileSync(jsonFilename);\r\n    try {\r\n      return jju.parse(buffer.toString());\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${jsonFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads a JSON file and validate its schema.\r\n   */\r\n  public static loadAndValidate(jsonFilename: string, jsonSchema: JsonSchema,\r\n    options?: IJsonSchemaValidateOptions): any { // tslint:disable-line:no-any\r\n\r\n    const jsonObject: any = JsonFile.load(jsonFilename); // tslint:disable-line:no-any\r\n    jsonSchema.validateObject(jsonObject, jsonFilename, options);\r\n\r\n    return jsonObject;\r\n  }\r\n\r\n  /**\r\n   * Loads a JSON file and validate its schema, reporting errors using a callback\r\n   * @remarks\r\n   * See JsonSchema.validateObjectWithCallback() for more info.\r\n   */\r\n  public static loadAndValidateWithCallback(jsonFilename: string, jsonSchema: JsonSchema,\r\n    errorCallback: (errorInfo: IJsonSchemaErrorInfo) => void): any { // tslint:disable-line:no-any\r\n\r\n    const jsonObject: any = JsonFile.load(jsonFilename); // tslint:disable-line:no-any\r\n    jsonSchema.validateObjectWithCallback(jsonObject, errorCallback);\r\n\r\n    return jsonObject;\r\n  }\r\n\r\n  /**\r\n   * Serializes the specified JSON object to a string buffer.\r\n   * @param jsonObject - the object to be serialized\r\n   * @param options - other settings that control serialization\r\n   * @returns a JSON string, with newlines, and indented with two spaces\r\n   */\r\n  public static stringify(jsonObject: Object, options?: IJsonFileStringifyOptions): string {\r\n    JsonFile.validateNoUndefinedMembers(jsonObject);\r\n    const stringified: string = JSON.stringify(jsonObject, undefined, 2) + '\\n';\r\n\r\n    if (options && options.unixNewlines) {\r\n      return stringified;\r\n    } else {\r\n      return JsonFile._getAllReplaced(stringified, '\\n', '\\r\\n');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Saves the file to disk.  Returns false if nothing was written due to options.onlyIfChanged.\r\n   * @param jsonObject - the object to be saved\r\n   * @param jsonFilename - the file path to write\r\n   * @param options - other settings that control how the file is saved\r\n   * @returns false if ISaveJsonFileOptions.onlyIfChanged didn't save anything; true otherwise\r\n   */\r\n  public static save(jsonObject: Object, jsonFilename: string, options: IJsonFileSaveOptions = {}): boolean {\r\n    const normalized: string = JsonFile.stringify(jsonObject, options);\r\n\r\n    const buffer: Buffer = new Buffer(normalized); // utf8 encoding happens here\r\n\r\n    if (options.onlyIfChanged) {\r\n      // Has the file changed?\r\n      if (fsx.existsSync(jsonFilename)) {\r\n        try {\r\n          const oldBuffer: Buffer = fsx.readFileSync(jsonFilename);\r\n          if (Buffer.compare(buffer, oldBuffer) === 0) {\r\n            // Nothing has changed, so don't touch the file\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          // Ignore this error, and try writing a new file.  If that fails, then we should report that\r\n          // error instead.\r\n        }\r\n      }\r\n    }\r\n\r\n    fsx.writeFileSync(jsonFilename, buffer);\r\n\r\n    // TEST CODE: Used to verify that onlyIfChanged isn't broken by a hidden transformation during saving.\r\n    /*\r\n    const oldBuffer2: Buffer = fsx.readFileSync(jsonFilename);\r\n    if (Buffer.compare(buffer, oldBuffer2) !== 0) {\r\n      console.log('new:' + buffer.toString('hex'));\r\n      console.log('old:' + oldBuffer2.toString('hex'));\r\n\r\n      throw new Error('onlyIfChanged logic is broken');\r\n    }\r\n    */\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Used to validate a data structure before writing.  Reports an error if there\r\n   * are any undefined members.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public static validateNoUndefinedMembers(jsonObject: Object): void {\r\n    return JsonFile._validateNoUndefinedMembers(jsonObject, []);\r\n  }\r\n\r\n  // Private implementation of validateNoUndefinedMembers()\r\n  private static _validateNoUndefinedMembers(jsonObject: Object, keyPath: string[]): void {\r\n    if (!jsonObject) {\r\n      return;\r\n    }\r\n    if (typeof jsonObject === 'object') {\r\n      for (const key of Object.keys(jsonObject)) {\r\n        keyPath.push(key);\r\n\r\n        // tslint:disable-next-line:no-any\r\n        const value: any = jsonObject[key];\r\n        if (value === undefined) {\r\n          const fullPath: string = JsonFile._formatKeyPath(keyPath);\r\n          throw new Error(`The value for ${fullPath} is undefined`);\r\n        }\r\n\r\n        JsonFile._validateNoUndefinedMembers(value, keyPath);\r\n        keyPath.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Given this input:    ['items', '4', 'syntax', 'parameters', 'string \"with\" symbols\", 'type']\r\n  // Return this string:  items[4].syntax.parameters[\"string \\\"with\\\" symbols\"].type\r\n  private static _formatKeyPath(keyPath: string[]): string {\r\n    let result: string = '';\r\n\r\n    for (const key of keyPath) {\r\n      if (/^[0-9]+$/.test(key)) {\r\n        // It's an integer, so display like this:  parent[123]\r\n        result += `[${key}]`;\r\n      } else if (/^[a-z_][a-z_0-9]*$/i.test(key)) {\r\n        // It's an alphanumeric identifier, so display like this:  parent.name\r\n        if (result) {\r\n          result += '.';\r\n        }\r\n        result += `${key}`;\r\n      } else {\r\n        // It's a freeform string, so display like this:  parent[\"A path: \\\"C:\\\\file\\\"\"]\r\n\r\n        // Convert this:     A path: \"C:\\file\"\r\n        // To this:          A path: \\\"C:\\\\file\\\"\r\n        const escapedKey: string = key.replace(/[\\\\]/g, '\\\\\\\\') // escape backslashes\r\n          .replace(/[\"]/g, '\\\\'); // escape quotes\r\n        result += `[\"${escapedKey}\"]`;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns the same thing as targetString.replace(searchValue, replaceValue), except that\r\n   * all matches are replaced, rather than just the first match.\r\n   * @param targetString  The string to be modified\r\n   * @param searchValue   The value to search for\r\n   * @param replaceValue  The replacement text\r\n   */\r\n  private static _getAllReplaced(targetString: string, searchValue: string, replaceValue: string): string {\r\n    return targetString.split(searchValue).join(replaceValue);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}