/// <reference types="adal" />
import { Event, EventArgs, ServiceKey, ServiceScope } from '@microsoft/sp-core-library';
/**
 * Represents the exported module from the adal-angular npm package.
 * @internal
 */
export interface IAdalJsModule {
    inject: (configuration: adal.Config) => adal.AuthenticationContext;
}
/**
 * Represents arguments used for raising a token acquisiton failure event.
 * @internal
 */
export interface ITokenAcquisitionFailureEventArgs extends EventArgs {
    /**
     * The message returned from ADAL fails to retrieve a token from Azure AD.
     */
    errorMessage: string;
    /**
     * The url of the page for the end user to perform Multi Factor Authentication
     */
    redirectUrl?: string;
}
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @remarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @alpha
 */
export default class AadTokenProvider {
    /**
     * The service key for AadTokenProvider.
     */
    static readonly serviceKey: ServiceKey<AadTokenProvider>;
    protected static _authContext: adal.AuthenticationContext;
    private static _tokenAcquisitionFailureEventId;
    private static _sppplatWebApiPermissionRequestsClientId;
    protected _displayCallHandler: ((args: IDisplayCallHandlerArgs) => void) | undefined;
    protected _loadAndConfigureAdalJsModulePromise: Promise<IAdalJsModule> | undefined;
    private _azureInstanceUrl;
    private _azureTenantId;
    private _isInitialized;
    private _loginUserPromise;
    private _tokenAcquisitionFailureEvent;
    constructor(serviceScope: ServiceScope);
    /**
     * The initialize function should be called before the application/components
     * have a chance to make a AadTokenProvider request.
     * @internal
     */
    _initialize(azureInstanceUrl: string, azureTenantId: string): void;
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token SHOULD NOT be cached by the caller since it is already cached by the method
     * itself.
     *
     * An example of a resourceEndpoint would be https://sdfpilot.outlook.com
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    getToken(resourceEndpoint: string): Promise<string>;
    readonly tokenAcquisitionFailureEvent: Event<ITokenAcquisitionFailureEventArgs>;
    private _acquireTokenPromise(resourceEndpoint);
    private _loadAndConfigureAdalJsModule();
    private _configureAdalJs(adalJsModule);
    /**
     * Calls _authContext.login() and wires up the displayCall callback.  Returns true if the
     * callback was called.
     */
    private _startLogin(showWindowCallback);
    private _loginUser();
    private _waitForWindowToClose(popupWindow, args);
}
export interface IDisplayCallHandlerArgs {
    urlNavigate: string;
    redirectUri: string;
}
