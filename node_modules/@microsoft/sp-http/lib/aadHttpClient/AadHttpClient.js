"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var decorators_1 = require("@microsoft/decorators");
var HttpClient_1 = require("../httpClient/HttpClient");
var HttpClientConfiguration_1 = require("../httpClient/HttpClientConfiguration");
var HttpClientHelper_1 = require("../httpClient/HttpClientHelper");
var AadTokenProvider_1 = require("../oauthTokenProvider/AadTokenProvider");
var AadHttpClient = (function () {
    function AadHttpClient(serviceScope, resourceEndpoint) {
        sp_core_library_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        sp_core_library_1.Validate.isNotNullOrUndefined(resourceEndpoint, 'resourceUrl');
        this._serviceScope = serviceScope;
        this._resourceUrl = resourceEndpoint;
        this._httpClientBase = new HttpClientHelper_1.default(serviceScope, 'AadHttpClient');
    }
    AadHttpClient.prototype.fetch = function (url, configuration, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._serviceScope.whenFinished(function () {
                var httpClient = _this._serviceScope.consume(HttpClient_1.default.serviceKey);
                var aadTokenProvider = _this._serviceScope.consume(AadTokenProvider_1.default.serviceKey);
                if (!_this._fetchTokenPromise) {
                    _this._fetchTokenPromise = aadTokenProvider.getToken(_this._resourceUrl);
                }
                _this._fetchTokenPromise.then(function (token) {
                    if (!options.headers) {
                        options.headers = new Headers();
                    }
                    options.headers.append('Authorization', 'Bearer ' + token);
                    httpClient.fetch(url, configuration, options).then(function (value) {
                        resolve(value);
                    }).catch(function (e) {
                        reject(e);
                    });
                }).catch(function (e) {
                    reject(e);
                });
            });
        });
    };
    AadHttpClient.prototype.get = function (url, configuration, options) {
        return this.fetch(url, configuration, this._httpClientBase.overrideHttpMethod(options, 'GET'));
    };
    AadHttpClient.prototype.post = function (url, configuration, options) {
        return this.fetch(url, configuration, this._httpClientBase.overrideHttpMethod(options, 'POST'));
    };
    AadHttpClient.configurations = HttpClientConfiguration_1.predefinedConfigurations;
    AadHttpClient = tslib_1.__decorate([
        decorators_1.sealed
    ], AadHttpClient);
    return AadHttpClient;
}());
exports.default = AadHttpClient;
