{"version":3,"sources":["getPackageDeps.ts"],"names":[],"mappings":"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","file":"getPackageDeps.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport { IPackageDeps } from './IPackageDeps';\r\n\r\nexport type GitStatusChangeType = 'D' | 'M' | 'A';\r\n\r\n/**\r\n * Parses the output of the \"git ls-tree\" command\r\n */\r\nexport function parseGitLsTree(output: string): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n\r\n  if (output) {\r\n    // A line is expected to look like:\r\n    // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts\r\n    // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  web-build-tools\r\n    const gitRegex: RegExp = /([0-9]{6})\\s(blob|commit)\\s([a-f0-9]{40})\\s*(.*)/;\r\n\r\n    // Note: The output of git ls-tree uses \\n newlines regardless of OS.\r\n    output.split('\\n').forEach(line => {\r\n\r\n      if (line) {\r\n        // Take everything after the \"100644 blob\", which is just the hash and filename\r\n        const matches: RegExpMatchArray = line.match(gitRegex);\r\n        if (matches && matches[3] && matches[4]) {\r\n          const hash: string = matches[3];\r\n          const filename: string = matches[4];\r\n\r\n          changes.set(filename, hash);\r\n\r\n        } else {\r\n          throw new Error(`Cannot parse git ls-tree input: \"${line}\"`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Parses the output of the \"git status\" command\r\n */\r\nexport function parseGitStatus(output: string, packagePath: string): Map<string, GitStatusChangeType> {\r\n  const changes: Map<string, GitStatusChangeType> = new Map<string, GitStatusChangeType>();\r\n\r\n  /*\r\n  * Typically, output will look something like:\r\n  * M temp_modules/rush-package-deps-hash/package.json\r\n  * D package-deps-hash/src/index.ts\r\n  */\r\n\r\n  // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]\r\n  // will be empty or undefined\r\n  if (!output) {\r\n    return changes;\r\n  }\r\n\r\n  // Note: The output of git hash-object uses \\n newlines regardless of OS.\r\n  output\r\n    .trim()\r\n    .split('\\n')\r\n    .forEach(line => {\r\n      const [changeType, filename]: string[] = line.trim().split(' ');\r\n      /*\r\n      * changeType == 'D' or 'M' or 'A'\r\n      * filename == path to the file\r\n      */\r\n      if (changeType && filename) {\r\n        changes.set(filename, changeType as GitStatusChangeType);\r\n      }\r\n    });\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Takes a list of files and returns the current git hashes for them\r\n */\r\nexport function gitHashFiles(filesToHash: string[], packagePath: string): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n  if (filesToHash.length) {\r\n    const hashStdout: string = child_process.execSync(\r\n      'git hash-object ' + filesToHash.join(' '),\r\n      { cwd: packagePath }).toString();\r\n\r\n    // The result of hashStdout will be a list of file hashes delimited by newlines\r\n    const hashes: string[] = hashStdout.split('\\n');\r\n\r\n    filesToHash.forEach((filename, i) => changes.set(filename, hashes[i]));\r\n  }\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Executes \"git ls-tree\" in a folder\r\n */\r\nexport function gitLsTree(path: string): string {\r\n  return child_process.execSync(\r\n    `git ls-tree HEAD -r`,\r\n    {\r\n      cwd: path,\r\n      stdio: 'pipe'\r\n    }).toString();\r\n}\r\n\r\n/**\r\n * Executes \"git status\" in a folder\r\n */\r\nexport function gitStatus(path: string): string {\r\n  return child_process.execSync(\r\n    `git status -s -u .`,\r\n    {\r\n      cwd: path,\r\n      stdio: 'pipe'\r\n    }).toString();\r\n}\r\n\r\n/**\r\n * Collects the current git filehashes for a directory\r\n * @public\r\n */\r\nexport function getPackageDeps(packagePath: string = process.cwd(), excludedPaths?: string[]): IPackageDeps {\r\n  const excludedHashes: { [key: string]: boolean } = {};\r\n\r\n  if (excludedPaths) {\r\n    excludedPaths.forEach(path => excludedHashes[path] = true);\r\n  }\r\n\r\n  const changes: IPackageDeps = {\r\n    files: {}\r\n  };\r\n\r\n  const gitLsOutput: string = gitLsTree(packagePath);\r\n\r\n  // Add all the checked in hashes\r\n  parseGitLsTree(gitLsOutput).forEach((hash: string, filename: string) => {\r\n    if (!excludedHashes[filename]) {\r\n      changes.files[filename] = hash;\r\n    }\r\n  });\r\n\r\n  // Update the checked in hashes with the current repo status\r\n  const gitStatusOutput: string = gitStatus(packagePath);\r\n  const currentlyChangedFiles: Map<string, GitStatusChangeType > =\r\n    parseGitStatus(gitStatusOutput, packagePath);\r\n\r\n  const filesToHash: string[] = [];\r\n  currentlyChangedFiles.forEach((changeType: GitStatusChangeType, filename: string) => {\r\n    if (changeType === 'D') {\r\n      delete changes.files[filename];\r\n    } else {\r\n      if (!excludedHashes[filename]) {\r\n        filesToHash.push(filename);\r\n      }\r\n    }\r\n  });\r\n\r\n  gitHashFiles(filesToHash, packagePath).forEach((hash: string, filename: string) => {\r\n    changes.files[filename] = hash;\r\n  });\r\n\r\n  return changes;\r\n}\r\n"],"sourceRoot":"..\\src"}