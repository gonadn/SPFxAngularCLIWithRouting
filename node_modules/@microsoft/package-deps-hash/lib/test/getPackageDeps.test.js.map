{"version":3,"sources":["test/getPackageDeps.test.ts"],"names":[],"mappings":"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","file":"test/getPackageDeps.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { getPackageDeps, parseGitLsTree } from '../getPackageDeps';\r\nimport { IPackageDeps } from '../IPackageDeps';\r\nimport { expect, assert } from 'chai';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { execSync } from 'child_process';\r\n\r\nconst SOURCE_PATH: string = path.join(__dirname).replace(\r\n  path.join('lib', 'test'),\r\n  path.join('src', 'test'));\r\n\r\nconst TEST_PROJECT_PATH: string = path.join(SOURCE_PATH, 'testProject');\r\nconst NESTED_TEST_PROJECT_PATH: string = path.join(SOURCE_PATH, 'nestedTestProject');\r\n\r\ndescribe('parseGitLsTree', () => {\r\n  it('can handle a blob', (done) => {\r\n    const filename: string = 'src/typings/tsd.d.ts';\r\n    const hash: string = '3451bccdc831cb43d7a70ed8e628dcf9c7f888c8';\r\n\r\n    const output: string = `100644 blob ${hash}\\t${filename}`;\r\n    const changes: Map<string, string> = parseGitLsTree(output);\r\n\r\n    assert.equal(changes.size, 1, 'Expect there to be exactly 1 change');\r\n    assert.equal(changes.get(filename), hash, `Expect the hash to be ${hash}`);\r\n    done();\r\n  });\r\n\r\n  it('can handle a submodule', (done) => {\r\n    const filename: string = 'web-build-tools';\r\n    const hash: string = 'c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac';\r\n\r\n    const output: string = `160000 commit ${hash}\\t${filename}`;\r\n    const changes: Map<string, string> = parseGitLsTree(output);\r\n\r\n    assert.equal(changes.size, 1, 'Expect there to be exactly 1 change');\r\n    assert.equal(changes.get(filename), hash, `Expect the hash to be ${hash}`);\r\n    done();\r\n  });\r\n\r\n  it('can handle multiple lines', (done) => {\r\n    const filename1: string = 'src/typings/tsd.d.ts';\r\n    const hash1: string = '3451bccdc831cb43d7a70ed8e628dcf9c7f888c8';\r\n\r\n    const filename2: string = 'src/foo bar/tsd.d.ts';\r\n    const hash2: string = '0123456789abcdef1234567890abcdef01234567';\r\n\r\n    const output: string = `100644 blob ${hash1}\\t${filename1}\\n100666 blob ${hash2}\\t${filename2}`;\r\n    const changes: Map<string, string> = parseGitLsTree(output);\r\n\r\n    assert.equal(changes.size, 2, 'Expect there to be exactly 2 changes');\r\n    assert.equal(changes.get(filename1), hash1, `Expect the hash to be ${hash1}`);\r\n    assert.equal(changes.get(filename2), hash2, `Expect the hash to be ${hash2}`);\r\n    done();\r\n  });\r\n\r\n  it('throws with malformed input', (done) => {\r\n    assert.throws(parseGitLsTree.bind(undefined, 'some super malformed input'));\r\n    done();\r\n  });\r\n});\r\n\r\ndescribe('getPackageDeps', () => {\r\n\r\n  it('can parse commited file', (done) => {\r\n    const results: IPackageDeps = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(results.files[filePath])\r\n          .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) { return done(e); }\r\n\r\n    done();\r\n  });\r\n\r\n  it('can handle files in subfolders', (done) => {\r\n    const results: IPackageDeps = getPackageDeps(NESTED_TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'src/file 1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(results.files[filePath])\r\n          .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) { return done(e); }\r\n\r\n    done();\r\n  });\r\n\r\n  it('can can handle adding one file', (done) => { // tslint:disable-line\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'a.txt');\r\n\r\n    fs.writeFileSync(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      fs.unlinkSync(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: IPackageDeps = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'a.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(\r\n          results.files[filePath])\r\n            .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n\r\n  });\r\n\r\n  it('can can handle adding two files', (done) => { // tslint:disable-line\r\n    const tempFilePath1: string = path.join(TEST_PROJECT_PATH, 'a.txt');\r\n    const tempFilePath2: string = path.join(TEST_PROJECT_PATH, 'b.txt');\r\n\r\n    fs.writeFileSync(tempFilePath1, 'a');\r\n    fs.writeFileSync(tempFilePath2, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      fs.unlinkSync(tempFilePath1);\r\n      fs.unlinkSync(tempFilePath2);\r\n      done(e);\r\n    }\r\n\r\n    const results: IPackageDeps = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'a.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        'b.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(\r\n          results.files[filePath])\r\n            .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can can handle removing one file', (done) => {\r\n    const testFilePath: string = path.join(TEST_PROJECT_PATH, 'file1.txt');\r\n\r\n    fs.unlinkSync(testFilePath);\r\n\r\n    function _done(e?: Error): void {\r\n      execSync(`git checkout ${ testFilePath }`);\r\n      done(e);\r\n    }\r\n\r\n    const results: IPackageDeps = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(results.files[filePath])\r\n          .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can can handle changing one file', (done) => {\r\n    const testFilePath: string = path.join(TEST_PROJECT_PATH, 'file1.txt');\r\n\r\n    fs.writeFileSync(testFilePath, 'abc');\r\n\r\n    function _done(e?: Error): void {\r\n      execSync(`git checkout ${testFilePath}`);\r\n      done(e);\r\n    }\r\n\r\n    const results: IPackageDeps = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'f2ba8f84ab5c1bce84a7b441cb1959cfc7093b7f',\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(results.files[filePath])\r\n          .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can exclude a committed file', (done) => {\r\n    const results: IPackageDeps = getPackageDeps(TEST_PROJECT_PATH, ['file1.txt']);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(results.files[filePath])\r\n          .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) { return done(e); }\r\n\r\n    done();\r\n  });\r\n\r\n  it('can exclude an added file', (done) => {\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'a.txt');\r\n\r\n    fs.writeFileSync(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      fs.unlinkSync(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: IPackageDeps = getPackageDeps(TEST_PROJECT_PATH, ['a.txt']);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'package.json': '33703d582243a41bdebff8ee7dd046a01fc054b9'\r\n      };\r\n      const filePaths: string[] = Object.keys(results.files).sort();\r\n\r\n      expect(filePaths.length).to.equal(Object.keys(expectedFiles).length, 'filePaths.length');\r\n\r\n      filePaths.forEach(filePath => (\r\n        expect(\r\n          results.files[filePath])\r\n            .equals(expectedFiles[filePath], `path: ${filePath}`)));\r\n\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"..\\..\\src"}