"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
/**
 * Parses the output of the "git ls-tree" command
 */
function parseGitLsTree(output) {
    const changes = new Map();
    if (output) {
        // A line is expected to look like:
        // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts
        // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  web-build-tools
        const gitRegex = /([0-9]{6})\s(blob|commit)\s([a-f0-9]{40})\s*(.*)/;
        // Note: The output of git ls-tree uses \n newlines regardless of OS.
        output.split('\n').forEach(line => {
            if (line) {
                // Take everything after the "100644 blob", which is just the hash and filename
                const matches = line.match(gitRegex);
                if (matches && matches[3] && matches[4]) {
                    const hash = matches[3];
                    const filename = matches[4];
                    changes.set(filename, hash);
                }
                else {
                    throw new Error(`Cannot parse git ls-tree input: "${line}"`);
                }
            }
        });
    }
    return changes;
}
exports.parseGitLsTree = parseGitLsTree;
/**
 * Parses the output of the "git status" command
 */
function parseGitStatus(output, packagePath) {
    const changes = new Map();
    /*
    * Typically, output will look something like:
    * M temp_modules/rush-package-deps-hash/package.json
    * D package-deps-hash/src/index.ts
    */
    // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]
    // will be empty or undefined
    if (!output) {
        return changes;
    }
    // Note: The output of git hash-object uses \n newlines regardless of OS.
    output
        .trim()
        .split('\n')
        .forEach(line => {
        const [changeType, filename] = line.trim().split(' ');
        /*
        * changeType == 'D' or 'M' or 'A'
        * filename == path to the file
        */
        if (changeType && filename) {
            changes.set(filename, changeType);
        }
    });
    return changes;
}
exports.parseGitStatus = parseGitStatus;
/**
 * Takes a list of files and returns the current git hashes for them
 */
function gitHashFiles(filesToHash, packagePath) {
    const changes = new Map();
    if (filesToHash.length) {
        const hashStdout = child_process.execSync('git hash-object ' + filesToHash.join(' '), { cwd: packagePath }).toString();
        // The result of hashStdout will be a list of file hashes delimited by newlines
        const hashes = hashStdout.split('\n');
        filesToHash.forEach((filename, i) => changes.set(filename, hashes[i]));
    }
    return changes;
}
exports.gitHashFiles = gitHashFiles;
/**
 * Executes "git ls-tree" in a folder
 */
function gitLsTree(path) {
    return child_process.execSync(`git ls-tree HEAD -r`, {
        cwd: path,
        stdio: 'pipe'
    }).toString();
}
exports.gitLsTree = gitLsTree;
/**
 * Executes "git status" in a folder
 */
function gitStatus(path) {
    return child_process.execSync(`git status -s -u .`, {
        cwd: path,
        stdio: 'pipe'
    }).toString();
}
exports.gitStatus = gitStatus;
/**
 * Collects the current git filehashes for a directory
 * @public
 */
function getPackageDeps(packagePath = process.cwd(), excludedPaths) {
    const excludedHashes = {};
    if (excludedPaths) {
        excludedPaths.forEach(path => excludedHashes[path] = true);
    }
    const changes = {
        files: {}
    };
    const gitLsOutput = gitLsTree(packagePath);
    // Add all the checked in hashes
    parseGitLsTree(gitLsOutput).forEach((hash, filename) => {
        if (!excludedHashes[filename]) {
            changes.files[filename] = hash;
        }
    });
    // Update the checked in hashes with the current repo status
    const gitStatusOutput = gitStatus(packagePath);
    const currentlyChangedFiles = parseGitStatus(gitStatusOutput, packagePath);
    const filesToHash = [];
    currentlyChangedFiles.forEach((changeType, filename) => {
        if (changeType === 'D') {
            delete changes.files[filename];
        }
        else {
            if (!excludedHashes[filename]) {
                filesToHash.push(filename);
            }
        }
    });
    gitHashFiles(filesToHash, packagePath).forEach((hash, filename) => {
        changes.files[filename] = hash;
    });
    return changes;
}
exports.getPackageDeps = getPackageDeps;

//# sourceMappingURL=getPackageDeps.js.map
