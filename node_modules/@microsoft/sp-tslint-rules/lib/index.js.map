{"version":3,"sources":["index.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAQjC,MAAM,YAAY,GAAyB,OAAO,CAAC,eAAe,CAAC,CAAC;AAEpE,MAAM,cAAc,GAAa,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAE,OAAO,CAAE,EAAE,SAAS,CAAC,CAAC;AAElG,8BAAqC,UAAsB;IACzD,MAAM,wBAAwB,GAAsB,UAAU,CAAC,UAAU,CAAC,cAAc,CAAC;IAEzF,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,wBAAwB,YAAY,KAAK,CAAC,CAAC,CAAC;YAC9C,cAAc,CAAC,IAAI,CAAC,GAAI,wBAAqC,CAAC,CAAC;QACjE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,cAAc,CAAC,IAAI,CAAC,wBAAkC,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,UAAU,CAAC,WAAW,CAAC;QACrB,UAAU,EAAE,YAAY;QACxB,cAAc,EAAE,cAAc;KAC/B,CAAC,CAAC;AACL,CAAC;AAfD,oDAeC","file":"index.js","sourcesContent":["import * as tslint from 'tslint';\r\nimport { TSLintTask } from '@microsoft/gulp-core-build-typescript/lib/TSLintTask';\r\n\r\nexport interface ITSLintPartialConfig {\r\n  rulesDirectory: string | string[];\r\n  rules: { [ruleName: string]: any }; // tslint:disable-line:no-any\r\n}\r\n\r\nconst tslintConfig: ITSLintPartialConfig = require('./tslint.json');\r\n\r\nconst rulesDirectory: string[] = tslint.Configuration.getRulesDirectories([ 'rules' ], __dirname);\r\n\r\nexport function initializeTslintTask(tslintTask: TSLintTask): void {\r\n  const existingRulesDirectories: string[] | string = tslintTask.taskConfig.rulesDirectory;\r\n\r\n  if (existingRulesDirectories) {\r\n    if (existingRulesDirectories instanceof Array) {\r\n      rulesDirectory.push(...(existingRulesDirectories as string[]));\r\n    } else {\r\n      rulesDirectory.push(existingRulesDirectories as string);\r\n    }\r\n  }\r\n\r\n  tslintTask.mergeConfig({\r\n    lintConfig: tslintConfig,\r\n    rulesDirectory: rulesDirectory\r\n  });\r\n}\r\n"],"sourceRoot":"..\\src"}