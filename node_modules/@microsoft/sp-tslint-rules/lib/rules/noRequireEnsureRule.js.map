{"version":3,"sources":["rules/noRequireEnsureRule.ts"],"names":[],"mappings":";;AAAA,qCAAqF;AACrF,iCAAiC;AACjC,+BAA+B;AAE/B,UAAkB,SAAQ,IAAI,CAAC,KAAK,CAAC,YAAY;IAWxC,KAAK,CAAC,UAAyB;QACpC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAC3B,UAAU,EACV,CAAC,GAA2B;YAC1B,MAAM,aAAa,GAA4B,CAAC,IAAa;gBAC3D,EAAE,CAAC,CACD,0BAAgB,CAAC,IAAI,CAAC;oBACtB,oCAA0B,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC3C,sBAAY,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;oBACxC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS;oBAC7C,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,KAAK,CACtC,CAAC,CAAC,CAAC;oBACD,MAAM,SAAS,GAAY,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACzD,EAAE,CAAC,CAAC,sBAAY,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC3D,GAAG,CAAC,gBAAgB,CAClB,IAAI,CAAC,UAAU,EACf,sEAAsE,CACvE,CAAC;oBACJ,CAAC;gBACH,CAAC;gBAED,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC9C,CAAC,CAAC;YAEF,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QACxD,CAAC,CACF,CAAC;IACJ,CAAC;;AArCa,aAAQ,GAAuB;IAC3C,QAAQ,EAAE,mBAAmB;IAC7B,WAAW,EAAE,8CAA8C;IAC3D,SAAS,EAAE,0DAA0D;IACrE,kBAAkB,EAAE,uBAAuB;IAC3C,OAAO,EAAE,EAAE;IACX,IAAI,EAAE,eAAe;IACrB,cAAc,EAAE,KAAK;CACtB,CAAC;AATJ,oBAuCC","file":"rules/noRequireEnsureRule.js","sourcesContent":["import { isCallExpression, isIdentifier, isPropertyAccessExpression } from 'tsutils';\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint';\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public static metadata: Lint.IRuleMetadata = {\r\n    ruleName: 'no-require-ensure',\r\n    description: 'Bans the use of the require.ensure function.',\r\n    rationale: '`require.ensure` is outdated. Use `import(...)` instead.',\r\n    optionsDescription: 'No options available.',\r\n    options: {},\r\n    type: 'functionality',\r\n    typescriptOnly: false\r\n  };\r\n\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return this.applyWithFunction(\r\n      sourceFile,\r\n      (ctx: Lint.WalkContext<void>) => {\r\n        const childCallback: (node: ts.Node) => void = (node: ts.Node) => {\r\n          if (\r\n            isCallExpression(node) &&\r\n            isPropertyAccessExpression(node.expression) &&\r\n            isIdentifier(node.expression.expression) &&\r\n            node.expression.expression.text === 'require' &&\r\n            node.expression.getChildCount() === 3\r\n          ) {\r\n            const lastChild: ts.Node = node.expression.getChildAt(2);\r\n            if (isIdentifier(lastChild) && lastChild.text === 'ensure') {\r\n              ctx.addFailureAtNode(\r\n                node.expression,\r\n                'Calls to \\'require.ensure\\' are not allowed. Use \\'import\\' instead.'\r\n              );\r\n            }\r\n          }\r\n\r\n          return ts.forEachChild(node, childCallback);\r\n        };\r\n\r\n        return ts.forEachChild(ctx.sourceFile, childCallback);\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}