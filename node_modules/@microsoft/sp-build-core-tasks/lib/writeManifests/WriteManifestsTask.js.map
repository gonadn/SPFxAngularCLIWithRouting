{"version":3,"sources":["writeManifests/WriteManifestsTask.ts"],"names":[],"mappings":"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","file":"writeManifests/WriteManifestsTask.js","sourcesContent":["import { cloneDeep } from 'lodash';\r\nimport * as fsx from 'fs-extra';\r\nimport * as Gulp from 'gulp';\r\nimport * as merge from 'merge2';\r\nimport * as path from 'path';\r\nimport { EOL } from 'os';\r\n\r\nimport {\r\n  IModuleConfiguration,\r\n  IComponentModuleConfiguration,\r\n  IPathModuleConfiguration,\r\n  ILocalizedPathModuleConfiguration,\r\n  ILocalizedString,\r\n  IClientSideComponentLoaderConfiguration,\r\n  IClientSideComponentManifest,\r\n  IClientSideApplicationManifest,\r\n  IClientSideExtensionManifest,\r\n  ICommandSetExtensionManifest,\r\n  IClientSideWebPartManifest,\r\n  IClientSideWebPartManifestEntry,\r\n  IPath,\r\n  ICommandDefinition\r\n} from '@microsoft/sp-module-interfaces';\r\nimport {\r\n  default as ManifestSchemaValidator,\r\n  IManifestValidatorResult\r\n} from '@microsoft/sp-module-interfaces/lib/manifestSchemaValidator';\r\n\r\nimport {\r\n  writeStringToFile,\r\n  getFullHash\r\n} from './../utilities/FileUtils';\r\nimport { ILocaleMap } from './../OdspGulpTask';\r\nimport {\r\n  IDeployEntry,\r\n  IDeployModules\r\n} from './../copyAssets/CopyAssetsTask';\r\nimport { IBundleComponent } from './../configureWebpack/ConfigureWebpackTask';\r\nimport OdspGulpTask from './../OdspGulpTask';\r\nimport {\r\n  default as CumulativeManifestProcessor,\r\n  ICumulativeManifestOptions\r\n} from './../cumulativeManifestProcessor';\r\nimport {\r\n  ensureTrailingSlash,\r\n  isUrl,\r\n  joinUrlSegments,\r\n  trimLeadingSlashes\r\n} from './../utilities/url';\r\nimport normalizeLocaleName from './../utilities/normalizeLocaleName';\r\nimport constants from './../constants';\r\n\r\nconst schemaPropertyName: string = '$schema';\r\n\r\nexport interface IWriteManifestsTaskConfig {\r\n  /**\r\n   * The deploy CDN path.\r\n   */\r\n  deployCdnPath?: string;\r\n\r\n  /**\r\n   * A prefix to prepend to all assets' URLs. For example, if this value is \"foobar\", a resulting CDN path for an asset\r\n   *  called \"baz.js\" will be \"foobar/baz.js\"\r\n   */\r\n  cdnUrlPrefix?: string;\r\n\r\n  /**\r\n   * The CDN base path. This value will populate the \"internalModuleBaseUrls\" CDN manifest property.\r\n   */\r\n  cdnBasePath?: string;\r\n\r\n  /**\r\n   * The debug base path, which is the value that will populate the \"internalModuleBaseUrls\" manifest property for\r\n   *  debug manifests.\r\n   */\r\n  debugBasePath?: string;\r\n\r\n  /**\r\n   * If specified, only use this locale in the debug manifest.\r\n   */\r\n  debugLocale?: string;\r\n\r\n  /**\r\n   * Options for the cumulative manifest files to be dropped in the dist folder. If this field is null, cumulative\r\n   *  files will not be produced.\r\n   */\r\n  cumulativeManifestOptions?: ICumulativeManifestOptions;\r\n\r\n  /**\r\n   * A function that takes a manifest and returns an object. If defined, it is called on every production manifest\r\n   *  before being written to disk.\r\n   */\r\n  postProcessProductionManifestFunction?: (manifest: IClientSideComponentManifest) => Object;\r\n\r\n  /**\r\n   * A function that takes a manifest and returns an object. If defined, it is called on every debug manifest\r\n   *  before being written to disk.\r\n   */\r\n  postProcessDebugManifestsFunction?: (manifest: IClientSideComponentManifest) => Object;\r\n}\r\n\r\n/**\r\n * The type of icon URL defined in a user-created manifest.\r\n */\r\nexport enum IconPathType {\r\n  /**\r\n   * Something that doesn't fit into another category. A warning will be printed.\r\n   */\r\n  Malformed,\r\n\r\n  /**\r\n   * An absolute URL. Something that begins with a protocol (i.e. - http://...).\r\n   */\r\n  AbsoluteUrl,\r\n\r\n  /**\r\n   * A relative URL. Something that begins with an alphanumeric character, but doesn't look like a protocol.\r\n   */\r\n  RelativeUrl,\r\n\r\n  /**\r\n   * A relative filesystem path. Something that begins with \"./\" or \"../\"\r\n   */\r\n  RelativePath\r\n}\r\n\r\nexport function getIconPathType(iconPath: string | undefined): IconPathType | undefined {\r\n  if (!iconPath) {\r\n    return undefined;\r\n  } else if (iconPath.match(/^\\.{1,2}\\/.+/)) {\r\n    return IconPathType.RelativePath;\r\n  } else if (iconPath.match(/^\\w+:\\/\\/.+/)) {\r\n    return IconPathType.AbsoluteUrl;\r\n  } else if (iconPath.match(/^\\w+/)) {\r\n    return IconPathType.RelativeUrl;\r\n  } else {\r\n    return IconPathType.Malformed;\r\n  }\r\n}\r\n\r\n/**\r\n * Writes a manifest for each entry in the project.\r\n *\r\n * Example:\r\n *  IN:\r\n *   the result of the prepareDeploy step enumerating each entry, each entry's dependencies, and a developer-generated\r\n *    base manifest for each entry.\r\n *\r\n *  OUT:\r\n *   a debug and, optionally, a production manifest for each entry.\r\n */\r\nexport class WriteManifestsTask extends OdspGulpTask<IWriteManifestsTaskConfig> {\r\n  // tslint:disable-next-line:no-any\r\n  private _localizedResourcesCache: { [key: string]: any } = {};\r\n\r\n  constructor() {\r\n    super(\r\n      'write-manifests',\r\n      {\r\n        deployCdnPath: undefined,\r\n        debugLocale: constants.defaultLocale,\r\n        cdnUrlPrefix: undefined,\r\n        cdnBasePath: undefined,\r\n        cumulativeManifestOptions: {\r\n          ignoreOutputManifestIds: undefined\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./write-manifests.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream {\r\n    if (!this.properties.deployEntries || this.properties.deployEntries.length === 0) {\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('No deploy entries specified. No manifests to write.');\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    const shouldProduceDebugManifests: boolean = !!this.taskConfig.debugBasePath;\r\n    if (!this.taskConfig.debugBasePath) {\r\n      this.log('Debug base path not specified. Unable to produce debug manifests.');\r\n    }\r\n\r\n    let shouldProduceProductionManifests: boolean = this.buildConfig.production && !!this.taskConfig.cdnBasePath;\r\n    if (this.buildConfig.production && !this.taskConfig.cdnBasePath) {\r\n      this.logWarning('CDN base path not specified. Unable to produce production manifests.');\r\n    }\r\n\r\n    if (this.buildConfig.production && !this.taskConfig.deployCdnPath) {\r\n      shouldProduceProductionManifests = false;\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('CDN deploy path not specified. Unable to produce production manifests.');\r\n    }\r\n\r\n    this.taskConfig.debugLocale = normalizeLocaleName(this.taskConfig.debugLocale);\r\n    this.logVerbose(`Using debug locale: ${this.taskConfig.debugLocale}`);\r\n\r\n    const debugManifests: IClientSideComponentManifest[] = [];\r\n    const manifestIds: { [id: string]: IBundleComponent } = {};\r\n\r\n    const tasks: NodeJS.ReadWriteStream[] = [];\r\n\r\n    this.properties.deployEntries.forEach((deployEntry: IDeployEntry) => {\r\n      const componentKeys: string[] = Object.keys(deployEntry.bundleEntry.components);\r\n      componentKeys.forEach((id) => {\r\n        const bundleComponent: IBundleComponent = deployEntry.bundleEntry.components[id];\r\n        if (componentKeys.length === 1) {\r\n          // Only one component - we don't care about the ID\r\n          id = undefined;\r\n        }\r\n\r\n        if (!bundleComponent.manifestData) {\r\n          this.logWarning(`Manifest not defined for entry \"${deployEntry.entryName}\".`);\r\n          return;\r\n        }\r\n\r\n        const validationResult: IManifestValidatorResult =\r\n          ManifestSchemaValidator.validateManifest(JSON.stringify(bundleComponent.manifestData));\r\n        if (!validationResult.result) {\r\n          const errorText: string = ManifestSchemaValidator.getFormattedErrorMessage(validationResult.errors);\r\n\r\n          const manifestPath: string = bundleComponent.manifest;\r\n          this.logError(`Manifest validation error (${manifestPath}): ${EOL}${errorText}`);\r\n          return;\r\n        }\r\n\r\n        // Ensure we don't have a duplicate ID\r\n        const lowercaseId: string = bundleComponent.manifestData.id.toLowerCase();\r\n        if (lowercaseId in manifestIds) {\r\n          this.logError(`Duplicate manifest ID \"${lowercaseId}\". Exists in \"${manifestIds[lowercaseId].manifest}\" ` +\r\n                        `and \"${bundleComponent.manifest}\".`);\r\n        } else {\r\n          manifestIds[lowercaseId] = bundleComponent;\r\n        }\r\n\r\n        if (shouldProduceDebugManifests) {\r\n          let debugManifest: IClientSideComponentManifest = this._doComponentTypeSpecificFixup(\r\n            true,\r\n            bundleComponent.manifestData,\r\n            bundleComponent.manifestPath,\r\n            this.taskConfig.debugLocale\r\n          );\r\n\r\n          const loaderConfig: IClientSideComponentLoaderConfiguration = this._generateLoaderConfig(\r\n            id,\r\n            deployEntry.debugModules,\r\n            [this.taskConfig.debugBasePath],\r\n            this._resolveDebugPath.bind(this),\r\n            // Keep the default path the same between CDN and debug manifests during a\r\n            //  production build\r\n            this.buildConfig.production ? undefined : this.taskConfig.debugLocale,\r\n            !this.buildConfig.production\r\n          );\r\n\r\n          debugManifest = this._generateManifest(debugManifest, loaderConfig);\r\n          this._doFinalManifestFixup(debugManifest);\r\n\r\n          let updatedManifest: IClientSideComponentManifest | Object;\r\n          if (this.taskConfig.postProcessDebugManifestsFunction) {\r\n            updatedManifest = this.taskConfig.postProcessDebugManifestsFunction(debugManifest);\r\n          } else {\r\n            updatedManifest = debugManifest;\r\n          }\r\n\r\n          debugManifests.push(updatedManifest as IClientSideComponentManifest);\r\n\r\n          tasks.push(writeStringToFile(JSON.stringify(updatedManifest, undefined, 2),\r\n                                      `${debugManifest.id}.manifest.json`)\r\n                      .pipe(gulp.dest(this.buildConfig.distFolder)));\r\n        }\r\n\r\n        if (shouldProduceProductionManifests) {\r\n          let productionManifest: IClientSideComponentManifest = this._doComponentTypeSpecificFixup(\r\n            false,\r\n            bundleComponent.manifestData,\r\n            bundleComponent.manifestPath,\r\n            constants.defaultLocale\r\n          );\r\n\r\n          const loaderConfig: IClientSideComponentLoaderConfiguration = this._generateLoaderConfig(\r\n            id,\r\n            deployEntry.productionModules,\r\n            [this.taskConfig.cdnBasePath],\r\n            this._resolveProductionPath.bind(this)\r\n          );\r\n\r\n          productionManifest = this._generateManifest(productionManifest, loaderConfig);\r\n          this._doFinalManifestFixup(productionManifest);\r\n          let cdnManifest: Object | IClientSideComponentManifest;\r\n          if (this.taskConfig.postProcessProductionManifestFunction) {\r\n            cdnManifest = this.taskConfig.postProcessProductionManifestFunction(productionManifest);\r\n          } else {\r\n            cdnManifest = productionManifest;\r\n          }\r\n\r\n          tasks.push(writeStringToFile(JSON.stringify(cdnManifest), `${productionManifest.id}.json`)\r\n            .pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n        }\r\n      });\r\n    });\r\n\r\n    merge(tasks).on('finish', () => {\r\n      // Once this project's manifests are written, crawl the dependency tree discovering manifest files\r\n      if (shouldProduceDebugManifests) {\r\n        const cumulativeManifestOptions: ICumulativeManifestOptions = this.taskConfig.cumulativeManifestOptions;\r\n        cumulativeManifestOptions.baseUrl = this.taskConfig.debugBasePath;\r\n\r\n        const cumulativeManifestProcessor: CumulativeManifestProcessor =\r\n          new CumulativeManifestProcessor(this, cumulativeManifestOptions);\r\n\r\n        merge(cumulativeManifestProcessor.generateCumulativeManifest(gulp, debugManifests))\r\n          .on('finish', () => completeCallback());\r\n      } else {\r\n        completeCallback();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Does some component-type-specific manifest processing.\r\n   */\r\n  private _doComponentTypeSpecificFixup(\r\n    isDebug: boolean,\r\n    manifest: IClientSideComponentManifest,\r\n    manifestPath: string,\r\n    defaultLocale: string | undefined,\r\n    onlyUseDefaultLocale?: boolean\r\n  ): IClientSideComponentManifest {\r\n    const manifestClone: IClientSideComponentManifest = cloneDeep(manifest);\r\n\r\n    switch (manifestClone.componentType) {\r\n      case 'WebPart':\r\n        this._processWebpartManifest(\r\n          isDebug,\r\n          manifestClone as IClientSideWebPartManifest<any>, // tslint:disable-line:no-any\r\n          manifestPath,\r\n          defaultLocale,\r\n          onlyUseDefaultLocale\r\n        );\r\n        break;\r\n\r\n      case 'Application':\r\n        this._localizeApplicationManifest(\r\n          manifestClone as IClientSideApplicationManifest,\r\n          defaultLocale,\r\n          onlyUseDefaultLocale\r\n        );\r\n        break;\r\n\r\n      case 'Extension':\r\n        this._processExtensionsManifest(\r\n          isDebug,\r\n          manifestClone as IClientSideExtensionManifest,\r\n          manifestPath,\r\n          defaultLocale,\r\n          onlyUseDefaultLocale\r\n        );\r\n        break;\r\n    }\r\n    return manifestClone;\r\n  }\r\n\r\n  /**\r\n   * Perform some final fixup on manifests.\r\n   */\r\n  private _doFinalManifestFixup(manifest: IClientSideComponentManifest): void {\r\n    if (manifest.componentType === 'Application') {\r\n      const applicationManifest: IClientSideApplicationManifest = manifest as IClientSideApplicationManifest;\r\n      if (!applicationManifest.preloadComponents) {\r\n        applicationManifest.preloadComponents = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Does webpart-specific manifest processing.\r\n   */\r\n  private _processWebpartManifest(\r\n    isDebug: boolean,\r\n    manifest: IClientSideWebPartManifest<any>, // tslint:disable-line:no-any\r\n    manifestPath: string,\r\n    defaultLocale: string | undefined,\r\n    onlyUseDefaultLocale?: boolean\r\n  ): void {\r\n    // tslint:disable-next-line:no-any\r\n    manifest.preconfiguredEntries.forEach((entry: IClientSideWebPartManifestEntry<any>) => {\r\n        entry.title = this._localizeString(entry.title, defaultLocale, onlyUseDefaultLocale);\r\n        entry.description = this._localizeString(entry.description, defaultLocale, onlyUseDefaultLocale);\r\n        if (entry.group) {\r\n          entry.group = this._localizeString(entry.group, defaultLocale, onlyUseDefaultLocale);\r\n        }\r\n\r\n        if (entry.tags) {\r\n          entry.tags =\r\n            entry.tags.slice(0, 10).map(tag => this._localizeString(tag, defaultLocale, onlyUseDefaultLocale));\r\n        }\r\n\r\n        const resolvedIcon: string | undefined = this._processIconPath(isDebug, manifestPath, entry.iconImageUrl);\r\n        if (resolvedIcon) {\r\n          entry.iconImageUrl = resolvedIcon;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Localizes an Application manifest. This includes title and description of the Application\r\n   */\r\n  private _localizeApplicationManifest(\r\n    manifest: IClientSideApplicationManifest,\r\n    defaultLocale: string | undefined,\r\n    onlyUseDefaultLocale?: boolean\r\n  ): void {\r\n    manifest.title = this._localizeString(manifest.title, defaultLocale, onlyUseDefaultLocale);\r\n    manifest.description = this._localizeString(manifest.description, defaultLocale, onlyUseDefaultLocale);\r\n  }\r\n\r\n  /**\r\n   * Does extension-specific manifest processing.\r\n   */\r\n  private _processExtensionsManifest(\r\n    isDebug: boolean,\r\n    manifest: IClientSideExtensionManifest,\r\n    manifestPath: string,\r\n    defaultLocale: string | undefined,\r\n    onlyUseDefaultLocale?: boolean\r\n  ): void {\r\n    switch (manifest.extensionType) {\r\n      case 'ListViewCommandSet':\r\n        const commandSetManifest: ICommandSetExtensionManifest = manifest as ICommandSetExtensionManifest;\r\n        for (const itemId in commandSetManifest.items) {\r\n          if (commandSetManifest.items.hasOwnProperty(itemId)) {\r\n            const item: ICommandDefinition = commandSetManifest.items[itemId];\r\n            item.title = this._localizeString(item.title, defaultLocale, onlyUseDefaultLocale);\r\n            if (item.ariaLabel) {\r\n              item.ariaLabel = this._localizeString(item.ariaLabel, defaultLocale, onlyUseDefaultLocale);\r\n            }\r\n\r\n            const resolvedIcon: string | undefined = this._processIconPath(isDebug, manifestPath, item.iconImageUrl);\r\n            if (resolvedIcon) {\r\n              item.iconImageUrl = resolvedIcon;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n\r\n      case 'Unknown':\r\n      case 'ApplicationCustomizer':\r\n      case 'FieldCustomizer':\r\n        // No fields that require modificaiton\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Localizes a string with an id in the web $moduleName:expression;\r\n   * If the string to localize is not based on an id, it returns the input param untouched.\r\n   */\r\n  private _localizeString(\r\n    stringToLocalize: ILocalizedString,\r\n    defaultLocale: string | undefined,\r\n    onlyUseDefaultLocale: boolean\r\n  ): ILocalizedString {\r\n    // If there is no id, assume the property is either not localized, or the localized values are\r\n    //  hardcoded.\r\n    if (!stringToLocalize.id) {\r\n      return stringToLocalize;\r\n    }\r\n\r\n    const regex: RegExp = /^(?:\\$)([^:]+)(?:\\:)(.+)(?:\\;)$/; // Test $<name>:<expr>;\r\n    const matches: RegExpMatchArray = stringToLocalize.id.match(regex);\r\n\r\n    if (matches && matches.length === 3) {\r\n      this.logVerbose(`Localizing string '${matches[0]}'`);\r\n      const localizedStrings: ILocalizedString = this._localizeStringInternal(\r\n        /* resourceName */ matches[1],\r\n        /* expression */ matches[2],\r\n        /* stringId */ matches[0]);\r\n\r\n      const normalizedDefaultLocale: string = normalizeLocaleName(defaultLocale);\r\n      if (normalizedDefaultLocale) {\r\n        // tslint:disable-next-line:no-string-literal\r\n        localizedStrings['default'] = localizedStrings[normalizedDefaultLocale];\r\n        if (!localizedStrings['default']) { // tslint:disable-line:no-string-literal\r\n          this.logError(`Unable to set default locale to \"${normalizedDefaultLocale}\". `\r\n            + `Ensure that resources exist for this locale.`);\r\n        }\r\n\r\n        if (onlyUseDefaultLocale) {\r\n          for (const locale of Object.keys(localizedStrings)) {\r\n            if (locale !== 'default') {\r\n              delete localizedStrings[locale];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return localizedStrings;\r\n    } else {\r\n      this.logError(`String id '${stringToLocalize.id}' has wrong format. It is not $<moduleName>:<expression>;`);\r\n      // Return an empty ILocalizedString\r\n      return {\r\n        default: ''\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Localizes a string where it's been verified that the id follows the schema.\r\n   * @param resourceName Name of the resource to load\r\n   * @param expression Expression to be evaluated on the resource\r\n   * @stringId Original id for the string. Used for logging purposes only\r\n   * @returns Localized string with all found locales\r\n   */\r\n  private _localizeStringInternal(resourceName: string, expression: string, stringId: string): ILocalizedString {\r\n    const localizedString: ILocalizedString = {\r\n      default: ''\r\n    };\r\n\r\n    const resources: ILocaleMap = this.properties.discoveredLocalizedResources[resourceName];\r\n    if (resources) {\r\n      for (const locale in resources) {\r\n        if (resources.hasOwnProperty(locale)) {\r\n          const resource: any = this._getResource(resources[locale]); // tslint:disable-line:no-any\r\n          const normalizedLocaleName: string = normalizeLocaleName(locale);\r\n\r\n          if (resource) {\r\n            const evalString: string = expression.replace(resourceName, 'r');\r\n            let stringFromExpression: string = undefined;\r\n\r\n            try {\r\n              /* tslint:disable:no-any */\r\n              // tslint:disable-next-line:no-unused-variable\r\n              const shallowDiscoverProperty: (resourceData: any, propertyName: string) => string =\r\n                (resourceData: any, propertyName: string): string => {\r\n              /* tslint:enable:no-any */\r\n                const foundBuckets: string[] = [];\r\n                let firstFoundValue: string;\r\n                for (const bucketName in resourceData) {\r\n                  if (resourceData[bucketName] && resourceData[bucketName][propertyName]) {\r\n                    firstFoundValue = resourceData[bucketName][propertyName];\r\n                    foundBuckets.push(bucketName);\r\n                  }\r\n                }\r\n\r\n                if (!firstFoundValue) {\r\n                  throw new Error(`A value for a property \"${propertyName}\" was not found inside any ` +\r\n                                  `property of the resource object.`);\r\n                }\r\n\r\n                if (foundBuckets.length !== 1) {\r\n                  throw new Error(`A value for a property \"${propertyName}\" was found inside multiple ` +\r\n                                  `properties of the resource object and must be disambiguated to be selected.`);\r\n                }\r\n\r\n                return firstFoundValue;\r\n              };\r\n\r\n              // We support any format for the localized resource,\r\n              // so we rely on the developer telling the code how to access it.\r\n              // Eval generates risk. In order to minimize it, only one expression is allowed.\r\n              // tslint:disable-next-line:no-eval\r\n              stringFromExpression = eval(\r\n                'function getLocalizedString(r) {' +\r\n                  'return ' + evalString +\r\n                '}' +\r\n                'getLocalizedString(resource)');\r\n            } catch (error) {\r\n              this.logWarning(`Problem extracting id '${stringId}' in locale '${normalizedLocaleName}'. ` +\r\n                              `Error: ${error}`);\r\n            }\r\n\r\n            if (stringFromExpression) {\r\n              localizedString[normalizedLocaleName] = stringFromExpression;\r\n            } else {\r\n              this.logWarning(`Couldn't find id '${stringId}' in locale '${normalizedLocaleName}'`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n        this.logError(`Localized module '${resourceName}' not found`);\r\n    }\r\n    return localizedString;\r\n  }\r\n\r\n  /**\r\n   * Computes where an icon is on disk, copies it to the appropriate deployment directory\r\n   *  depending on build flavor, and returns the correct path for the manifest.\r\n   */\r\n  private _processIconPath(isDebug: boolean, manifestPath: string, iconPath: string | undefined): string | undefined {\r\n    const iconPathType: IconPathType | undefined = getIconPathType(iconPath);\r\n    if (iconPathType) {\r\n      switch (iconPathType) {\r\n        case IconPathType.RelativePath:\r\n          const iconAbsolutePath: string = path.join(path.dirname(manifestPath), iconPath);\r\n          this.logVerbose(`Found relative icon path \"${iconPath}\", resolved to \"${iconAbsolutePath}\"`);\r\n\r\n          let iconResult: string | undefined;\r\n          if (!fsx.existsSync(iconAbsolutePath)) {\r\n            this.logError(`Icon file missing from resolved path \"${iconAbsolutePath}.\" The icon will be missing.`);\r\n          } else {\r\n            const ext: string = path.extname(iconAbsolutePath);\r\n            const iconBaseName: string = path.basename(iconAbsolutePath, ext);\r\n            const iconFilename: string = `${iconBaseName}_${getFullHash(fsx.readFileSync(iconAbsolutePath))}${ext}`;\r\n\r\n            if (isDebug) {\r\n              // Debug icon should be relative to the serve root\r\n              iconResult = path.join(this.buildConfig.distFolder, iconFilename).replace(/\\\\/g, '/');\r\n              fsx.copySync(\r\n                iconAbsolutePath,\r\n                path.join(this.buildConfig.rootPath, this.buildConfig.distFolder, iconFilename)\r\n              );\r\n            } else {\r\n              // Production icon must be copied to the deployment directory\r\n              iconResult = this._resolveProductionPath(iconFilename) as string;\r\n              fsx.copySync(iconAbsolutePath, path.join(this.taskConfig.deployCdnPath, iconFilename));\r\n            }\r\n          }\r\n\r\n          return iconResult;\r\n\r\n        case IconPathType.AbsoluteUrl:\r\n          this.logVerbose(`Found absolute icon URL \"${iconPath}\"`);\r\n          break;\r\n\r\n        case IconPathType.RelativeUrl:\r\n          this.logWarning(`The icon path \"${iconPath}\" appears to be a relative web URL. This means that when the ` +\r\n          'is rendered, this URL will be relative to the CDN url for the rest of the package assets. If a relative ' +\r\n          'filesystem path was intended, prepend the path with \"./\".');\r\n          break;\r\n\r\n        default:\r\n          this.logWarning(`The icon path \"${iconPath}\" appears to be malformed. The icon may not render as expected.`);\r\n          break;\r\n      }\r\n\r\n      return iconPath;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a resource file from a path.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  private _getResource(resourcePath: string): any {\r\n    if (!this._localizedResourcesCache[resourcePath]) {\r\n      this._cacheResource(resourcePath);\r\n    }\r\n    return this._localizedResourcesCache[resourcePath];\r\n  }\r\n\r\n  /**\r\n   * Caches a resource file from a path.\r\n   * Because this execute in the build tools, function define is not defined,\r\n   * so a fake function is created that will return the default element of the module.\r\n   */\r\n  private _cacheResource(resourcePath: string): any { // tslint:disable-line:no-any\r\n    // Fake a define method to get the localizedResource module\r\n    // tslint:disable-next-line:no-unused-variable no-any\r\n    function define(name: any, deps: any, callback: any): any {\r\n      if (typeof name !== 'string') {\r\n        callback = deps;\r\n        deps = name;\r\n        name = undefined;\r\n      }\r\n\r\n      if (!Array.isArray(deps)) {\r\n        callback = deps;\r\n        deps = undefined;\r\n      }\r\n\r\n      const exports: { default?: any } = {}; // tslint:disable-line:no-any\r\n      const result: any = callback([undefined, exports]); // tslint:disable-line:no-any\r\n      return result.default || result || exports.default;\r\n    }\r\n\r\n    try {\r\n      // We can't get the localized module dynamically at this point.\r\n      // Reading and executing the module file in order to get the module\r\n      const resourcesFile: string = fsx.readFileSync(resourcePath, 'utf8');\r\n      // tslint:disable-next-line:no-eval\r\n      const resource: any = eval(resourcesFile); // tslint:disable-line:no-any\r\n\r\n      this._localizedResourcesCache[resourcePath] = resource;\r\n    } catch (error) {\r\n      this.logError(`Can't get resource '${resourcePath}'. ` +\r\n        \"Check that the module is correct and has doesn't require any external module.\");\r\n    }\r\n  }\r\n\r\n  private _generateManifest(\r\n    manifest: IClientSideComponentManifest,\r\n    loaderConfig: IClientSideComponentLoaderConfiguration\r\n  ): IClientSideComponentManifest {\r\n    delete manifest[schemaPropertyName];\r\n    manifest.loaderConfig = loaderConfig;\r\n\r\n    return manifest;\r\n  }\r\n\r\n  private _generateLoaderConfig(\r\n    entrypointExportName: string | undefined,\r\n    deployModules: IDeployModules,\r\n    internalModuleBaseUrls: string[],\r\n    resolvePath: (path: string | IPath) => string | IPath,\r\n    defaultLocaleOverride?: string,\r\n    onlyUseDefaultLocale?: boolean\r\n  ): IClientSideComponentLoaderConfiguration {\r\n    const scriptResources: { [name: string]: IModuleConfiguration } = {};\r\n\r\n    if (deployModules.pathModules) {\r\n      deployModules.pathModules.forEach((module: IPathModuleConfiguration, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'path';\r\n        scriptResources[id] = module;\r\n\r\n        module.path = resolvePath(module.path);\r\n      });\r\n    }\r\n\r\n    if (deployModules.localizedPathModules) {\r\n      deployModules.localizedPathModules.forEach((module: ILocalizedPathModuleConfiguration, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'localizedPath';\r\n        scriptResources[id] = module;\r\n\r\n        const oldPaths: { [locale: string]: string | IPath } = module.paths;\r\n        module.paths = {};\r\n\r\n        const lowercaseLocales: { [lowercaseLocale: string]: string } = {};\r\n        for (const locale in oldPaths) {\r\n          if (oldPaths.hasOwnProperty(locale)) {\r\n            const resourcePath: string | IPath = oldPaths[locale];\r\n            const lowercaseLocale: string = locale.toLowerCase();\r\n\r\n            const normalizedLocale: string = normalizeLocaleName(lowercaseLocale);\r\n            lowercaseLocales[lowercaseLocale] = normalizedLocale;\r\n\r\n            module.paths[normalizedLocale] = resolvePath(resourcePath);\r\n          }\r\n        }\r\n\r\n        const lowercaseDefaultLocaleOverride: string = (defaultLocaleOverride && defaultLocaleOverride.toLowerCase)\r\n          ? defaultLocaleOverride.toLowerCase()\r\n          : undefined;\r\n        if (lowercaseDefaultLocaleOverride && lowercaseDefaultLocaleOverride in lowercaseLocales) {\r\n          module.defaultPath = module.paths[lowercaseLocales[lowercaseDefaultLocaleOverride]];\r\n          if (Object.keys(module.paths).length <= 1) {\r\n            // Delete the paths object if the only built path is the default\r\n            delete module.paths;\r\n          }\r\n        } else {\r\n          module.defaultPath = resolvePath(module.defaultPath);\r\n        }\r\n\r\n        if (onlyUseDefaultLocale && module.defaultPath) {\r\n          delete module.paths;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (deployModules.componentModules) {\r\n      deployModules.componentModules.forEach((module: IComponentModuleConfiguration, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'component';\r\n        scriptResources[id] = module;\r\n\r\n        if (module.failoverPath) {\r\n          module.failoverPath = resolvePath(module.failoverPath);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!(deployModules.entryModuleId in scriptResources)) {\r\n      this.logError(`Entry module \"${deployModules.entryModuleId}\" is missing a definition. The manifest will not ` +\r\n                    'load');\r\n    }\r\n\r\n    const result: IClientSideComponentLoaderConfiguration = {\r\n      entryModuleId: deployModules.entryModuleId,\r\n      internalModuleBaseUrls: internalModuleBaseUrls.map((url: string) => ensureTrailingSlash(url)),\r\n      scriptResources: scriptResources\r\n    };\r\n\r\n    if (entrypointExportName) {\r\n      result.exportName = entrypointExportName;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private _resolveDebugPath(assetPath: string | IPath): string | IPath {\r\n    if (!assetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (typeof assetPath === 'string') {\r\n      // If this is a full URL, don't change it\r\n      if (isUrl(assetPath)) {\r\n        return assetPath;\r\n      } else {\r\n        return path.relative(this.buildConfig.rootPath, assetPath).replace(/\\\\/g, '/');\r\n      }\r\n    } else {\r\n      return {\r\n        default: this._resolveDebugPath(assetPath.default) as string,\r\n        debug: this._resolveDebugPath(assetPath.debug) as string\r\n      };\r\n    }\r\n  }\r\n\r\n  private _resolveProductionPath(assetPath: string | IPath): string | IPath {\r\n    if (!assetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (typeof assetPath === 'string') {\r\n      const assetPathStr: string = assetPath as string;\r\n\r\n      // If this is a full URL, don't change it\r\n      if (isUrl(assetPathStr)) {\r\n        return assetPathStr;\r\n      } else if (this.taskConfig.cdnUrlPrefix) {\r\n        return joinUrlSegments(this.taskConfig.cdnUrlPrefix, assetPathStr);\r\n      } else {\r\n        return trimLeadingSlashes(assetPathStr);\r\n      }\r\n    } else {\r\n      return {\r\n        default: this._resolveProductionPath(assetPath.default) as string,\r\n        debug: this._resolveProductionPath(assetPath.debug) as string\r\n      };\r\n    }\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}