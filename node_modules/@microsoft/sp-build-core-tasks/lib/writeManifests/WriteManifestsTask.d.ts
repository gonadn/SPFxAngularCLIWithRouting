/// <reference types="node" />
import * as Gulp from 'gulp';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import OdspGulpTask from './../OdspGulpTask';
import { ICumulativeManifestOptions } from './../cumulativeManifestProcessor';
export interface IWriteManifestsTaskConfig {
    /**
     * The deploy CDN path.
     */
    deployCdnPath?: string;
    /**
     * A prefix to prepend to all assets' URLs. For example, if this value is "foobar", a resulting CDN path for an asset
     *  called "baz.js" will be "foobar/baz.js"
     */
    cdnUrlPrefix?: string;
    /**
     * The CDN base path. This value will populate the "internalModuleBaseUrls" CDN manifest property.
     */
    cdnBasePath?: string;
    /**
     * The debug base path, which is the value that will populate the "internalModuleBaseUrls" manifest property for
     *  debug manifests.
     */
    debugBasePath?: string;
    /**
     * If specified, only use this locale in the debug manifest.
     */
    debugLocale?: string;
    /**
     * Options for the cumulative manifest files to be dropped in the dist folder. If this field is null, cumulative
     *  files will not be produced.
     */
    cumulativeManifestOptions?: ICumulativeManifestOptions;
    /**
     * A function that takes a manifest and returns an object. If defined, it is called on every production manifest
     *  before being written to disk.
     */
    postProcessProductionManifestFunction?: (manifest: IClientSideComponentManifest) => Object;
    /**
     * A function that takes a manifest and returns an object. If defined, it is called on every debug manifest
     *  before being written to disk.
     */
    postProcessDebugManifestsFunction?: (manifest: IClientSideComponentManifest) => Object;
}
/**
 * The type of icon URL defined in a user-created manifest.
 */
export declare enum IconPathType {
    /**
     * Something that doesn't fit into another category. A warning will be printed.
     */
    Malformed = 0,
    /**
     * An absolute URL. Something that begins with a protocol (i.e. - http://...).
     */
    AbsoluteUrl = 1,
    /**
     * A relative URL. Something that begins with an alphanumeric character, but doesn't look like a protocol.
     */
    RelativeUrl = 2,
    /**
     * A relative filesystem path. Something that begins with "./" or "../"
     */
    RelativePath = 3,
}
export declare function getIconPathType(iconPath: string | undefined): IconPathType | undefined;
/**
 * Writes a manifest for each entry in the project.
 *
 * Example:
 *  IN:
 *   the result of the prepareDeploy step enumerating each entry, each entry's dependencies, and a developer-generated
 *    base manifest for each entry.
 *
 *  OUT:
 *   a debug and, optionally, a production manifest for each entry.
 */
export declare class WriteManifestsTask extends OdspGulpTask<IWriteManifestsTaskConfig> {
    private _localizedResourcesCache;
    constructor();
    loadSchema(): Object;
    executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream;
    /**
     * Does some component-type-specific manifest processing.
     */
    private _doComponentTypeSpecificFixup(isDebug, manifest, manifestPath, defaultLocale, onlyUseDefaultLocale?);
    /**
     * Perform some final fixup on manifests.
     */
    private _doFinalManifestFixup(manifest);
    /**
     * Does webpart-specific manifest processing.
     */
    private _processWebpartManifest(isDebug, manifest, manifestPath, defaultLocale, onlyUseDefaultLocale?);
    /**
     * Localizes an Application manifest. This includes title and description of the Application
     */
    private _localizeApplicationManifest(manifest, defaultLocale, onlyUseDefaultLocale?);
    /**
     * Does extension-specific manifest processing.
     */
    private _processExtensionsManifest(isDebug, manifest, manifestPath, defaultLocale, onlyUseDefaultLocale?);
    /**
     * Localizes a string with an id in the web $moduleName:expression;
     * If the string to localize is not based on an id, it returns the input param untouched.
     */
    private _localizeString(stringToLocalize, defaultLocale, onlyUseDefaultLocale);
    /**
     * Localizes a string where it's been verified that the id follows the schema.
     * @param resourceName Name of the resource to load
     * @param expression Expression to be evaluated on the resource
     * @stringId Original id for the string. Used for logging purposes only
     * @returns Localized string with all found locales
     */
    private _localizeStringInternal(resourceName, expression, stringId);
    /**
     * Computes where an icon is on disk, copies it to the appropriate deployment directory
     *  depending on build flavor, and returns the correct path for the manifest.
     */
    private _processIconPath(isDebug, manifestPath, iconPath);
    /**
     * Gets a resource file from a path.
     */
    private _getResource(resourcePath);
    /**
     * Caches a resource file from a path.
     * Because this execute in the build tools, function define is not defined,
     * so a fake function is created that will return the default element of the module.
     */
    private _cacheResource(resourcePath);
    private _generateManifest(manifest, loaderConfig);
    private _generateLoaderConfig(entrypointExportName, deployModules, internalModuleBaseUrls, resolvePath, defaultLocaleOverride?, onlyUseDefaultLocale?);
    private _resolveDebugPath(assetPath);
    private _resolveProductionPath(assetPath);
}
