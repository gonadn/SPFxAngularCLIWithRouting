"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const index_1 = require("./index");
const MIN_BUNDLE_NAME_LENGTH = 6;
const MAX_BUNDLE_NAME_LENGTH = 64;
function migrateToLatestVersion(logWarning, configJson) {
    const config2SchemaPath = path.join(__dirname, './schemas/config.2.0.schema.json');
    const config2Schema = node_core_library_1.JsonFile.load(config2SchemaPath);
    const bundleNameRegexString = Object.keys(config2Schema.properties.bundles.patternProperties)[0];
    const bundleNameRegex = new RegExp(bundleNameRegexString);
    // Create a new bundle object to keep bundles in the same order
    const bundles = {};
    const modifiedNames = [];
    const tooShortNames = [];
    // We need to make sure all bundle names follow the V2 naming convention
    for (const bundleName in configJson.bundles) {
        if (bundleName.match(bundleNameRegex)) {
            bundles[bundleName] = configJson.bundles[bundleName];
        }
        else {
            modifiedNames.push(bundleName);
            const newBundleName = _migrateBundleName(bundleName);
            bundles[newBundleName] = configJson.bundles[bundleName];
            if (newBundleName.length < MIN_BUNDLE_NAME_LENGTH) {
                tooShortNames.push(newBundleName);
            }
        }
    }
    if (modifiedNames.length) {
        logWarning('Bundle names have been migrated to follow the V2 config.json schema. Modified bundle names: ' +
            `[${modifiedNames.join(', ')}]`);
    }
    if (tooShortNames.length) {
        logWarning('One or more of your bundle names are too short (less than 6 characters). Please update them: ' +
            `[${tooShortNames.join(', ')}]`);
    }
    configJson.bundles = bundles;
}
exports.migrateToLatestVersion = migrateToLatestVersion;
function readConfigFileAndMigrate(logWarning, logVerbose, filename = index_1.defaultConfigPath) {
    const configJsonResult = index_1.readConfigFile(logVerbose, filename);
    if (configJsonResult.configData) {
        migrateToLatestVersion(logWarning, configJsonResult.configData);
    }
    return configJsonResult;
}
exports.readConfigFileAndMigrate = readConfigFileAndMigrate;
/**
 * This algorithm takes a V1-allowed bundle name and modifies it to fit the V2 requirements. It:
 *  - Trims non-alphanumeric characters from the beginning and end of the string
 *  - Replaces uppercase characters with lowercase characters
 *  - Replaces non-alphanumeric characters with dashes ("-")
 *  - Truncates the string to 64 characters
 */
function _migrateBundleName(bundleName) {
    bundleName = bundleName.toLowerCase();
    bundleName = bundleName.replace(/^[^a-z0-9]+|[^a-z0-9]+$/g, '').replace(/[^a-z0-9]/g, '-');
    if (bundleName.length > MAX_BUNDLE_NAME_LENGTH) {
        return _migrateBundleName(bundleName.substr(0, MAX_BUNDLE_NAME_LENGTH));
    }
    else {
        return bundleName;
    }
}

//# sourceMappingURL=configJsonMigrator.js.map
