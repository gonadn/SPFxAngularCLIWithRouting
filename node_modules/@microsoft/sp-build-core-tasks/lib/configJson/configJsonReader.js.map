{"version":3,"sources":["configJson/configJsonReader.ts"],"names":[],"mappings":"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","file":"configJson/configJsonReader.js","sourcesContent":["import * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  JsonFile,\r\n  JsonSchema\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { IConfigJson as IV1ConfigJson } from './interfaces/config-v1';\r\nimport {\r\n  IConfigJson as ILatestConfigJson,\r\n  configJsonSchemaUrl\r\n} from './interfaces/config-v2';\r\n\r\nconst V1_SCHEMA: JsonSchema = JsonSchema.fromFile(path.join(__dirname, 'schemas', 'config.1.0.schema.json'));\r\nconst V2_SCHEMA: JsonSchema = JsonSchema.fromFile(path.join(__dirname, 'schemas', 'config.2.0.schema.json'));\r\n\r\nexport const defaultConfigPath: string = path.join(process.cwd(), 'config', 'config.json');\r\n\r\ninterface IVersionedConfigJson {\r\n  version?: string;\r\n}\r\n\r\nexport interface IBaseConfigJsonResult {\r\n  /**\r\n   * True if the file is missing.\r\n   */\r\n  missingFile: boolean;\r\n\r\n  /**\r\n   * Parse error data.\r\n   */\r\n  readError?: {};\r\n\r\n  /**\r\n   * The version of the original config file.\r\n   */\r\n  version?: string;\r\n\r\n  /**\r\n   * True if the config file is the latest version.\r\n   */\r\n  isLatestVersion?: boolean;\r\n}\r\n\r\nexport interface IConfigJsonResult extends IBaseConfigJsonResult {\r\n  /**\r\n   * The data in the config file.\r\n   */\r\n  configData?: ILatestConfigJson;\r\n}\r\n\r\nexport interface IV1ConfigJsonResult extends IBaseConfigJsonResult {\r\n  /**\r\n   * The data in the config file.\r\n   */\r\n  configData?: IV1ConfigJson;\r\n}\r\n\r\n/**\r\n * Read a V1 config file and translate it to the latest schema.\r\n */\r\nfunction _tryV1(filename: string, fileMetadata: IVersionedConfigJson): IConfigJsonResult | undefined {\r\n  const result: IConfigJsonResult = {\r\n    missingFile: false,\r\n    version: '1.0',\r\n    isLatestVersion: false\r\n  };\r\n\r\n  try {\r\n    const v1Config: IV1ConfigJson = JsonFile.loadAndValidate(filename, V1_SCHEMA);\r\n    const configData: ILatestConfigJson = {\r\n      '$schema': configJsonSchemaUrl,\r\n      version: '2.0',\r\n      bundles: {},\r\n      localizedResources: v1Config.localizedResources,\r\n      externals: v1Config.externals\r\n    };\r\n\r\n    if (v1Config.entries) {\r\n      for (const entry of v1Config.entries) {\r\n        const name: string = path.basename(entry.outputPath, path.extname(entry.outputPath));\r\n        configData.bundles[name] = {\r\n          components: [{\r\n            entrypoint: entry.entry,\r\n            manifest: entry.manifest\r\n          }]\r\n        };\r\n      }\r\n    }\r\n\r\n    if (configData.localizedResources) {\r\n      for (const resourceName of Object.getOwnPropertyNames(configData.localizedResources)) {\r\n        const resourcePath: string = configData.localizedResources[resourceName];\r\n        configData.localizedResources[resourceName] = path.posix.join('lib', resourcePath);\r\n      }\r\n    }\r\n\r\n    result.configData = configData;\r\n  } catch (error) {\r\n    if (!fileMetadata.version) {\r\n      result.readError = error;\r\n    } else {\r\n      // Failed to validate, not the right version\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Read a V2 config file. This is currently the latest config version\r\n */\r\nfunction _tryV2(filename: string, fileMetadata: IVersionedConfigJson): IConfigJsonResult | undefined {\r\n  const result: IConfigJsonResult = {\r\n    missingFile: false,\r\n    version: '2.0',\r\n    isLatestVersion: true\r\n  };\r\n\r\n  try {\r\n    const configData: ILatestConfigJson = JsonFile.loadAndValidate(filename, V2_SCHEMA);\r\n\r\n    result.configData = configData;\r\n  } catch (error) {\r\n    if (fileMetadata.version === result.version) {\r\n      result.readError = error;\r\n    } else {\r\n      // Failed to validate, not the right version\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst _parseFunctions: ((filename: string, fileMetadata: IVersionedConfigJson) => IConfigJsonResult | undefined)[] = [\r\n  _tryV2,\r\n  _tryV1\r\n];\r\n\r\nexport function readConfigFile( // tslint:disable-line:export-name\r\n  logVerbose: (message: string) => void,\r\n  filename: string = defaultConfigPath\r\n): IConfigJsonResult {\r\n  if (!fs.existsSync(filename)) {\r\n    return {\r\n      missingFile: true\r\n    };\r\n  } else {\r\n    logVerbose(`Found config file: ${path.basename(filename)}`);\r\n\r\n    let fileMetadata: IVersionedConfigJson;\r\n    try {\r\n      // Read the file to detect basic metadata\r\n      fileMetadata = JsonFile.load(filename);\r\n    } catch (error) {\r\n      return {\r\n        missingFile: false,\r\n        readError: error\r\n      };\r\n    }\r\n\r\n    let result: IConfigJsonResult | undefined = undefined;\r\n    for (let i: number = 0; i < _parseFunctions.length && !result; i++) {\r\n      result = _parseFunctions[i](filename, fileMetadata);\r\n    }\r\n\r\n    return result || {\r\n      missingFile: false,\r\n      version: fileMetadata.version,\r\n      isLatestVersion: false,\r\n      readError: 'Unknown config.json file format.'\r\n    };\r\n  }\r\n}\r\n\r\nexport function readV1ConfigFile( // tslint:disable-line:export-name\r\n  logVerbose: (message: string) => void,\r\n  filename: string = defaultConfigPath\r\n): IV1ConfigJsonResult {\r\n  if (!fs.existsSync(filename)) {\r\n    return {\r\n      missingFile: true\r\n    };\r\n  } else {\r\n    logVerbose(`Found config file: ${path.basename(filename)}`);\r\n\r\n    let result: IV1ConfigJsonResult  = {\r\n      missingFile: false,\r\n      version: '1.0',\r\n      isLatestVersion: false\r\n    };\r\n\r\n    try {\r\n      const v1Config: IV1ConfigJson = JsonFile.loadAndValidate(filename, V1_SCHEMA);\r\n      result.configData = v1Config;\r\n    } catch (error) {\r\n      result = {\r\n        missingFile: false,\r\n        version: result.version,\r\n        isLatestVersion: false,\r\n        readError: error\r\n      };\r\n    }\r\n\r\n    return result;\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}