{"version":3,"sources":["packageSolution/PackageSolutionTask.ts"],"names":[],"mappings":"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","file":"packageSolution/PackageSolutionTask.js","sourcesContent":["'use strict';\r\n\r\nimport * as colors from 'colors';\r\nimport * as Gulp from 'gulp';\r\nimport * as glob from 'glob';\r\nimport * as gutil from 'gulp-util';\r\nimport * as path from 'path';\r\nimport * as through2 from 'through2';\r\n\r\nimport { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';\r\nimport ISolution from './packageSolution/models/packageDefinition/ISolution';\r\nimport createPackage from './packageSolution/createPackage';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\nimport ManifestValidator,\r\n       { IManifestValidatorResult } from '@microsoft/sp-module-interfaces/lib/manifestSchemaValidator';\r\n\r\nexport interface IPackageSolutionTaskConfig {\r\n  paths?: {\r\n    /**\r\n     * The packaging root folder. Defaults to './sharepoint'. All other paths are relative to this folder.\r\n     */\r\n    packageDir?: string;\r\n\r\n    /**\r\n     * The folder to write the raw package to disk for debugging. Defaults to 'solution/debug'\r\n     */\r\n    debugDir?: string;\r\n\r\n    /**\r\n     * The name of the sppkg to create (including extension) Defaults to 'ClientSolution.sppkg'\r\n     */\r\n    zippedPackage?: string;\r\n\r\n    /**\r\n     * The folder containing the custom feature xml to import into the package. Defaults to 'feature_xml'.\r\n     * Note that all files in this folder will be included in the SPPKG, however, you must create a .rels\r\n     * file for your custom feature for it to be included in the package manifest.\r\n     */\r\n    featureXmlDir?: string;\r\n\r\n    /**\r\n     * The glob to match against to find manifest files. Looks in dist/ when running in normal, but deploy/ for\r\n     *  production.\r\n     */\r\n    manifestsMatch?: string;\r\n\r\n    /**\r\n     * The path to the folder where manifests and client-side build resources are placed.\r\n     * Defaults to buildConfig.distFolder\r\n     */\r\n    distributionDir?: string;\r\n\r\n    /**\r\n     * The directory containing Sharepoint assets (such as feature elements, element manifests, and upgrade actions),\r\n     * which will be automatically included in the sharepoint package. Defaults to 'assets'.\r\n     */\r\n    sharepointAssetDir?: string;\r\n  };\r\n\r\n  /** A mapping of extensions to content types for resources included in the package */\r\n  contentTypes?: { [extension: string]: string };\r\n\r\n  /**\r\n   * The definition of this solution's package, features, and components\r\n   */\r\n  solution?: ISolution;\r\n}\r\n\r\nexport class PackageSolutionTask extends GulpTask<IPackageSolutionTaskConfig> {\r\n  public cdnBasePath: string;\r\n  private _hasPrependedPaths: boolean = false;\r\n\r\n  constructor() {\r\n    super(\r\n      'package-solution',\r\n      {\r\n        paths: {\r\n          packageDir: 'sharepoint',\r\n          debugDir: path.join('solution', 'debug'),\r\n          zippedPackage: path.join('solution', 'ClientSolution.sppkg'),\r\n          featureXmlDir: 'feature_xml',\r\n          sharepointAssetDir: 'assets',\r\n          manifestsMatch: '*.json'\r\n        },\r\n        contentTypes: {\r\n          'xml': 'text/xml',\r\n          'rels': 'application/vnd.openxmlformats-package.relationships+xml',\r\n          'webpart': 'text/xml',\r\n          'htm': 'text/html',\r\n          'html': 'text/html',\r\n          'aspx': 'text/xml',\r\n          'resx': 'text/xml',\r\n          'js': 'application/javascript',\r\n          'json': 'application/json',\r\n          'png': 'image/png',\r\n          'jpg': 'image/jpeg',\r\n          'bmp': 'image/bmp',\r\n          'gif': 'image/gif'\r\n        },\r\n        solution: {\r\n          'name': 'A Sample Solution',\r\n          'id': '00000000-0000-0000-0000-000000000000'\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./package-solution.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: () => void): NodeJS.ReadWriteStream {\r\n    if (!this.taskConfig.paths.distributionDir) {\r\n      this.taskConfig.paths.distributionDir = this.buildConfig.distFolder;\r\n    }\r\n\r\n    const defaultCdnPath: string = '<!-- PATH TO CDN -->';\r\n    if (this.taskConfig.solution.includeClientSideAssets &&\r\n        this.cdnBasePath !== defaultCdnPath) {\r\n      // check the write-manifests task and see if the cdnBasePath has been changed\r\n      this.logWarning(colors.yellow(`The \"cdnBasePath\" in \"config/write-manifests.json\" has been changed from its`\r\n        + ` default value (\"${defaultCdnPath}\") to \"${this.cdnBasePath}\",`\r\n        + ` however the \"includeClientSideAssets\" setting`\r\n        + ` in \"config/package-solution.json\" is \"true\" and will be ignored.`\r\n        + ` If you meant to deploy your assets in your SPPKG to SharePoint,`\r\n        + ` reset the value of \"cdnBasePath\" to \"${defaultCdnPath}\".`));\r\n      this.taskConfig.solution.includeClientSideAssets = false;\r\n    }\r\n\r\n    if (this.taskConfig.solution.includeClientSideAssets && !this.buildConfig.production) {\r\n      this.logWarning(colors.yellow(`This is not a production build (--ship or --production),`\r\n        + ` therefore the \"includeClientSideAssets\" setting will be ignored.`));\r\n      this.taskConfig.solution.includeClientSideAssets = false;\r\n    }\r\n\r\n    this._prependBaseToConfigPaths();\r\n\r\n    const ignoredAssets: string[] = ['**/*.map'];\r\n\r\n    const manifestMap: Map<string, IClientSideComponentManifest> = new Map<string, IClientSideComponentManifest>();\r\n    let foundAnyManifests: boolean = false;\r\n    return gulp.src(this.taskConfig.paths.manifestsMatch, {\r\n      cwd: this.taskConfig.paths.distributionDir\r\n    })\r\n      .pipe(through2.obj((file: gutil.File, enc: string, callback: () => void) => {\r\n        foundAnyManifests = true;\r\n        const manifest: IClientSideComponentManifest =\r\n          JSON.parse((file.contents as Buffer).toString(enc));\r\n\r\n        const validationResult: IManifestValidatorResult = ManifestValidator.validateManifest(manifest);\r\n        if (!validationResult.result) {\r\n          this.log(`Ignoring manifest due to validation error: (${file.path}) use '--verbose' for more information`);\r\n          this.logVerbose(ManifestValidator.getFormattedErrorMessage(validationResult.errors));\r\n          callback();\r\n          return;\r\n        }\r\n\r\n        this.log(`Found manifest: ${file.path}`);\r\n        ignoredAssets.push(path.relative(this.taskConfig.paths.distributionDir, file.path));\r\n        manifestMap.set(manifest.id, manifest);\r\n        callback();\r\n      },\r\n        (callback: (err?: Error | string | void) => void) => {\r\n          if (!manifestMap.size) {\r\n            if (foundAnyManifests) {\r\n              callback(new Error(`Some manifests were found in '${this.taskConfig.paths.manifestsMatch}' ` +\r\n                ', but were not valid. Ensure paths.manifestsMatch is correct'));\r\n            } else {\r\n              callback(new Error(`No manifests were found in '${this.taskConfig.paths.manifestsMatch}'. ` +\r\n                'Ensure a build has completed successfully and that paths.manifestsMatch is correct'));\r\n            }\r\n          }\r\n\r\n          // read in all the assets, if necessary\r\n          if (this.taskConfig.solution.includeClientSideAssets) {\r\n            this.taskConfig.solution.clientSideAssets = glob.sync('**/*.*', {\r\n              ignore: ignoredAssets,\r\n              cwd: this.taskConfig.paths.distributionDir\r\n            }).map((filename: string) => {\r\n              this.log(colors.cyan(`Found client-side build resource: ${filename}`));\r\n\r\n              return {\r\n                originalFilename: path.join(\r\n                  this.taskConfig.paths.distributionDir,\r\n                  filename\r\n                ),\r\n                packageFilename: filename\r\n              };\r\n            });\r\n          }\r\n\r\n          createPackage(this.taskConfig, manifestMap).then(callback, callback);\r\n        }));\r\n  }\r\n\r\n  public getCleanMatch(buildConfig: IBuildConfig): string[] {\r\n    this.buildConfig = buildConfig;\r\n\r\n    if (!this.taskConfig.paths.distributionDir) {\r\n      this.taskConfig.paths.distributionDir = this.buildConfig.distFolder;\r\n    }\r\n\r\n    this._prependBaseToConfigPaths();\r\n    return [\r\n      this.taskConfig.paths.debugDir,\r\n      this.taskConfig.paths.zippedPackage\r\n    ];\r\n  }\r\n\r\n  private _prependBaseToConfigPaths(): void {\r\n    if (!this._hasPrependedPaths) {\r\n      this.taskConfig.paths.debugDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.debugDir);\r\n      this.taskConfig.paths.zippedPackage =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.zippedPackage);\r\n      this.taskConfig.paths.featureXmlDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.featureXmlDir);\r\n      this.taskConfig.paths.sharepointAssetDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.sharepointAssetDir);\r\n      this._hasPrependedPaths = true;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}