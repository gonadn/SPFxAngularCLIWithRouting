{"version":3,"sources":["packageSolution/packageSolution/xmlGenerators/createSolutionXml.ts"],"names":[],"mappings":"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","file":"packageSolution/packageSolution/xmlGenerators/createSolutionXml.js","sourcesContent":["/**\r\n * @file createSolutionXml.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Creates an package's Solution.Xml for a ClientSideSolution\r\n */\r\n\r\n/// <reference path='./xml.d.ts' />\r\n\r\nimport * as path from 'path';\r\nimport * as uuid from 'uuid';\r\n\r\nimport * as XmlGenerator from 'xml';\r\nimport { merge } from 'lodash';\r\n\r\nimport createRelationshipsXml, {IRelationship} from './createRelationshipsXml';\r\nimport createFeatureXml from './createFeatureXml';\r\nimport createIcon from './createIcon';\r\nimport constants from '../config/constants';\r\nimport serializationOptions from './serializationOptions';\r\nimport ISolution from '../models/packageDefinition/ISolution';\r\nimport IFeature from '../models/packageDefinition/IFeature';\r\nimport IFile from '../models/packageXml/IFile';\r\nimport IOpenDocumentConventionXml from '../models/packageXml/IOpenDocumentConventionXml';\r\nimport IPackageXml from '../models/packageXml/IPackageXml';\r\nimport IFeatureXml from '../models/packageXml/IFeatureXml';\r\nimport IIcon from '../models/packageXml/IIcon';\r\nimport IResources from '../models/packageXml/IResources';\r\n\r\n// tslint:disable-next-line:no-any\r\nfunction createContentTypeXml(extension: string, mimeType: string): any {\r\n  return {\r\n    Default: [\r\n      {\r\n        _attr: {\r\n          Extension: extension,\r\n          ContentType: mimeType\r\n        }\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nexport default\r\n  function createSolutionXml(\r\n    solution: ISolution,\r\n    customFeatureFilenames: string[],\r\n    resources: IResources,\r\n    contentTypes: { [extension: string]: string } | undefined): IPackageXml {\r\n  solution = merge({\r\n    version: '1.0.0.0'\r\n  }, solution) as ISolution;\r\n\r\n  // Create the top-level .rels file which points at the AppManifest\r\n  const relationshipsXml: IFile = createRelationshipsXml('',\r\n    [\r\n      {\r\n        type: 'package-manifest',\r\n        target: constants.appManifestFileName\r\n      }\r\n    ]);\r\n\r\n  // Create the top-level content types, defining content types in this package\r\n  const contentTypesMap: Map<string, string> = new Map<string, string>();\r\n  if (contentTypes) {\r\n    Object.keys(contentTypes).forEach((extension: string) => {\r\n      contentTypesMap.set(extension, contentTypes[extension]);\r\n    });\r\n  }\r\n\r\n  if (solution.includeClientSideAssets) {\r\n    solution.clientSideAssets.forEach((file: { originalFilename: string, packageFilename: string }) => {\r\n      const extension: string = path.extname(file.originalFilename).substr(1);\r\n\r\n      if (!contentTypesMap.has(extension)) {\r\n        contentTypesMap.set(extension, 'application/octet-stream');\r\n      }\r\n    });\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  const contentTypeInformation: Array<any> = [\r\n    {\r\n      _attr: {\r\n        xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n      }\r\n    }\r\n  ];\r\n  contentTypesMap.forEach((mimeType: string, extension: string) => {\r\n    contentTypeInformation.push(createContentTypeXml(extension, mimeType));\r\n  });\r\n\r\n  const contentTypesXml: IFile = {\r\n    filename: constants.contentTypesXmlFilename,\r\n    contents: new Buffer(XmlGenerator({\r\n      Types: contentTypeInformation\r\n    }, serializationOptions))\r\n  };\r\n\r\n  // Create the top-level AppManifest's XML, note that it is missing relationships\r\n  const manifestXml: IOpenDocumentConventionXml = {\r\n    filename: constants.appManifestFileName,\r\n    /* tslint:disable:no-null-keyword */\r\n    relationships: null,\r\n    /* tslint:enable:no-null-keyword */\r\n    contents: new Buffer(XmlGenerator({\r\n      App: buildAppManifestJson(solution)\r\n    }, serializationOptions))\r\n  };\r\n\r\n  // Collect the XML for the individual features\r\n  const featuresXml: IFeatureXml[] =\r\n    solution.features.map((feature: IFeature) => createFeatureXml(feature, resources));\r\n\r\n  const clientSideAssetsFeatureFileName: string = 'ClientSideAssets.xml';\r\n\r\n  if (solution.includeClientSideAssets) {\r\n\r\n    // generate a guid\r\n    const guid: string = uuid.v4();\r\n\r\n    const clientSideAssetsFeature: IFeature = {\r\n      title: 'Client Side Assets',\r\n      description: 'A feature that help deploy client side component assets to SharePoint Online.',\r\n      id: guid,\r\n      version: '1.0.0.0',\r\n\r\n      components: [],\r\n      assets: {\r\n        elementFiles: [],\r\n        elementManifests: [],\r\n        upgradeActions: []\r\n      }\r\n    };\r\n\r\n    // create a new feature for Assets:\r\n    //    => ClientSideAssets.xml\r\n    //    => ClientSideAssets.xml.config.xml\r\n    const clientSideFeatureXml: IFeatureXml = createFeatureXml(clientSideAssetsFeature, {\r\n        localizedResourcePaths: [],\r\n        defaultResourcePath: undefined\r\n      },\r\n      solution.clientSideAssets,\r\n      clientSideAssetsFeatureFileName\r\n    );\r\n\r\n    featuresXml.push(clientSideFeatureXml);\r\n  }\r\n\r\n  // Create icon data if a path to an icon is provided\r\n  const icon: IIcon = solution.iconPath ? createIcon(solution.iconPath) : undefined;\r\n\r\n  // Ensure the Manifest's relationships to features are stored\r\n  let relsList: IRelationship[] = featuresXml.map((feature: IFeatureXml) => {\r\n    return {\r\n      type: (feature.filename === clientSideAssetsFeatureFileName)\r\n        ? 'manifest-clientsideasset'\r\n        : 'manifest-feature',\r\n      target: feature.filename\r\n    };\r\n  });\r\n  relsList = relsList.concat(customFeatureFilenames.map((filename: string) => {\r\n    return {\r\n      type: 'manifest-feature',\r\n      target: filename\r\n    };\r\n  }));\r\n\r\n  relsList = relsList.concat(resources.localizedResourcePaths.map((filename: string) => {\r\n    return {\r\n      type: 'content-resource',\r\n      target: filename\r\n    };\r\n  }));\r\n\r\n  if (resources.defaultResourcePath) {\r\n    relsList = relsList.concat({\r\n        type: 'content-defaultresource',\r\n        target: resources.defaultResourcePath\r\n    });\r\n  }\r\n\r\n  if (icon) {\r\n    relsList = relsList.concat({\r\n        type: 'manifest-icon',\r\n        target: icon.path\r\n    });\r\n  }\r\n\r\n  manifestXml.relationships = createRelationshipsXml(constants.appManifestFileName, relsList);\r\n\r\n  return {\r\n    manifest: manifestXml,\r\n    features: featuresXml,\r\n    relationships: relationshipsXml,\r\n    contentTypesXml: contentTypesXml,\r\n    icon: icon,\r\n    customFiles: undefined\r\n  };\r\n}\r\n\r\nfunction buildAppManifestJson(solution: ISolution): {}[]  {\r\n  const appXmlContents: {}[] = [];\r\n  appXmlContents.push({ _attr: buildAttributesJson(solution) });\r\n  appXmlContents.push({ Properties: buildPropertiesJson(solution) });\r\n\r\n  /* tslint:disable-next-line:typedef */\r\n  const webApiPermissionRequests = buildWebApiPermissionRequestsJson(solution);\r\n  if (webApiPermissionRequests) {\r\n    appXmlContents.push({ WebApiPermissionRequests: webApiPermissionRequests });\r\n  }\r\n  return appXmlContents;\r\n}\r\n\r\nfunction buildAttributesJson(solution: ISolution): {} {\r\n  const attributes: {} =  {\r\n    xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/manifest',\r\n    Name: solution.name,\r\n    ProductID: solution.id,\r\n    Version: solution.version,\r\n    SharePointMinVersion: '16.0.0.0',\r\n    IsClientSideSolution: 'true'\r\n  };\r\n\r\n  if (solution.skipFeatureDeployment) {\r\n    // SkipFeatureDeployment should not be present in the Solution XML unless it is set to true\r\n    // tslint:disable-next-line:no-string-literal\r\n    attributes['SkipFeatureDeployment'] = solution.skipFeatureDeployment;\r\n  }\r\n  return attributes;\r\n}\r\n\r\nfunction buildPropertiesJson(solution: ISolution): {}[] {\r\n  const properties: {}[] = [];\r\n\r\n  // Add title to properties\r\n  properties.push({\r\n    Title: solution.title ? solution.title : solution.name\r\n  });\r\n\r\n  // Add supported locales to properties, if needed\r\n  /* tslint:disable:typedef */\r\n  const supportedLocales = solution.supportedLocales && solution.supportedLocales.length > 0\r\n  /* tslint:enable:typedef */\r\n    ? solution.supportedLocales.map((locale: string) => {\r\n      return {\r\n        SupportedLocale: [\r\n          {\r\n            _attr: {\r\n                CultureName: locale\r\n            }\r\n          }\r\n        ]\r\n      };\r\n    })\r\n    : undefined;\r\n\r\n  if (supportedLocales) {\r\n    properties.push({\r\n      SupportedLocales: supportedLocales\r\n    });\r\n  }\r\n  return properties;\r\n}\r\n\r\nfunction buildWebApiPermissionRequestsJson(solution: ISolution): {} {\r\n  /* tslint:disable-next-line:typedef */\r\n  const webApiPermissionRequests = solution.webApiPermissionRequests && solution.webApiPermissionRequests.length > 0\r\n    ? solution.webApiPermissionRequests.map((webApiPermissionRequest) => {\r\n      return {\r\n        WebApiPermissionRequest: [\r\n          {\r\n            _attr: {\r\n                ResourceId: webApiPermissionRequest.resource,\r\n                Scope: webApiPermissionRequest.scope\r\n            }\r\n          }\r\n        ]\r\n      };\r\n    }) : undefined;\r\n  return webApiPermissionRequests;\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}