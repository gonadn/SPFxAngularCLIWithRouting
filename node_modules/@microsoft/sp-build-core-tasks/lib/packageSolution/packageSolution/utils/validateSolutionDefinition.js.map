{"version":3,"sources":["packageSolution/packageSolution/utils/validateSolutionDefinition.ts"],"names":[],"mappings":";;AAAA,gEAAkD;AAOlD;;GAEG;AACH,oCACE,OAAmC,EACnC,cAA+B,EAC/B,aAAoC,sBAAI;IAExC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAC3C,IAAI,UAAU,GAAY,KAAK,CAAC;QAEhC,2FAA2F;QAC3F,MAAM,gBAAgB,GAAW,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAiB;YAC/E,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAqB;gBAC/C,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,KAAK,WAAW,CAAC,CAAC,CAAC;oBACrD,UAAU,CAAC,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,+DAA+D;0BACjG,gGAAgG;0BAChG,uGAAuG,CAAC,CAAC;oBAC7G,UAAU,GAAG,IAAI,CAAC;gBACpB,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM;kBACrC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM;kBACtC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;QAC3C,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAY,EAAE,GAAW,OAAO,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjE,MAAM,aAAa,GAAY,CAAC,CAAC,CAAC,gBAAgB,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAElF,gFAAgF;QAChF,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,UAAU,CAAC,kGAAkG;kBACzG,uGAAuG;kBACvG,8CAA8C,CAAC,CAAC;YACpD,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC;QAED,MAAM,CAAC,CAAC,UAAU,CAAC;IACrB,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AArCD,gEAqCC","file":"packageSolution/packageSolution/utils/validateSolutionDefinition.js","sourcesContent":["import { warn } from '@microsoft/gulp-core-build';\r\n\r\nimport { IPackageSolutionTaskConfig } from '../../PackageSolutionTask';\r\nimport { ICustomFeatures } from './readCustomFeatures';\r\nimport IComponent from '../models/packageDefinition/IComponent';\r\nimport IFeature from '../models/packageDefinition/IFeature';\r\n\r\n/**\r\n * Checks that a solution definition is valid\r\n */\r\nexport function validateSolutionDefinition(\r\n  options: IPackageSolutionTaskConfig,\r\n  customFeatures: ICustomFeatures,\r\n  logWarning: (msg: string) => void = warn): boolean {\r\n\r\n  if (options.solution.skipFeatureDeployment) {\r\n    let hasWarning: boolean = false;\r\n\r\n    // iterate each feature, counting the customAssets. If there is an Extension, log a warning\r\n    const customAssetFiles: number = options.solution.features.map((feature: IFeature) => {\r\n      feature.components.forEach((component: IComponent) => {\r\n        if (component.manifest.componentType === 'Extension') {\r\n          logWarning(`${component.manifest.alias}: Admins can make this solution available to all sites in the`\r\n            + ` organization, but extensions wonâ€™t automatically appear. SharePoint Framework extensions must`\r\n            + ` be specifically associated to sites, lists, and fields programmatically to be visible to site users.`);\r\n          hasWarning = true;\r\n        }\r\n      });\r\n\r\n      return feature.assets.elementFiles.length\r\n        + feature.assets.elementManifests.length\r\n        + feature.assets.upgradeActions.length;\r\n    }).reduce((prev: number, cur: number) => { return cur + prev; });\r\n\r\n    const hasFeatureXml: boolean = !!(customAssetFiles + customFeatures.files.length);\r\n\r\n    // if there is feature XML or Custom Assets, we have encountered a serious error\r\n    if (hasFeatureXml) {\r\n      logWarning(`Admins can make this solution available to all sites immediately, but the solution also contains`\r\n        + ` feature.xml elements for provisioning. Feature.xml elements are not automatically applied unless the`\r\n        + ` solution is explicitly installed on a site.`);\r\n      hasWarning = true;\r\n    }\r\n\r\n    return !hasWarning;\r\n  }\r\n  return true;\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}