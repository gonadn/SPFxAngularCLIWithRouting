{"version":3,"sources":["packageSolution/packageSolution/createPackage.ts"],"names":[],"mappings":"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","file":"packageSolution/packageSolution/createPackage.js","sourcesContent":["/**\r\n * @file createPackage.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Creates a client-side app package and writes it to disk\r\n */\r\n\r\nimport colors = require('colors');\r\n\r\nimport { IPackageSolutionTaskConfig } from '../PackageSolutionTask';\r\nimport IPackageXml from './models/packageXml/IPackageXml';\r\nimport IResources from './models/packageXml/IResources';\r\nimport normalizeSolutionDefinition from './utils/normalizeSolutionDefinition';\r\nimport createSolutionXml from './xmlGenerators/createSolutionXml';\r\nimport readCustomFeatures, { ICustomFeatures } from './utils/readCustomFeatures';\r\nimport { validateSolutionDefinition } from './utils/validateSolutionDefinition';\r\nimport readResources from './utils/readResources';\r\nimport writePackage from './writePackage';\r\n\r\nimport {\r\n  log,\r\n  error as logError\r\n} from '@microsoft/gulp-core-build';\r\n\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\n\r\n/**\r\n * Creates and writes a package to disk using a package definition and manifest mapping\r\n */\r\nexport default\r\n  function createPackage(\r\n  config: IPackageSolutionTaskConfig,\r\n  manifests: Map<string, IClientSideComponentManifest>):\r\n  Promise<void> {\r\n  // @todo instead of using try/catch we should move config validation to a separate function\r\n  try {\r\n    log(colors.yellow('Verifying configuration...'));\r\n\r\n    if (!manifests || !manifests.size) {\r\n      throw new Error('The webparts manifests list is empty. ' +\r\n        'Please ensure you have done a build and that your config file is pointed at the correct folder.');\r\n    }\r\n\r\n    if (!config.paths.zippedPackage || config.paths.zippedPackage === '') {\r\n      throw new Error('The package-solution.json config is missing a package name.');\r\n    }\r\n\r\n    log(colors.green('Done!'));\r\n    log();\r\n\r\n    log(colors.yellow('Normalizing solution information...'));\r\n    normalizeSolutionDefinition(config, manifests);\r\n    log(colors.green('Done!'));\r\n    log();\r\n\r\n    log(colors.yellow('Reading custom Feature XML...'));\r\n    return readCustomFeatures(config).then(\r\n      (customFeatures: ICustomFeatures) => {\r\n        log(colors.green('Done!'));\r\n        log();\r\n\r\n        log(colors.yellow('Validating App Package...'));\r\n        validateSolutionDefinition(config, customFeatures);\r\n        log(colors.green('Done!'));\r\n        log();\r\n\r\n        log(colors.yellow('Reading resources...'));\r\n        return readResources(config).then(\r\n          (resources: IResources) => {\r\n            log(colors.green('Done!'));\r\n            log();\r\n\r\n            log(colors.yellow('Reading Sharepoint Assets & Creating XML...'));\r\n\r\n            const solutionXml: IPackageXml = createSolutionXml(\r\n              config.solution,\r\n              customFeatures.customFeatureFilepath,\r\n              resources,\r\n              config.contentTypes);\r\n            log(colors.green('Done!'));\r\n            log();\r\n\r\n            solutionXml.customFiles = customFeatures.files;\r\n\r\n            log(colors.yellow(`Writing solution XML to ${config.paths.debugDir}...`));\r\n            return writePackage(solutionXml, config).then(\r\n              () => {\r\n                log(colors.green('Done!'));\r\n                log();\r\n                log(colors.bold.green('ALL DONE!'));\r\n                log();\r\n              },\r\n              (error) => {\r\n                logError(colors.red(error));\r\n              }\r\n            );\r\n          },\r\n          (error) => {\r\n            logError(colors.red(error));\r\n          }\r\n        );\r\n      },\r\n      (error) => {\r\n        logError(colors.red(error));\r\n      }\r\n    );\r\n\r\n  } catch (error) {\r\n    logError(colors.red(error));\r\n    if (error.stack) {\r\n      logError(error.stack);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}