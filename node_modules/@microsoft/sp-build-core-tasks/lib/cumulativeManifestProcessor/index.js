"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Url = require("url");
const path = require("path");
const fs = require("fs");
const lodash_1 = require("lodash");
const Webpack = require("webpack");
const webpackStream = require("webpack-stream");
const node_core_library_1 = require("@microsoft/node-core-library");
const FileUtils_1 = require("./../utilities/FileUtils");
const Resolve_1 = require("./../utilities/Resolve");
const url_1 = require("./../utilities/url");
const cumulativeManifestFileName = 'manifests';
var ForceSearch;
(function (ForceSearch) {
    /**
     * Don't force a manifest search anywhere. Use the manifests.json file everywhere if it's found.
     */
    ForceSearch[ForceSearch["none"] = 0] = "none";
    /**
     * Don't force a manifest search in the first project, but use the manifests.json file in other packages.
     */
    ForceSearch[ForceSearch["shallow"] = 1] = "shallow";
    /**
     * Don't use the manifests.json file anywhere, and search every single package.
     */
    ForceSearch[ForceSearch["deep"] = 2] = "deep";
    /**
     * Don't use the manifests.json file anywhere, but only recurse in packages where other manifests were found.
     */
    ForceSearch[ForceSearch["deepSparse"] = 3] = "deepSparse";
    /**
     * Don't use the manifests.json file anywhere, but only recurse in packages where other manifests were found,
     *  except for the first project. Always recurse from the first project. This option is useful if it's uncertain
     *  whether the first project has been built, but otherwise "deepSparse" is intended behavior.
     */
    ForceSearch[ForceSearch["deepSparseIgnoreFirstProject"] = 4] = "deepSparseIgnoreFirstProject";
})(ForceSearch = exports.ForceSearch || (exports.ForceSearch = {}));
class CumulativeManifestProcessor {
    constructor(parentTask, options = {}) {
        this._options = options;
        this._parentTask = parentTask;
        this._discoveryCache = new Map();
    }
    /**
     * Ths function:
     *  1. discovers all packages referenced in package.json
     *  2a. looks for a file in each discovered project's temp folder called manifests.json
     *  2b. looks for <id>.manifest.json files in the dist folder
     *  3. keeps a record of all of the manifests discovered in the referenced projects, and resolves duplicates by
     *      taking the newest file
     *  4. generates new base URLs for each of the referenced projects' manifests to make them valid when "gulp serve"
     *      is run from this current project's directory
     *  5. collects all of these discovered manifests and the debugManifests parameter and generates an array of all
     *      manifests
     *  6. filters this array by the ignoreOutputManifestIds options
     *  7. drops a JSON file in the temp directory called manifests.json containing this array
     *  9. drops an initialization script in the temp directory called manifests.js that
     *      exports two functions. One that returns the array with the manifests' base URLs as fully-qualified, and the
     *      other with manifests' base URLs as relative to the page root.
     */
    generateCumulativeManifest(gulp, debugManifests) {
        if (!this._options) {
            this._parentTask.logVerbose('No cumulative manifest options specified. Skipping cumulative manifest generation.');
            return;
        }
        const referencedProjectManifests = this.discoverManifests(this._parentTask.buildConfig.rootPath, ForceSearch.shallow);
        const result = [];
        const baseUrl = this._options.baseUrl || 'https://localhost:4321'; // Default if one isn't already defined
        const manifests = {};
        for (const id in referencedProjectManifests) {
            if (!this._options.ignoreOutputManifestIds || this._options.ignoreOutputManifestIds.indexOf(id) === -1) {
                manifests[id] = this._getTransformedManifest(referencedProjectManifests[id], baseUrl);
            }
        }
        debugManifests.forEach((manifest) => {
            if (!this._options.ignoreOutputManifestIds || this._options.ignoreOutputManifestIds.indexOf(manifest.id) === -1) {
                manifests[manifest.id] = manifest;
            }
        });
        const manifestsArray = Object.keys(manifests).map((id) => manifests[id]);
        // Write the manifests.json file
        result.push(FileUtils_1.writeStringToFile(JSON.stringify(manifestsArray, undefined, 2), `${cumulativeManifestFileName}.json`)
            .pipe(gulp.dest(this._parentTask.buildConfig.tempFolder)));
        // Write the manifests.js file
        result.push(gulp.src(this.manifestsFilePath)
            .pipe(webpackStream(this.getManifestsFileWebpackConfig(manifestsArray), Webpack, // Make sure we use Webpack 2
        (error, stats) => {
            if (error) {
                this._parentTask.logError(`Error generating cumulative manifest: ${error.toString()}`);
            }
        }))
            .pipe(gulp.dest(this._parentTask.buildConfig.tempFolder)));
        return result;
    }
    get manifestsFilePath() {
        return path.join(__dirname, 'manifestsFile.js');
    }
    getManifestsFileWebpackConfig(manifestsArray) {
        return {
            entry: this.manifestsFilePath,
            output: {
                library: 'debugManifests',
                libraryTarget: 'umd',
                path: path.join(this._parentTask.buildConfig.rootPath, this._parentTask.buildConfig.tempFolder),
                filename: `${cumulativeManifestFileName}.js`
            },
            plugins: [
                new Webpack.DefinePlugin({
                    MANIFESTS_ARRAY: JSON.stringify(manifestsArray, undefined, 2)
                })
            ]
        };
    }
    reset() {
        this._discoveryCache.clear();
    }
    discoverManifests(packagePath, forceSearchMode) {
        const resolvedPackagePath = fs.realpathSync(packagePath);
        if (this._discoveryCache.has(resolvedPackagePath)) {
            return this._discoveryCache.get(resolvedPackagePath);
        }
        const referencedProjectManifests = {};
        const tempPath = path.join(resolvedPackagePath, this._parentTask.buildConfig.tempFolder || 'temp');
        const distPath = path.join(resolvedPackagePath, this._parentTask.buildConfig.distFolder || 'dist');
        const packageJsonPath = path.join(resolvedPackagePath, 'package.json');
        // We want to make sure if we have multiple files with the same component's manifest, we pick the one that
        //  was generated most recently.
        let fileModifiedTime = 0;
        let linkedProjectManifests = undefined;
        let foundCumulativeManifestsFile = false;
        if (forceSearchMode === ForceSearch.none) {
            try {
                const manifestMapPath = path.join(tempPath, `${cumulativeManifestFileName}.json`);
                const fileStats = fs.statSync(manifestMapPath);
                fileModifiedTime = fileStats.mtime.getTime();
                linkedProjectManifests = lodash_1.cloneDeep(require(manifestMapPath));
                foundCumulativeManifestsFile = true;
            }
            catch (e) {
                this._parentTask.logVerbose(`Unable to get "manifests.json" file for project in "${packagePath}". We'll ` +
                    'try to get each manifest separately');
            }
        }
        // If we didn't find a manifests.json file, we should look for individual <id>.manifest.json files.
        if (!linkedProjectManifests) {
            linkedProjectManifests = [];
            // Look for files called something like "abc123.manifest.json" without any leading slashes or extra periods
            const manifestFileRegExp = /^[^\.\\\/]+\.manifest\.json$/;
            try {
                fs.readdirSync(distPath).forEach((distFilename) => {
                    if (distFilename.match(manifestFileRegExp)) {
                        try {
                            const distFilePath = path.join(distPath, distFilename);
                            const fileStats = fs.statSync(distFilePath);
                            // PBI:417074 validate the manifest schema.
                            const manifestData = lodash_1.cloneDeep(node_core_library_1.JsonFile.load(distFilePath));
                            linkedProjectManifests.push(manifestData);
                            fileModifiedTime = Math.max(fileModifiedTime, fileStats.mtime.getTime());
                        }
                        catch (e) { }
                    }
                });
            }
            catch (e) {
                /* Error getting manifest file data */
            }
        }
        if (!foundCumulativeManifestsFile && (forceSearchMode === ForceSearch.deep ||
            forceSearchMode === ForceSearch.deepSparseIgnoreFirstProject ||
            linkedProjectManifests.length > 0)) {
            // If this project has manifests, or we're forcing search, let's look in its references in other projects
            const packages = new Map();
            try {
                const packageJson = require(path.join(resolvedPackagePath, 'package.json'));
                const getPackages = (refs, optional) => {
                    if (refs) {
                        for (const packageName in refs) {
                            if (refs.hasOwnProperty(packageName)) {
                                packages.set(packageName, optional);
                            }
                        }
                    }
                };
                getPackages(packageJson.dependencies, false);
                getPackages(packageJson.devDependencies, true);
                getPackages(packageJson.optionalDependencies, true);
            }
            catch (e) { }
            // Search each referenced project for manifests
            packages.forEach((optional, packageName) => {
                let referencedPackagePath;
                try {
                    referencedPackagePath = Resolve_1.resolvePackage(packageName, packagePath);
                }
                catch (e) { }
                if (referencedPackagePath) {
                    const recursiveForceSearchMode = (forceSearchMode === ForceSearch.shallow)
                        ? ForceSearch.none
                        : (forceSearchMode === ForceSearch.deepSparseIgnoreFirstProject
                            ? ForceSearch.deepSparse
                            : forceSearchMode);
                    const manifests = this.discoverManifests(referencedPackagePath, recursiveForceSearchMode);
                    for (const manifestId in manifests) {
                        if (manifests.hasOwnProperty(manifestId)) {
                            referencedProjectManifests[manifestId] = manifests[manifestId];
                        }
                    }
                }
                else if (!optional) {
                    // Only warn if this isn't an optional package
                    this._parentTask.logWarning(`Unable to resolve project "${packageName}". ` +
                        'Ensure it has been linked.');
                }
            });
        }
        // If we found any manifests directly linked to this project, merge them into the manifests discovered in other
        // projects
        if (linkedProjectManifests) {
            let packageName;
            const manifestsToFilter = [];
            // Include the package name if we found a single project manifest in the dist folder
            let isSinglePackage = linkedProjectManifests.length === 1;
            if (!isSinglePackage && linkedProjectManifests.length === 2) {
                if (linkedProjectManifests[0].id === linkedProjectManifests[1].rootComponentId ||
                    linkedProjectManifests[1].id === linkedProjectManifests[0].rootComponentId) {
                    // If we have two manifests, determine if one is the assembly of the other
                    isSinglePackage = true;
                    const assemblyId = linkedProjectManifests[1].rootComponentId
                        ? linkedProjectManifests[1].id
                        : linkedProjectManifests[0].id;
                    if (!this._options.explicitInclude || this._options.explicitInclude.indexOf(assemblyId) === -1) {
                        // We want to filter the assemblies manifest because we never want an assembly's ID to be a dependency
                        manifestsToFilter.push(assemblyId);
                    }
                }
            }
            if (isSinglePackage) {
                try {
                    const packageJson = require(packageJsonPath);
                    packageName = packageJson.name;
                }
                catch (e) { }
            }
            for (const manifest of linkedProjectManifests) {
                if (manifestsToFilter.indexOf(manifest.id) === -1) {
                    const id = manifest.id;
                    const existingManifest = referencedProjectManifests[id];
                    if (!existingManifest || fileModifiedTime > existingManifest.manifestCreationTime) {
                        // Only update if this manifest is newer.
                        referencedProjectManifests[id] = {
                            manifestCreationTime: fileModifiedTime,
                            packagePath,
                            packageName,
                            manifestData: manifest
                        };
                    }
                }
            }
        }
        this._discoveryCache.set(resolvedPackagePath, referencedProjectManifests);
        return referencedProjectManifests;
    }
    _getTransformedManifest(referenceProject, baseUrl) {
        const relativePath = path.relative(this._parentTask.buildConfig.rootPath, referenceProject.packagePath);
        const manifest = referenceProject.manifestData;
        const baseUrls = manifest.loaderConfig.internalModuleBaseUrls || [];
        const url = url_1.joinUrlSegments(baseUrl, encodeURI(relativePath.replace(/\\/g, '/')));
        if (baseUrls.length > 0) {
            const existingUrl = Url.parse(baseUrls[0]);
            // Prepend the absolute path only if the original URL was an absolute URL
            baseUrls[0] = !!existingUrl.protocol ? url_1.joinUrlSegments(url, existingUrl.pathname) : baseUrls[0];
        }
        else {
            baseUrls[0] = url;
        }
        manifest.loaderConfig.internalModuleBaseUrls = baseUrls.map((internalModuleBaseUrl) => {
            const baseUrlObject = Url.parse(internalModuleBaseUrl);
            if (baseUrlObject.pathname) {
                baseUrlObject.pathname = baseUrlObject.pathname.replace(/\/\//g, '/');
            }
            internalModuleBaseUrl = Url.format(baseUrlObject);
            return url_1.ensureTrailingSlash(internalModuleBaseUrl);
        });
        return manifest;
    }
}
exports.default = CumulativeManifestProcessor;

//# sourceMappingURL=index.js.map
