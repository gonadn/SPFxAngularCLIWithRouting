"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
const child_process_1 = require("child_process");
const path = require("path");
const http = require("http");
const serveStatic = require("serve-static");
const glob = require("glob");
const finalhandler = require("finalhandler");
/**
 * CasperJS is a browser navigation scripting & testing utility written in Javascript for PhantomJS or SlimerJS.
 * This CasperJS task searches for files with the extension casperjstest.js and spawns child processes to execute
 * CasperJS tests. Test results will be reported to the build system and all errors will cause a build break.
 * PhantomJS has a known bug where it doesn't output errors to stderr, so some of the detailed error information
 * will be contained in the test result output.
 */
class CasperJSTask extends gulp_core_build_1.GulpTask {
    constructor() {
        super('casperjs-tests');
    }
    executeTask(gulp, completeCallback) {
        const osdpBuildTasksRoot = path.resolve(__dirname, '..', '..');
        process.env.CASPER_PATH = path.join(osdpBuildTasksRoot, '\\node_modules\\casperjs');
        process.env.CASPER_BIN = path.join(process.env.CASPER_PATH, '\\bin\\');
        process.env.PHANTOMJS = path.join(osdpBuildTasksRoot, '\\node_modules\\phantomjs-prebuilt\\lib\\phantom\\bin\\phantomjs.exe');
        const casperTestPromiseArray = [];
        this._getFiles(path.join(process.cwd(), '\\lib')).then((fileNames) => {
            if (fileNames.length < 1) {
                this.log('No casperJS tests found');
                completeCallback();
            }
            else {
                /* tslint:disable:no-any */
                const serve = serveStatic(process.cwd());
                const server = http.createServer((req, res) => {
                    const done = finalhandler(req, res);
                    /* tslint:enable:no-any */
                    serve(req, res, done);
                });
                let port = this._getRandomPortNumber();
                server.on('error', (e) => {
                    if (e.code === 'EADDRINUSE') {
                        this.logVerbose('Address in use, retrying...');
                        port = this._getRandomPortNumber();
                        setTimeout(() => {
                            server.close();
                            server.listen(port);
                        }, 1000);
                    }
                });
                server.listen(port);
                for (let i = 0; i < fileNames.length; i++) {
                    const command = [process.env.PHANTOMJS,
                        process.env.CASPER_BIN + 'bootstrap.js',
                        '--casper-path=' + process.env.CASPER_PATH,
                        '--cli test',
                        fileNames[i],
                        '--url='].join(' ');
                    server.on('listening', () => {
                        this.logVerbose('Listening to port ' + port);
                        casperTestPromiseArray.push(this._startCasperTestOnChildProcess(command + 'http://localhost:' + port));
                        if (casperTestPromiseArray.length === fileNames.length) {
                            Promise.all(casperTestPromiseArray).then((errors) => {
                                const errorMessage = this._createCasperJSErrorMessage(errors);
                                this.logVerbose('tests run on ' + fileNames.length + ' files');
                                errorMessage === '' ? completeCallback() : completeCallback(errorMessage);
                                server.close();
                            });
                        }
                    });
                }
            }
        });
        return;
    }
    _createCasperJSErrorMessage(errors) {
        return errors.filter((value) => {
            return value !== '';
        }).join();
    }
    _getFiles(dir) {
        return new Promise((complete) => {
            glob('**/*.caspertest.js', { cwd: dir }, (er, files) => {
                complete((files || []).map((name) => {
                    return path.resolve(dir, name);
                }));
            });
        });
    }
    _startCasperTestOnChildProcess(cmd) {
        return new Promise((complete) => {
            child_process_1.exec(cmd, (error, stdout, stderr) => {
                this.log('CasperJS Output: ' + stdout);
                complete([stderr, error].filter((value) => {
                    return value && value !== '';
                }).join('\n'));
            });
        });
    }
    _getRandomPortNumber() {
        const MAX_PORT = 65535;
        const MIN_PORT = 0;
        return Math.floor(Math.random() * (MAX_PORT - MIN_PORT + 1)) + MIN_PORT;
    }
}
exports.CasperJSTask = CasperJSTask;

//# sourceMappingURL=CasperJSTask.js.map
