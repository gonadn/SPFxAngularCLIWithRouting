{"version":3,"sources":["devDeploy/DevDeployTask.ts"],"names":[],"mappings":"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","file":"devDeploy/DevDeployTask.js","sourcesContent":["import * as Gulp from 'gulp';\r\nimport * as Url from 'url';\r\nimport * as path from 'path';\r\nimport * as glob from 'glob';\r\nimport * as Webpack from 'webpack';\r\nimport * as fsx from 'fs-extra';\r\nimport * as lodash from 'lodash';\r\n\r\nimport {\r\n  IClientSideComponentManifest,\r\n  IClientSideComponentLoaderConfiguration,\r\n  IModuleConfiguration,\r\n  IPathModuleConfiguration,\r\n  IComponentModuleConfiguration,\r\n  ILocalizedPathModuleConfiguration,\r\n  IPath,\r\n  IClientSideWebPartManifest,\r\n  IClientSideExtensionManifest,\r\n  ICommandSetExtensionManifest,\r\n  ICommandDefinition\r\n} from '@microsoft/sp-module-interfaces';\r\nimport {\r\n  RushConfiguration,\r\n  RushConfigurationProject\r\n} from '@microsoft/rush-lib';\r\n\r\nimport OdspGulpTask from './../OdspGulpTask';\r\nimport {\r\n  default as CumulativeManifestProcessor,\r\n  IReferencedProject,\r\n  ForceSearch,\r\n  IReferencedProjectMap\r\n} from './../cumulativeManifestProcessor';\r\nimport { IDeployAzureTaskConfigBase } from './../deployAzureStorage/DeployAzureStorageTask';\r\nimport { getAzureStorageUrl } from './../deployAzureStorage/uploadCDN/deployToAzure';\r\nimport ensureBlobService from './../utilities/azureStorage/ensureBlobService';\r\nimport ensureContainer from './../utilities//azureStorage/ensureContainer';\r\nimport uploadFilesToAzure, {\r\n  IUploadableFile\r\n} from './../utilities//azureStorage/uploadFilesToAzure';\r\nimport {\r\n  joinUrlSegments,\r\n  ensureTrailingSlash,\r\n  isUrl\r\n} from './../utilities/url';\r\nimport RetryablePromise from './../utilities/RetryablePromise';\r\nimport {\r\n  getIconPathType,\r\n  IconPathType\r\n} from '../writeManifests/WriteManifestsTask';\r\nimport { printDevDeployLink } from './DevDeployLinkPrinter';\r\n\r\nconst MANIFESTS_AZURE_FILENAME: string = 'manifests.js';\r\nconst SP_LOADER_ASSEMBLY_ID: string = '44bae1a2-d2eb-4e10-8c21-a1dbdce1036f';\r\nconst MAX_UPLOAD_RETRIES: number = 3;\r\nconst RETRY_DELAY_MS: number = 250;\r\nconst SOURCE_BRANCH_ENV_VAR_NAME: string = 'BUILD_SOURCEBRANCH';\r\n\r\nexport interface IDevDeployTaskConfig extends IDeployAzureTaskConfigBase {\r\n  /**\r\n   * The directory in the Azure container to use. Recommended to be set to something that includes your user name\r\n   *  to ensure you don't clobber others' work.\r\n   */\r\n  containerDirectoryName?: string;\r\n\r\n  /**\r\n   * If false, the current project directory and its dependencies are deployed. If true, we attempt to find a\r\n   *  rush.json file and deploy everything in the repo. Defaults to false.\r\n   */\r\n  useRush?: boolean;\r\n\r\n  /**\r\n   * If true, projects will be uploaded into individual directories. This is useful if projects have files that may\r\n   *  have conflicting names. If this is false and a collision is detected, a warning will be printed. Defaults to true.\r\n   */\r\n  isolateProjects?: boolean;\r\n}\r\n\r\nexport class DevDeployTask extends OdspGulpTask<IDevDeployTaskConfig> {\r\n  constructor() {\r\n    super(\r\n      'dev-deploy',\r\n      {\r\n        useRush: false,\r\n        isolateProjects: true\r\n      }\r\n    );\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): Promise<{}> {\r\n    if (!this.taskConfig.account) {\r\n      completeCallback('Azure storage account not set.');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.accessKey) {\r\n      completeCallback('Azure storage account access key not set.');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.container) {\r\n      completeCallback('Azure container name not set.');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.containerDirectoryName) {\r\n      this.logWarning('It is strongly recommended a directory inside the container be used to avoid clobbering other ' +\r\n                      'users\\' dev deployments.');\r\n    }\r\n\r\n    this.taskConfig.useRush = this.taskConfig.useRush || (process.argv.indexOf('--rush') !== -1);\r\n\r\n    if (process.argv.indexOf('--ciMode') !== -1) {\r\n      const branchName: string = process.env[SOURCE_BRANCH_ENV_VAR_NAME];\r\n      const containerDirectoryName: string = branchName\r\n      ? branchName.replace(/[^A-Za-z0-9\\-]+/g, '_')\r\n      : `${this.taskConfig.containerDirectoryName}_tab`;\r\n\r\n      this.setConfig({\r\n        containerDirectoryName,\r\n        useRush: true,\r\n        isolateProjects: false\r\n      });\r\n    }\r\n\r\n    const cumulativeManifestProcessor: CumulativeManifestProcessor =\r\n      new CumulativeManifestProcessor(this, { explicitInclude: [SP_LOADER_ASSEMBLY_ID] });\r\n    let manifests: IReferencedProjectMap;\r\n    try {\r\n      manifests = this._getManifests(cumulativeManifestProcessor);\r\n    } catch (e) {\r\n      completeCallback(e);\r\n      return;\r\n    }\r\n\r\n    const manifestsArray: IClientSideComponentManifest[] = [];\r\n\r\n    this.logVerbose(`Discovered ${Object.keys(manifests).length} projects.`);\r\n\r\n    const storageDirName: string = this._getStorageDirName();\r\n    const containerUrl: string = this._getContainerUrl();\r\n\r\n    const filesToUpload: IUploadableFile[] = [];\r\n    const dirsToUpload: Map<string, string> = new Map<string, string>();\r\n    const projectContainerNames: Map<string, string[]> = new Map<string, string[]>(); // Ensure we don't reuse a name\r\n\r\n    let spLoaderPath: string;\r\n    let debugSPLoader: string;\r\n\r\n    // Loop through the manifests and collect files and directories to be uploaded, and fix up manifest fields\r\n    for (const id in manifests) {\r\n      if (manifests.hasOwnProperty(id)) {\r\n        const manifestProject: IReferencedProject = manifests[id];\r\n        const manifest: IClientSideComponentManifest = manifestProject.manifestData;\r\n        const loaderConfig: IClientSideComponentLoaderConfiguration = manifest.loaderConfig;\r\n\r\n        manifestsArray.push(manifest);\r\n\r\n        const projectContainerName: string = this.taskConfig.isolateProjects\r\n          ? this._getAzureDirName(projectContainerNames, manifestProject.packagePath)\r\n          : '';\r\n        const projectBasePath: string = joinUrlSegments(storageDirName, projectContainerName);\r\n        const projectBaseFullUrl: string = joinUrlSegments(containerUrl, projectBasePath);\r\n\r\n        // A relative base URL applies when the paths are based on the tenant URL.\r\n        // This applies, for example, in the JSOM library, that takes the JS files from a known place\r\n        //  available on every tenant.\r\n        const isBaseUrlRelative: boolean = loaderConfig.internalModuleBaseUrls.length > 0\r\n          && !Url.parse(loaderConfig.internalModuleBaseUrls[0]).protocol;\r\n\r\n        // If the Base URL is a relative path, keep the relative path\r\n        if (!isBaseUrlRelative) {\r\n          loaderConfig.internalModuleBaseUrls = [ ensureTrailingSlash(projectBaseFullUrl) ];\r\n        }\r\n\r\n        // Ensure we don't reuse a name\r\n        const resourceContainerNames: Map<string, string[]> = new Map<string, string[]>();\r\n\r\n        const processPath: (rawResourcePath: string | IPath) => string =\r\n                            (rawResourcePath: string | IPath): string => {\r\n            const resourcePath: string = this._disambiguatePath(rawResourcePath);\r\n\r\n            // If the base URL was relative, a relative path for a resource doesn't need to be fixed up\r\n            if (isUrl(resourcePath) || isBaseUrlRelative) {\r\n              return resourcePath; // Do not deal with fully-qualified URL.\r\n            } else {\r\n              const filesystemPath: string = path.join(manifestProject.packagePath, resourcePath);\r\n              const filename: string = path.basename(resourcePath);\r\n\r\n              // Path resources are in the 'dist' directory by default and usually have some secondary\r\n              //  references, so let's just upload the whole directory.\r\n              const filesystemDirectory: string = path.dirname(filesystemPath);\r\n\r\n              const azureResourceDirName: string = this.taskConfig.isolateProjects\r\n                ? this._getAzureDirName(resourceContainerNames, filesystemDirectory) :\r\n                '';\r\n              const azureDirectory: string = joinUrlSegments(projectBasePath, azureResourceDirName);\r\n              dirsToUpload.set(filesystemDirectory, azureDirectory);\r\n\r\n              if (!spLoaderPath && id === SP_LOADER_ASSEMBLY_ID) {\r\n                spLoaderPath = azureDirectory;\r\n                debugSPLoader = filename;\r\n              }\r\n\r\n              return joinUrlSegments(azureResourceDirName, filename);\r\n            }\r\n          };\r\n\r\n        this._doComponentTypeSpecificFixup(manifest, processPath);\r\n\r\n        for (const scriptResourceId in loaderConfig.scriptResources) {\r\n          if (loaderConfig.scriptResources.hasOwnProperty(scriptResourceId)) {\r\n            const scriptResource: IModuleConfiguration = loaderConfig.scriptResources[scriptResourceId];\r\n\r\n            switch (scriptResource.type) {\r\n              case 'path':\r\n                // Path script resource, we need to fix up its path and upload it\r\n                const pathResource: IPathModuleConfiguration = scriptResource as IPathModuleConfiguration;\r\n                pathResource.path = processPath(pathResource.path);\r\n                break;\r\n\r\n              case 'component':\r\n                // We probably don't need to upload the fallback file, and it's nigh-impossible to tell if we'll\r\n                //  miss secondary dependencies by only uploading the file at the failoverPath, so we'll just clear it\r\n                //  out and hope this dependency is either satisfied by another dev-deploy manifest or by the OOB\r\n                //  framework\r\n                const componentResource: IComponentModuleConfiguration =\r\n                  scriptResource as IComponentModuleConfiguration;\r\n                componentResource.failoverPath = undefined;\r\n                break;\r\n\r\n              case 'localizedPath':\r\n                // Localized path script resource, we need to fix up the paths for each locale and upload each file\r\n                const localizedPathResource: ILocalizedPathModuleConfiguration =\r\n                  scriptResource as ILocalizedPathModuleConfiguration;\r\n\r\n                localizedPathResource.defaultPath = processPath(localizedPathResource.defaultPath);\r\n                if (localizedPathResource.paths) {\r\n                  for (const locale in localizedPathResource.paths) {\r\n                    if (localizedPathResource.paths.hasOwnProperty(locale)) {\r\n                      localizedPathResource.paths[locale] = processPath(localizedPathResource.paths[locale]);\r\n                    }\r\n                  }\r\n                }\r\n                break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Expand directories to individual files\r\n    const directoryExpandPromises: Promise<void>[] = [];\r\n    const collisionDetectionMap: Map<string, string[]> = new Map<string, string[]>();\r\n    dirsToUpload.forEach((azureDirName: string, localDirName: string): void => {\r\n      directoryExpandPromises.push(this._getFilesInDirectory(localDirName).then((files: string[]): void => {\r\n        files.forEach((file: string): void => {\r\n          const azureUrl: string = joinUrlSegments(azureDirName, file.replace(/\\\\/g, '/'));\r\n          const localPath: string = path.join(localDirName, file);\r\n\r\n          if (fsx.statSync(localPath).isDirectory()) {\r\n            return; // Continue on directories\r\n          }\r\n\r\n          if (!this.taskConfig.isolateProjects) {\r\n            if (collisionDetectionMap.has(azureUrl)) {\r\n              collisionDetectionMap.get(azureUrl).push(localPath);\r\n            } else {\r\n              collisionDetectionMap.set(azureUrl, [localPath]);\r\n            }\r\n          }\r\n\r\n          filesToUpload.push({\r\n            localPath,\r\n            azurePath: azureUrl\r\n          });\r\n        });\r\n      }));\r\n    });\r\n\r\n    const blobServicePromise: Promise<IAzureBlobService> =\r\n        ensureBlobService(this.taskConfig.account, this.taskConfig.accessKey)\r\n            .then((blobService: IAzureBlobService) => ensureContainer(blobService,\r\n                                                                      this.taskConfig.container,\r\n                                                                      /* createContainerOptions */ undefined,\r\n                                                                      this.log.bind(this)));\r\n\r\n    const uploadPromise: Promise<IAzureBlobService> = blobServicePromise.then((blobService: IAzureBlobService) => {\r\n      const rawUploadPromise: Promise<IAzureBlobService> = Promise.all(directoryExpandPromises).then(() => {\r\n        return uploadFilesToAzure(blobService,\r\n          this.taskConfig.container,\r\n          filesToUpload,\r\n          this.log.bind(this));\r\n      });\r\n\r\n      return RetryablePromise.allWithRetries<IAzureBlobService>(\r\n        [new RetryablePromise(rawUploadPromise)],\r\n        MAX_UPLOAD_RETRIES,\r\n        RETRY_DELAY_MS).then((services: IAzureBlobService[]) => {\r\n          return services[0];\r\n        });\r\n    });\r\n\r\n    const manifestsFilePromise: Promise<IAzureBlobService> =\r\n      uploadPromise.then((blobService: IAzureBlobService) => {\r\n\r\n      const webpackConfig: Webpack.Configuration =\r\n        cumulativeManifestProcessor.getManifestsFileWebpackConfig(manifestsArray);\r\n      const manifestsFilename: string = 'devDeployManifests.js';\r\n      const manifestsFileFullPath: string = path.join(webpackConfig.output.path, manifestsFilename);\r\n      webpackConfig.output.filename = manifestsFilename;\r\n\r\n      return new Promise<void>((resolve: () => void, reject: (error: Error) => void): void => {\r\n        Webpack(webpackConfig, (err: Error): void => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      }).then(() => {\r\n        return RetryablePromise.allWithRetries(\r\n          [new RetryablePromise(\r\n            uploadFilesToAzure(\r\n              blobService,\r\n              this.taskConfig.container,\r\n              [{\r\n                localPath: manifestsFileFullPath,\r\n                azurePath: joinUrlSegments(storageDirName, MANIFESTS_AZURE_FILENAME)\r\n              }],\r\n              this.log.bind(this)\r\n            )\r\n          )],\r\n          MAX_UPLOAD_RETRIES,\r\n          RETRY_DELAY_MS\r\n        ).then((services: IAzureBlobService[]) => {\r\n          return services[0];\r\n        });\r\n      });\r\n    });\r\n\r\n    return manifestsFilePromise.then(() => {\r\n      const devDeployUrl: string = this.getDeployUrl();\r\n      const loaderUrl: string = joinUrlSegments(containerUrl, spLoaderPath, debugSPLoader);\r\n\r\n      this.log('UPLOAD COMPLETE.');\r\n\r\n      // Warn about collisions\r\n      collisionDetectionMap.forEach((localPaths: string[], url: string) => {\r\n        if (localPaths.length > 1) {\r\n          this.logWarning(`COLLISION DETECTED: [${localPaths.join(',')}] all deployed to the same URL (${url}). ` +\r\n                          `It is very probable that the dev-deploy will not work as expected. This may indicate a ` +\r\n                          `serious issue for production environments as well.`);\r\n        }\r\n      });\r\n\r\n      printDevDeployLink(this.log.bind(this), loaderUrl, devDeployUrl);\r\n\r\n      this.properties.devDeployManifestFileUrl = devDeployUrl;\r\n      this.properties.devDeployModuleLoaderUrl = loaderUrl;\r\n\r\n      completeCallback();\r\n      return {};\r\n    }).catch((error: Error) => {\r\n      completeCallback(error.message);\r\n      return {};\r\n    });\r\n  }\r\n\r\n  public getDeployUrl(): string {\r\n    return joinUrlSegments(this._getContainerUrl(),\r\n                           this._getStorageDirName(),\r\n                           MANIFESTS_AZURE_FILENAME);\r\n  }\r\n\r\n  private _getContainerUrl(): string {\r\n    return getAzureStorageUrl(this.taskConfig.account,\r\n                              this.taskConfig.container);\r\n  }\r\n\r\n  private _getStorageDirName(): string {\r\n    return this.taskConfig.containerDirectoryName || '';\r\n  }\r\n\r\n  private _disambiguatePath(pathToDisambiguate: string | IPath): string {\r\n    return typeof pathToDisambiguate === 'string'\r\n      ? pathToDisambiguate as string\r\n      : (pathToDisambiguate as IPath).default;\r\n  }\r\n\r\n  private _getFilesInDirectory(dirName: string): Promise<string[]> {\r\n    return new Promise<string[]>((resolve: (result: string[]) => void, reject: (error: Error) => void): void => {\r\n      glob(path.join('**', '*.*'), { cwd: dirName }, (error: Error, files: string[]): void => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          resolve(files || []);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function returns a directory name to be used in a directory on Azure storage, ensuring that the name does\r\n   *  not collide with another directory's name. It also ensures that if the specified filesystem path has already\r\n   *  been mapped to an Azure directory, the same name is used on Azure.\r\n   */\r\n  private _getAzureDirName(directoryMap: Map<string, string[]>, filesystemPath: string): string {\r\n    let azureDirName: string = path.basename(filesystemPath).toLowerCase();\r\n    if (directoryMap.has(azureDirName)) {\r\n      const existingPaths: string[] = directoryMap.get(azureDirName);\r\n      const currentPathId: number = existingPaths.indexOf(filesystemPath);\r\n\r\n      if (currentPathId === -1) {\r\n        azureDirName = `${azureDirName}_${existingPaths.length}`;\r\n        existingPaths.push(filesystemPath);\r\n      } else if (currentPathId > 0) {\r\n        azureDirName = `${azureDirName}_${currentPathId}`;\r\n      }\r\n    } else {\r\n      directoryMap.set(azureDirName, [filesystemPath]);\r\n    }\r\n\r\n    return azureDirName;\r\n  }\r\n\r\n  private _getManifests(cumulativeManifestProcessor: CumulativeManifestProcessor): IReferencedProjectMap {\r\n    if (this.taskConfig.useRush) {\r\n      const rushConfig: RushConfiguration = RushConfiguration.loadFromDefaultLocation();\r\n      if (!rushConfig) {\r\n        throw 'Unable to find the rush configuration file.';\r\n      }\r\n\r\n      let manifests: IReferencedProjectMap;\r\n      const directories: string[] = rushConfig.projects.map((proj: RushConfigurationProject) => proj.projectFolder);\r\n      manifests = cumulativeManifestProcessor.discoverManifests(directories[0], ForceSearch.deepSparse);\r\n      for (let i: number = 1; i < directories.length; i++) {\r\n        const projectManifests: IReferencedProjectMap =\r\n          cumulativeManifestProcessor.discoverManifests(directories[i], ForceSearch.deepSparse);\r\n        manifests = this._mergeReferencedProjectLists(manifests, projectManifests);\r\n      }\r\n\r\n      return manifests;\r\n    } else {\r\n      return cumulativeManifestProcessor.discoverManifests(this.buildConfig.rootPath, ForceSearch.deepSparse);\r\n    }\r\n\r\n  }\r\n\r\n  private _mergeReferencedProjectLists(list1: IReferencedProjectMap,\r\n                                       list2: IReferencedProjectMap): IReferencedProjectMap {\r\n    const ids: Set<string> = new Set<string>();\r\n    Object.keys(list1).concat(Object.keys(list2)).forEach((id: string) => ids.add(id));\r\n\r\n    const result: IReferencedProjectMap = {};\r\n\r\n    ids.forEach((id: string) => {\r\n      const list1Element: IReferencedProject = list1[id];\r\n      const list2Element: IReferencedProject = list2[id];\r\n      if (!list1Element || !list2Element) {\r\n        // Element is only present in one list\r\n        result[id] = list1Element || list2Element;\r\n      } else if (list1Element.manifestCreationTime > list2Element.manifestCreationTime) {\r\n        // List 1's element is newer\r\n        result[id] = list1Element;\r\n      } else {\r\n        // List 2's element is newer, or they have the same age\r\n        result[id] = list2Element;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  private _doComponentTypeSpecificFixup(\r\n    manifest: IClientSideComponentManifest,\r\n    processPath: (rawResourcePath: string) => string\r\n  ): void {\r\n    switch (manifest.componentType) {\r\n      case 'WebPart':\r\n        // tslint:disable-next-line:no-any\r\n        const webpartManifest: IClientSideWebPartManifest<any> = manifest as IClientSideWebPartManifest<any>;\r\n        for (const preconfiguredEntry of webpartManifest.preconfiguredEntries) {\r\n          if (preconfiguredEntry.iconImageUrl) {\r\n            preconfiguredEntry.iconImageUrl = this._fixupIconPath(preconfiguredEntry.iconImageUrl, processPath);\r\n          }\r\n        }\r\n        break;\r\n\r\n      case 'Extension':\r\n        const extensionManifest: IClientSideExtensionManifest = manifest as IClientSideExtensionManifest;\r\n        switch (extensionManifest.extensionType) {\r\n          case 'ListViewCommandSet':\r\n          const commandSetManifest: ICommandSetExtensionManifest = extensionManifest as ICommandSetExtensionManifest;\r\n          for (const itemId in commandSetManifest.items) {\r\n            if (commandSetManifest.items.hasOwnProperty(itemId)) {\r\n              const item: ICommandDefinition = commandSetManifest.items[itemId];\r\n              if (item.iconImageUrl) {\r\n                item.iconImageUrl = this._fixupIconPath(item.iconImageUrl, processPath);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n\r\n          default:\r\n            // Nothing to do for the other extension types\r\n            break;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        // Nothing to do for the other component types\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _fixupIconPath(iconPath: string, processPath: (rawResourcePath: string) => string): string {\r\n    if (getIconPathType(iconPath) === IconPathType.RelativeUrl) {\r\n      const relativeIconPath: string = lodash.trimStart(iconPath, '/');\r\n      return processPath(relativeIconPath);\r\n    } else {\r\n      return iconPath;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}