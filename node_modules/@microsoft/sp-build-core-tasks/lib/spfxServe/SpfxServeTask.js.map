{"version":3,"sources":["spfxServe/SpfxServeTask.ts"],"names":[],"mappings":"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","file":"spfxServe/SpfxServeTask.js","sourcesContent":["import * as Gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\nimport { JSONSchema4 } from 'json-schema';\r\nimport {\r\n  ServeTask,\r\n  IServeTaskConfig\r\n} from '@microsoft/gulp-core-build-serve/lib/ServeTask';\r\n\r\n// NodeJS currently lacks an implementation of the URL class, so we should use our polyfill until NodeJS gets one\r\nimport URL from '@microsoft/sp-polyfills/lib/url/experimental/URL-complete';\r\n\r\nimport {\r\n  ISpfxServeSessionConfiguration\r\n} from './ISpfxServe';\r\n\r\nexport interface ISpfxServeTaskConfig extends IServeTaskConfig {\r\n  serveConfigurations?: {\r\n    default: ISpfxServeSessionConfiguration,\r\n    [id: string]: ISpfxServeSessionConfiguration\r\n  };\r\n}\r\n\r\nconst CONFIG_CLI_PARAMETER: string = 'config';\r\nexport const DEBUG_MANIFESTS_QUERY_PARAMETER: string = 'debugManifestsFile';\r\nconst LOAD_SPFX_QUERY_PARAMETER: string = 'loadSPFX';\r\nconst CUSTOM_ACTIONS_QUERY_PARAMETER: string = 'customActions';\r\nconst FIELD_CUSTOMIZERS_QUERY_PARAMETER: string = 'fieldCustomizers';\r\n\r\nexport class SpfxServeTask extends ServeTask<ISpfxServeTaskConfig> {\r\n  private _defaultInitialPage: string | undefined;\r\n\r\n  constructor() {\r\n    super('spfx-serve', {});\r\n\r\n    this._defaultInitialPage = this.taskConfig.initialPage;\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): void {\r\n    this._loadGulpConnect();\r\n\r\n    const selectedServeConfiguration: string | undefined = this.buildConfig.args[CONFIG_CLI_PARAMETER] as string;\r\n    let serveConfiguration: ISpfxServeSessionConfiguration | undefined;\r\n    if (selectedServeConfiguration) {\r\n      this.logVerbose(`Attempting to use serve configuration: \"${selectedServeConfiguration}\"`);\r\n      serveConfiguration = this.taskConfig.serveConfigurations[selectedServeConfiguration];\r\n      if (!serveConfiguration) {\r\n        this.logWarning(`Selected serve configuration \"${selectedServeConfiguration}\" is not present in the ` +\r\n                        'task configuration. Falling back to default configuration.');\r\n      }\r\n    }\r\n\r\n    if (!serveConfiguration && this.taskConfig.serveConfigurations) {\r\n      serveConfiguration = this.taskConfig.serveConfigurations.default;\r\n\r\n      if (serveConfiguration && this.taskConfig.initialPage !== this._defaultInitialPage) {\r\n        this.logWarning('Both a default serve configuration and an initialPage are specified. In this task, ' +\r\n                        'the default configuration takes precedence. Consider removing the initialPage property.');\r\n      }\r\n    }\r\n\r\n    if (serveConfiguration) {\r\n      this.taskConfig.initialPage = this._convertServeConfigurationToPageUrl(serveConfiguration);\r\n    }\r\n\r\n    return super.executeTask(gulp, completeCallback);\r\n  }\r\n\r\n  public loadSchema(): JSONSchema4 {\r\n    const baseSchema: JSONSchema4 = super.loadSchema();\r\n    const spfxServeSchema: JSONSchema4 = JsonFile.load(path.join(__dirname, 'spfx-serve.schema.json'));\r\n\r\n    // Include all of the properties from the base schema\r\n    for (const propertyName in baseSchema.properties) {\r\n      if (baseSchema.properties.hasOwnProperty(propertyName)) {\r\n        spfxServeSchema.properties[propertyName] = baseSchema.properties[propertyName];\r\n      }\r\n    }\r\n\r\n    if (baseSchema.definitions) {\r\n      // Include all of the definitions from the base schema\r\n      for (const definitionName in baseSchema.definitions) {\r\n        if (baseSchema.definitions.hasOwnProperty(definitionName)) {\r\n          spfxServeSchema.definitions[definitionName] = baseSchema.definitions[definitionName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return spfxServeSchema;\r\n  }\r\n\r\n  protected _getConfigFilePath(): string {\r\n    // Make sure this task uses the \"serve.json\" config file, not \"spfx-serve.json\"\r\n    return path.join(path.dirname(super._getConfigFilePath()), 'serve.json');\r\n  }\r\n\r\n  private _convertServeConfigurationToPageUrl(serveConfiguration: ISpfxServeSessionConfiguration): string {\r\n    if (!serveConfiguration.pageUrl) {\r\n      this.logError('The pageUrl property of the selected serve configuration must be set.');\r\n      return undefined;\r\n    }\r\n\r\n    const url: URL = new URL(serveConfiguration.pageUrl);\r\n\r\n    if (!url.searchParams.has(DEBUG_MANIFESTS_QUERY_PARAMETER)) {\r\n      const manifestsJsUrl: URL = this._getBaseServeUrl();\r\n      manifestsJsUrl.pathname = 'temp/manifests.js';\r\n      url.searchParams.set(DEBUG_MANIFESTS_QUERY_PARAMETER, manifestsJsUrl.href);\r\n    }\r\n\r\n    if (serveConfiguration.customActions || serveConfiguration.fieldCustomizers) {\r\n      if (!url.searchParams.has(LOAD_SPFX_QUERY_PARAMETER)) {\r\n        url.searchParams.set(LOAD_SPFX_QUERY_PARAMETER, 'true');\r\n      }\r\n    }\r\n\r\n    if (serveConfiguration.customActions) {\r\n      url.searchParams.set(CUSTOM_ACTIONS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.customActions));\r\n    }\r\n\r\n    if (serveConfiguration.fieldCustomizers) {\r\n      url.searchParams.set(FIELD_CUSTOMIZERS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.fieldCustomizers));\r\n    }\r\n\r\n    return url.href;\r\n  }\r\n\r\n  private _getBaseServeUrl(): URL {\r\n    const taskConfig: IServeTaskConfig = this.taskConfig;\r\n    return new URL(`${taskConfig.https ? 'https' : 'http'}://${taskConfig.hostname}:${taskConfig.port}/`);\r\n  }\r\n\r\n  ///\r\n  /// THE CODE BELOW IS A TEMPORARY PORT FROM THIS PR FOR GULP-CORE-BUILD-SERVE:\r\n  /// https://github.com/Microsoft/web-build-tools/pull/502\r\n  ///\r\n\r\n  /**\r\n   * Workaround for loading gulp-connect, which automatically uses http2 if it\r\n   * can require() a module called 'http2'\r\n   *\r\n   * https://github.com/AveVlad/gulp-connect/issues/246\r\n   *\r\n   * In versions of NodeJS < 8:\r\n   *   'http2' would have to be a module in the node_modules folder.\r\n   *   We did not provide this normally, so most of the time nobody used http2 with gulp serve.\r\n   *\r\n   * However, in versions of NodeJS >= 8:\r\n   *   They provide a built-in module called 'http2', which is experimental and unstable\r\n   *   The built-in module is preferred unless an environment variable is set: NODE_NO_HTTP2=1\r\n   *\r\n   * We don't want to enforce environmental requirements, nor\r\n   * do we want to support a toolchain that relies on an experimental API.\r\n   *\r\n   * Until gulp-connect provides a way to disable HTTP2, we're using this workaround:\r\n   * Inject a falsey value into the require() cache, require gulp-connect,\r\n   * then restore the old cache state.\r\n   *\r\n   * As a consequence, this approach will prevent \"gulp-connect\" from using http2 in\r\n   * environments with Node < 8. This is intentional, because we don't see a reason to\r\n   * support http2 for serving localhost scripts.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  private _loadGulpConnect(): void {\r\n    // this will raise an exception if it can't find http2,\r\n    // which happens if we are on Node6 and 'http2' has not been required yet\r\n    let http2CacheKey: string = 'http2';\r\n    try {\r\n      http2CacheKey = require.resolve('http2');\r\n    } catch (exception) {\r\n      // no-op\r\n    }\r\n\r\n    /* tslint:disable:typedef */\r\n    let gulpConnect;\r\n\r\n    // node 6 and http2 is in cache\r\n    if (Object.keys(require.cache).indexOf(http2CacheKey) !== -1) {\r\n      // store the old cache value\r\n      const http2CacheObject = require.cache[http2CacheKey];\r\n      require.cache[http2CacheKey] = { exports: undefined };\r\n\r\n      gulpConnect = require('gulp-connect');\r\n\r\n      // restore the old cache value\r\n      require.cache[http2CacheKey] = http2CacheObject;\r\n    } else {\r\n      // node 8 or http2 is not in cache, insert a module with no exports into cache\r\n      require.cache[http2CacheKey] = { exports: undefined };\r\n\r\n      gulpConnect = require('gulp-connect');\r\n\r\n      // remove module with no exports from cache\r\n      delete require.cache[http2CacheKey];\r\n    }\r\n    /* tslint:enable:typedef */\r\n    return gulpConnect;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}