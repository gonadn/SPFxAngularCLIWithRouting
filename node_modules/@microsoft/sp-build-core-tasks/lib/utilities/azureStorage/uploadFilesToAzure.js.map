{"version":3,"sources":["utilities/azureStorage/uploadFilesToAzure.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAEH,2DAAoD;AAOpD,4BAA2C,WAA8B,EAC9B,aAAqB,EACrB,KAAwB,EACxB,MAA6B,OAAO,CAAC,GAAG;IACjF,GAAG,CAAC,cAAc,KAAK,CAAC,MAAM,YAAY,CAAC,CAAC;IAE5C,MAAM,CAAC,YAAY,CAAqC,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,IAAqB;QAC5F,MAAM,CAAC,2BAAiB,CAAC,WAAW,EAAE,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC5F,CAAC,CAAC,CAAC,IAAI,CAAC;QACN,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC,CAAC,CAAC;AACL,CAAC;AAXD,qCAWC;AAED;;;;;;GAMG;AACH,sBACE,SAAiB,EACjB,KAAe,EACf,GAA0B,EAC1B,aAAsC;IAEtC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;SAC1B,IAAI,CAAC,CAAC,GAAa;QAClB,IAAI,WAAW,GAAW,CAAC,CAAC;QAE5B,MAAM,CAAC,GAAG;aAEP,GAAG,CAAC,CAAC,IAAO,EAAE,KAAa;YAC1B,6EAA6E;YAC7E,yEAAyE;YACzE,MAAM,CAAC,KAAK,GAAG,SAAS,KAAK,CAAC;kBAC1B,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,SAAS,CAAC;kBACnC,EAAE,CAAC;QACT,CAAC,CAAC;aAED,MAAM,CAAC,CAAC,KAAe;YACtB,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC;aAED,GAAG,CAAC,CAAC,KAAe;YACnB,MAAM,CAAC;gBACL,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC;QACJ,CAAC,CAAC;aAED,MAAM,CAAC,CAAC,KAAoB,EAAE,IAAwB;YACrD,MAAM,CAAC,KAAK;iBACT,IAAI,CAAC,IAAI,CAAC;iBACV,IAAI,CAAC,CAAC,IAAS;gBACd,GAAG,CAAC,mBAAmB,EAAE,WAAW,EAAE,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACP,CAAC;AAtCD,oCAsCC","file":"utilities/azureStorage/uploadFilesToAzure.js","sourcesContent":["/**\r\n * @file uploadFilesToAzure.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Uploads a list of files to an Azure Blob Service instance\r\n */\r\n\r\nimport uploadFileToAzure from './uploadFileToAzure';\r\n\r\nexport interface IUploadableFile {\r\n  azurePath: string;\r\n  localPath: string;\r\n}\r\n\r\nexport default function uploadFilesToAzure(blobService: IAzureBlobService,\r\n                                           containerName: string,\r\n                                           files: IUploadableFile[],\r\n                                           log: (str: string) => void = console.log): Promise<IAzureBlobService> {\r\n  log(`Uploading [${files.length}] files...`);\r\n\r\n  return batchPromise<IUploadableFile, IAzureBlobService>(50, files, log, (file: IUploadableFile) => {\r\n    return uploadFileToAzure(blobService, containerName, file.localPath, file.azurePath, log);\r\n  }).then(() => {\r\n    return blobService;\r\n  });\r\n}\r\n\r\n/**\r\n * Helper function to run promises in batches\r\n * @param batchSize the number of promises to run at a single time\r\n * @param items the list of items that are inputs to the createPromise function\r\n * @param log a helper function for performing logging\r\n * @param createPromise a function which takes an item and returns a promise to do something\r\n */\r\nexport function batchPromise<T, K>(\r\n  batchSize: number,\r\n  items: Array<T>,\r\n  log: (str: string) => void,\r\n  createPromise: (item: T) => Promise<K>): Promise<K[]> {\r\n\r\n  return Promise.resolve(items)\r\n    .then((arr: Array<T>) => {\r\n      let batchNumber: number = 0;\r\n\r\n      return arr\r\n        // create a list of batches and empty arrays\r\n        .map((item: T, index: number) => {\r\n          // if this is the start of a batch boundary, take the next batchSize elements\r\n          // otherwise return an empty array that will be filtered in the next step\r\n          return index % batchSize === 0\r\n            ? arr.slice(index, index + batchSize)\r\n            : [];\r\n        })\r\n        // remove any of the empty arrays\r\n        .filter((batch: Array<T>) => {\r\n          return batch.length > 0;\r\n        })\r\n        // turn the array of items into callbacks which create promises\r\n        .map((batch: Array<T>) => {\r\n          return () => {\r\n            return Promise.all(batch.map(createPromise));\r\n          };\r\n        })\r\n        // then create the serial promise chain\r\n        .reduce((chain: Promise<void>, work: () => Promise<K[]>) => {\r\n          return chain\r\n            .then(work)\r\n            .then((data: K[]) => {\r\n              log(`Finished batch #${++batchNumber}`);\r\n            });\r\n        }, Promise.resolve(undefined));\r\n    });\r\n}"],"sourceRoot":"..\\..\\..\\src"}