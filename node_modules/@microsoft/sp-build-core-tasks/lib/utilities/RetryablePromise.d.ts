/// <reference types="es6-promise" />
export default class RetryablePromise<TResult> implements Promise<TResult> {
    private _promiseFn;
    private static _setTimeout;
    private _innerPromise;
    static setTimeoutMock(setTimeout: (cb: () => void, timeout: number) => void): void;
    static allWithRetries<T>(promises: RetryablePromise<T>[], maxRetries: number, retryDelayInMs?: number): Promise<T[]>;
    constructor(_promiseFn: Promise<TResult> | ((resolve: (value?: TResult) => void, reject: (error: Error) => void) => void));
    retry(): RetryablePromise<TResult>;
    then<TReturn>(onFulfilled?: (value: TResult) => TReturn | Thenable<TReturn>, onRejected?: (error: Error) => TReturn | Promise<TReturn> | void): Promise<TReturn>;
    catch<TReturn>(onRejected?: (error: Error) => TReturn | Thenable<TReturn>): Promise<TReturn>;
}
