{"version":3,"sources":["SPWebBuildRig.ts"],"names":[],"mappings":"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","file":"SPWebBuildRig.js","sourcesContent":["import * as path from 'path';\r\nimport * as Yargs from 'yargs';\r\nimport * as Gulp from 'gulp';\r\n\r\nimport sass from '@microsoft/gulp-core-build-sass';\r\nimport { reload, trustDevCert, untrustDevCert } from '@microsoft/gulp-core-build-serve';\r\nimport webpack from '@microsoft/gulp-core-build-webpack';\r\nimport karma from '@microsoft/gulp-core-build-karma';\r\nimport { copyStaticAssets, jest } from '@microsoft/gulp-core-build';\r\nimport * as spBuildCoreTasks from '@microsoft/sp-build-core-tasks';\r\nimport { fileLoaderExts } from '@microsoft/sp-build-core-tasks/lib/configureWebpack/ConfigureWebpackTask';\r\n\r\nimport {\r\n  SPBuildRig,\r\n  BuildRigConstants,\r\n  ITaskDefinition,\r\n  IExecutable,\r\n  serial,\r\n  parallel,\r\n  watch,\r\n  ISPBuildRigArgs\r\n} from '@microsoft/sp-build-common';\r\n\r\nimport { WebBuildRigConstants } from './WebBuildRigConstants';\r\n\r\nexport interface ISPWebBuildRigArgs extends ISPBuildRigArgs {\r\n  debug: boolean;\r\n}\r\n\r\nexport class SPWebBuildRig extends SPBuildRig {\r\n  protected args: ISPBuildRigArgs;\r\n\r\n  public initialize(gulp: typeof Gulp): void {\r\n    super.initialize(gulp);\r\n  }\r\n\r\n  protected getYargs(): Yargs.Argv {\r\n    // tslint:disable:max-line-length\r\n    return super.getYargs()\r\n      .option('debug', {\r\n        describe: 'runs tests in unit mode'\r\n      })\r\n      .option('upgrade', {\r\n        describe: 'upgrades outdated files in the project'\r\n      })\r\n      .command(WebBuildRigConstants.tasks.bundle, 'build, localize, and bundle the project')\r\n      .command(WebBuildRigConstants.tasks.deployAzureStorage, 'upload the assets to a development CDN')\r\n      .command(WebBuildRigConstants.tasks.packageSolution, 'package the project into a SPPKG')\r\n      .command(WebBuildRigConstants.tasks.test, 'build, localize, and bundle the project and run tests, and verify the coverage')\r\n      .command(WebBuildRigConstants.tasks.serve, 'build and bundle the project and run the development server')\r\n      .command(WebBuildRigConstants.tasks.devDeploy, 'deploy the current project to a development Azure CDN for sharing builds with colleagues.')\r\n      .command(WebBuildRigConstants.tasks.trustDevCert, 'generates and trusts a development certificate if one isn\\'t already present')\r\n      .command(WebBuildRigConstants.tasks.untrustDevCert, 'untrusts and deletes the development certificate if it exists')\r\n      .command('default', 'equivalent to bundle and test')\r\n      .option('entry', {\r\n        describe: 'Select which entries should be bundled. This can match the GUID or the alias of the entry.',\r\n        string: true\r\n      });\r\n    // tslint:enable:max-line-length\r\n  }\r\n\r\n  protected setupSharedConfig(): void {\r\n    super.setupSharedConfig();\r\n\r\n    webpack.taskConfig.webpack = require('webpack');\r\n\r\n    sass.mergeConfig({\r\n      dropCssFiles: true,  // Drops .css files in the lib directory for webpack,\r\n      warnOnNonCSSModules: true\r\n    });\r\n\r\n    karma.setConfig({\r\n      configPath: path.resolve(path.join(__dirname, 'karma', 'karma.config.js'))\r\n    });\r\n\r\n    spBuildCoreTasks.configureWebpack.mergeConfig({\r\n      webpack: webpack,\r\n      configureExternalBundlingWebpackTask: spBuildCoreTasks.configureExternalBundlingWebpack\r\n    });\r\n\r\n    spBuildCoreTasks.configureExternalBundlingWebpack.mergeConfig({\r\n      webpack: webpack,\r\n      configureWebpackTask: spBuildCoreTasks.configureWebpack,\r\n      debugLocale: this.args.locale\r\n    });\r\n\r\n    spBuildCoreTasks.writeManifests.mergeConfig({\r\n      debugLocale: this.args.locale\r\n    });\r\n\r\n    copyStaticAssets.setConfig({\r\n      includeExtensions: fileLoaderExts\r\n    });\r\n\r\n    if (this.args.production) {\r\n      spBuildCoreTasks.copyAssets.mergeConfig({\r\n        extsToIgnore: ['.map', '.stats.json', '.stats.html']\r\n      });\r\n    }\r\n  }\r\n\r\n  protected finalizeSharedConfig(): void {\r\n    super.finalizeSharedConfig();\r\n    if (this.args.minimal) {\r\n      this._disableTasks(karma, spBuildCoreTasks.casperJSRunner);\r\n    }\r\n\r\n    const serve: typeof spBuildCoreTasks.serve = spBuildCoreTasks.serve;\r\n    spBuildCoreTasks.writeManifests.mergeConfig({\r\n      deployCdnPath: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath,\r\n      debugBasePath:\r\n        `${serve.taskConfig.https ? 'https' : 'http'}://${serve.taskConfig.hostname}:${serve.taskConfig.port}/`\r\n    });\r\n\r\n    if (this.args.production) {\r\n      spBuildCoreTasks.packageSolution.mergeConfig({\r\n        paths: {\r\n          distributionDir: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath\r\n        }\r\n      });\r\n    }\r\n\r\n    // pipe the cdnBasePath into package solution, so that it can warn\r\n    spBuildCoreTasks.packageSolution.cdnBasePath =\r\n      spBuildCoreTasks.writeManifests.taskConfig.cdnBasePath;\r\n  }\r\n\r\n  protected getTasks(): Map<string, ITaskDefinition> {\r\n    const result: Map<string, ITaskDefinition> = super.getTasks();\r\n\r\n    result.set(BuildRigConstants.tasks.build, {\r\n      executable: this.getBuildTask()\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.bundle, {\r\n      executable: this.getBundleTask()\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.devDeploy, {\r\n      executable: spBuildCoreTasks.devDeploy,\r\n      arguments: (yargs: Yargs.Argv) => {\r\n        return yargs\r\n          .option('rush', {\r\n            describe: 'use all projects specified in the repo\\'s rush.json'\r\n          });\r\n      }\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.deployAzureStorage, {\r\n      executable: spBuildCoreTasks.deployAzureStorage\r\n    });\r\n    result.set(WebBuildRigConstants.tasks.packageSolution, {\r\n      executable: spBuildCoreTasks.packageSolution\r\n    });\r\n\r\n    // @todo VSO #167343\r\n    result.set(WebBuildRigConstants.tasks.test, {\r\n      executable: this.getTestTask(),\r\n      arguments: (yargs: Yargs.Argv) => {\r\n        return yargs\r\n          .option('debug', {\r\n            describe: 'run tests in debug mode'\r\n          })\r\n          .option('match', {\r\n            describe: 'regular expression. Only run tests that match',\r\n            string: true\r\n          });\r\n      }\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.serve, {\r\n      executable: serial(spBuildCoreTasks.serve,\r\n        watch(['src/**/*.{ts,tsx,scss,resx,js,json,html}',\r\n          '!src/**/*.{scss.ts,resx.ts}'],\r\n          serial(result.get(WebBuildRigConstants.tasks.bundle).executable, reload))),\r\n      arguments: (yargs: Yargs.Argv) => {\r\n        return yargs\r\n          .option('port', {\r\n            description: 'the port to serve on should be the next argument (e.g. \"--port 80\")'\r\n          })\r\n          .option('nobrowser', {\r\n            description: 'don\\'t open a browser after initial bundle'\r\n          })\r\n          .option('config', {\r\n            description: 'use this option to specify which configuration to use in the serve.json file'\r\n          });\r\n      }\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.trustDevCert, {\r\n      executable: trustDevCert\r\n    });\r\n\r\n    result.set(WebBuildRigConstants.tasks.untrustDevCert, {\r\n      executable: untrustDevCert\r\n    });\r\n\r\n    result.set(BuildRigConstants.tasks.default, result.get(WebBuildRigConstants.tasks.bundle));\r\n\r\n    return result;\r\n  }\r\n\r\n  protected getConfigureRigTask(): IExecutable {\r\n    return spBuildCoreTasks.configureRig;\r\n  }\r\n\r\n  protected getTestTask(): IExecutable {\r\n    let testTask: IExecutable = WebBuildRigConstants.flags.enableCasperTests ?\r\n      parallel(spBuildCoreTasks.casperJSRunner, karma) : karma;\r\n\r\n    testTask = serial(testTask, jest);\r\n    return serial(this.getBundleTask(), testTask);\r\n  }\r\n\r\n  protected getCoreBuildTask(): IExecutable {\r\n    return parallel(\r\n      serial(sass, super.getCoreBuildTask()),\r\n      copyStaticAssets);\r\n  }\r\n\r\n  protected getBundleTask(): IExecutable {\r\n    return serial(this.getBuildTask(),\r\n                  spBuildCoreTasks.collectLocalizedResources,\r\n                  spBuildCoreTasks.configureWebpack,\r\n                  webpack, // First webpack instance to create the base bundle\r\n                  spBuildCoreTasks.configureExternalBundlingWebpack,\r\n                  // Second webpack instance to optionally expand the base bundle. This task is disabled if\r\n                  //  configureExternalBundlingWebpack isn't configured to do anything\r\n                  webpack,\r\n                  spBuildCoreTasks.copyAssets,\r\n                  spBuildCoreTasks.writeManifests);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}