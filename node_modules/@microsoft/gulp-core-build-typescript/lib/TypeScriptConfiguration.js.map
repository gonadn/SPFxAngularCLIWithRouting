{"version":3,"sources":["TypeScriptConfiguration.ts"],"names":[],"mappings":"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","file":"TypeScriptConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport assign = require('object-assign');\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\nimport { IBuildConfig } from '@microsoft/gulp-core-build';\r\nimport ts = require('gulp-typescript');\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITsConfigFile<T> {\r\n  compilerOptions: T;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IFixupSettingsOptions {\r\n  mustBeCommonJsOrEsnext: boolean;\r\n}\r\n\r\n/**\r\n * A helper class which provides access to the TSConfig.json file for a particular project.\r\n * It also is a central place for managing the version of typescript which this project\r\n * should be built with.\r\n * @public\r\n */\r\nexport class TypeScriptConfiguration {\r\n  private static _baseTsConfig: ITsConfigFile<ts.Settings>;\r\n  private static _projectTsConfig: ITsConfigFile<ts.Settings>;\r\n  private static _typescript: any = undefined; // tslint:disable-line:no-any\r\n\r\n  /**\r\n   * Gets `gulp-typescript` version of the config (used by TypeScriptTask)\r\n   * Returns a new object each time.\r\n   */\r\n  public static getGulpTypescriptOptions(buildConfig: IBuildConfig): ITsConfigFile<ts.Settings> {\r\n    const file: ITsConfigFile<ts.Settings> = assign({}, this.getTsConfigFile(buildConfig));\r\n    assign(file.compilerOptions, {\r\n      rootDir: buildConfig.rootPath,\r\n      typescript: this.getTypescriptCompiler()\r\n    });\r\n    return file;\r\n  }\r\n\r\n  /**\r\n   * Override the version of the typescript compiler\r\n   */\r\n  public static setTypescriptCompiler(typescriptOverride: any): void { // tslint:disable-line:no-any\r\n    if (this._typescript) {\r\n      throw new Error('The version of the typescript compiler should only be set once.');\r\n    }\r\n\r\n    if (this._baseTsConfig) {\r\n      throw new Error('Set the version of the typescript compiler before tasks call getConfig()');\r\n    }\r\n\r\n    this._typescript = typescriptOverride;\r\n  }\r\n\r\n  /**\r\n   * Get the version of the typescript compiler which is to be used\r\n   */\r\n  public static getTypescriptCompiler(): any { // tslint:disable-line:no-any\r\n    if (!this._typescript) {\r\n      this._typescript = require('typescript');\r\n    }\r\n\r\n    return this._typescript;\r\n  }\r\n\r\n  /**\r\n   * Helper function which reads the tsconfig.json (or provides one), and memoizes it\r\n   */\r\n  public static getTsConfigFile(config: IBuildConfig): ITsConfigFile<ts.Settings> {\r\n    if (!this._projectTsConfig) {\r\n      try {\r\n        this._projectTsConfig = JsonFile.load(this._getConfigPath(config));\r\n      } catch (e) {\r\n        /* Failed to load project TS Config - use the base config */\r\n      }\r\n    }\r\n\r\n    const baseConfig: ITsConfigFile<ts.Settings> =\r\n      this._baseTsConfig ||\r\n      {\r\n        compilerOptions: {\r\n          declaration: true,\r\n          experimentalDecorators: true,\r\n          forceConsistentCasingInFileNames: true,\r\n          jsx: 'react',\r\n          module: 'commonjs',\r\n          moduleResolution: 'node',\r\n          noUnusedLocals: true,\r\n          sourceMap: true,\r\n          strictNullChecks: true,\r\n          target: 'es5'\r\n        }\r\n      };\r\n\r\n    return assign({}, baseConfig, this._projectTsConfig || {});\r\n  }\r\n\r\n  /**\r\n   * Fix up the compiler settings to make sure the compiler is called in a standardized way. This function:\r\n   *  - Ensures the \"module\" property is defined\r\n   *  - Warns if the \"module\" property is something other than \"commonjs\" or \"esnext\"\r\n   *  - Optionally ensures the \"module\" property is \"commonjs\" if it's something other than \"commonjs\" or \"esnext\"\r\n   */\r\n  public static fixupSettings(\r\n    compilerOptions: ts.Settings,\r\n    logWarning: (msg: string) => void,\r\n    options: Partial<IFixupSettingsOptions> = {}\r\n  ): void {\r\n    if (compilerOptions.module !== 'commonjs' && compilerOptions.module !== 'esnext' && compilerOptions.module) {\r\n      let warningMessage: string =\r\n        'Your tsconfig.json file specifies a different \"module\" than expected. ' +\r\n        `Expected: \"commonjs\" or \"esnext\". Actual: \"${compilerOptions.module}\".`;\r\n\r\n      if (options.mustBeCommonJsOrEsnext) {\r\n        warningMessage += ' Using \"commonjs\" instead.';\r\n        compilerOptions.module = 'commonjs';\r\n      }\r\n\r\n      logWarning(warningMessage);\r\n    } else if (!compilerOptions.module) {\r\n      logWarning(`Your tsconfig.json file does not specify a \"module\". Using \"commonjs\" instead.`);\r\n      compilerOptions.module = 'commonjs';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the base config for the project. Useful when a rig wants to set common config settings.\r\n   */\r\n  public static setBaseConfig(config: ITsConfigFile<ts.Settings>): void {\r\n    this._baseTsConfig = config;\r\n  }\r\n\r\n  /**\r\n   * Extracts the path to the tsconfig.json based on the buildConfiguration\r\n   */\r\n  private static _getConfigPath(buildConfig: IBuildConfig): string {\r\n    return path.join(buildConfig.rootPath, 'tsconfig.json');\r\n  }\r\n}"],"sourceRoot":"..\\src"}