"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assign = require("object-assign");
const node_core_library_1 = require("@microsoft/node-core-library");
/**
 * A helper class which provides access to the TSConfig.json file for a particular project.
 * It also is a central place for managing the version of typescript which this project
 * should be built with.
 * @public
 */
class TypeScriptConfiguration {
    /**
     * Gets `gulp-typescript` version of the config (used by TypeScriptTask)
     * Returns a new object each time.
     */
    static getGulpTypescriptOptions(buildConfig) {
        const file = assign({}, this.getTsConfigFile(buildConfig));
        assign(file.compilerOptions, {
            rootDir: buildConfig.rootPath,
            typescript: this.getTypescriptCompiler()
        });
        return file;
    }
    /**
     * Override the version of the typescript compiler
     */
    static setTypescriptCompiler(typescriptOverride) {
        if (this._typescript) {
            throw new Error('The version of the typescript compiler should only be set once.');
        }
        if (this._baseTsConfig) {
            throw new Error('Set the version of the typescript compiler before tasks call getConfig()');
        }
        this._typescript = typescriptOverride;
    }
    /**
     * Get the version of the typescript compiler which is to be used
     */
    static getTypescriptCompiler() {
        if (!this._typescript) {
            this._typescript = require('typescript');
        }
        return this._typescript;
    }
    /**
     * Helper function which reads the tsconfig.json (or provides one), and memoizes it
     */
    static getTsConfigFile(config) {
        if (!this._projectTsConfig) {
            try {
                this._projectTsConfig = node_core_library_1.JsonFile.load(this._getConfigPath(config));
            }
            catch (e) {
                /* Failed to load project TS Config - use the base config */
            }
        }
        const baseConfig = this._baseTsConfig ||
            {
                compilerOptions: {
                    declaration: true,
                    experimentalDecorators: true,
                    forceConsistentCasingInFileNames: true,
                    jsx: 'react',
                    module: 'commonjs',
                    moduleResolution: 'node',
                    noUnusedLocals: true,
                    sourceMap: true,
                    strictNullChecks: true,
                    target: 'es5'
                }
            };
        return assign({}, baseConfig, this._projectTsConfig || {});
    }
    /**
     * Fix up the compiler settings to make sure the compiler is called in a standardized way. This function:
     *  - Ensures the "module" property is defined
     *  - Warns if the "module" property is something other than "commonjs" or "esnext"
     *  - Optionally ensures the "module" property is "commonjs" if it's something other than "commonjs" or "esnext"
     */
    static fixupSettings(compilerOptions, logWarning, options = {}) {
        if (compilerOptions.module !== 'commonjs' && compilerOptions.module !== 'esnext' && compilerOptions.module) {
            let warningMessage = 'Your tsconfig.json file specifies a different "module" than expected. ' +
                `Expected: "commonjs" or "esnext". Actual: "${compilerOptions.module}".`;
            if (options.mustBeCommonJsOrEsnext) {
                warningMessage += ' Using "commonjs" instead.';
                compilerOptions.module = 'commonjs';
            }
            logWarning(warningMessage);
        }
        else if (!compilerOptions.module) {
            logWarning(`Your tsconfig.json file does not specify a "module". Using "commonjs" instead.`);
            compilerOptions.module = 'commonjs';
        }
    }
    /**
     * Set the base config for the project. Useful when a rig wants to set common config settings.
     */
    static setBaseConfig(config) {
        this._baseTsConfig = config;
    }
    /**
     * Extracts the path to the tsconfig.json based on the buildConfiguration
     */
    static _getConfigPath(buildConfig) {
        return path.join(buildConfig.rootPath, 'tsconfig.json');
    }
}
TypeScriptConfiguration._typescript = undefined; // tslint:disable-line:no-any
exports.TypeScriptConfiguration = TypeScriptConfiguration;

//# sourceMappingURL=TypeScriptConfiguration.js.map
