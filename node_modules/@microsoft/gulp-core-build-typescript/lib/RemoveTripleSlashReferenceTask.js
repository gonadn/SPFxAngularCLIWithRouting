"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const through2 = require("through2");
/* tslint:disable:typedef */
const cached = require('gulp-cache');
const md5 = require('md5');
/* tslint:enable:typedef */
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
class RemoveTripleSlashReferenceTask extends gulp_core_build_1.GulpTask {
    constructor() {
        super('ts-npm-lint', {});
    }
    executeTask(gulp) {
        const taskScope = this;
        const filePattern = path.join(taskScope.buildConfig.libFolder, '**', '*.d.ts');
        /**
         * Matches:
         *  /// <reference path="../../typings.d.ts" />
         *  /// <reference path='../../typings.d.ts' />
         *  ///<reference path='../../typings.d.ts' />
         *  ///<reference foo="bar" path='../../typings.d.ts'/>
         *  /// <reference path='../../typings.d.ts' bar="foo" />
         */
        const referencePathRegex = /^\/\/\/[ ]+<reference.*path=['"]([^'"]*)['"][^>]+>/gm;
        return gulp.src(filePattern)
            .pipe(cached(
        /* tslint:disable:no-function-expression */
        through2.obj(function (file, encoding, callback) {
            /* tslint:enable:no-function-expression */
            try {
                const rawContents = file.contents.toString();
                const relativePathToCurrentFile = path.relative(taskScope.buildConfig.rootPath, file.path);
                taskScope.logVerbose(relativePathToCurrentFile);
                file[taskScope.name] = {
                    failureCount: 0
                };
                const newContents = rawContents.replace(referencePathRegex, (_, tsdFile) => {
                    file[taskScope.name].failureCount++;
                    taskScope.log(`Removed reference to '${tsdFile}' in ${relativePathToCurrentFile}`);
                    return `// [${taskScope.name}] removed reference to '${tsdFile}'`;
                });
                file.contents = new Buffer(newContents);
                this.push(file);
                callback();
            }
            catch (e) {
                taskScope.logError(e);
                callback(e);
            }
        }), {
            name: md5(taskScope.name + taskScope.buildConfig.rootPath),
            // What on the result indicates it was successful
            success: (jshintedFile) => {
                /* tslint:disable:no-string-literal */
                return jshintedFile[taskScope.name].failureCount === 0;
                /* tslint:enable:no-string-literal */
            },
            // By default, the cache attempts to store the value of the objects in the stream
            // For this task, this is over-engineering since we never need to store anything extra.
            value: (file) => {
                return {
                    path: file.path
                };
            }
        }))
            .pipe(gulp.dest(taskScope.buildConfig.libFolder));
    }
}
exports.RemoveTripleSlashReferenceTask = RemoveTripleSlashReferenceTask;

//# sourceMappingURL=RemoveTripleSlashReferenceTask.js.map
