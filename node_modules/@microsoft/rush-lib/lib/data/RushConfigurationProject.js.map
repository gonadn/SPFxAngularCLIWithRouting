{"version":3,"sources":["data/RushConfigurationProject.ts"],"names":[],"mappings":"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","file":"data/RushConfigurationProject.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport IPackageJson from '../utilities/IPackageJson';\r\nimport Utilities from '../utilities/Utilities';\r\nimport RushConfiguration from '../data/RushConfiguration';\r\nimport { VersionPolicy } from './VersionPolicy';\r\n\r\n/**\r\n * This represents the JSON data object for a project entry in the rush.json configuration file.\r\n */\r\nexport interface IRushConfigurationProjectJson {\r\n  packageName: string;\r\n  projectFolder: string;\r\n  reviewCategory?: string;\r\n  cyclicDependencyProjects: string[];\r\n  versionPolicyName?: string;\r\n  shouldPublish?: boolean;\r\n}\r\n\r\n/**\r\n * This represents the configuration of a project that is built by Rush, based on\r\n * the Rush.json configuration file.\r\n * @public\r\n */\r\nexport default class RushConfigurationProject {\r\n  private _packageName: string;\r\n  private _projectFolder: string;\r\n  private _projectRelativeFolder: string;\r\n  private _reviewCategory: string;\r\n  private _packageJson: IPackageJson;\r\n  private _tempProjectName: string;\r\n  private _unscopedTempProjectName: string;\r\n  private _cyclicDependencyProjects: Set<string>;\r\n  private _versionPolicyName: string | undefined;\r\n  private _shouldPublish: boolean;\r\n  private _downstreamDependencyProjects: string[];\r\n  private readonly _rushConfiguration: RushConfiguration;\r\n\r\n  /** @internal */\r\n  constructor(projectJson: IRushConfigurationProjectJson,\r\n              rushConfiguration: RushConfiguration,\r\n              tempProjectName: string) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._packageName = projectJson.packageName;\r\n    this._projectRelativeFolder = projectJson.projectFolder;\r\n\r\n    // For example, the depth of \"a/b/c\" would be 3.  The depth of \"a\" is 1.\r\n    const projectFolderDepth: number = projectJson.projectFolder.split('/').length;\r\n    if (projectFolderDepth < rushConfiguration.projectFolderMinDepth) {\r\n      throw new Error(`To keep things organized, this repository has a projectFolderMinDepth policy`\r\n        + ` requiring project folders to be at least ${rushConfiguration.projectFolderMinDepth} levels deep.`\r\n        + `  Problem folder: \"${projectJson.projectFolder}\"`);\r\n    }\r\n    if (projectFolderDepth > rushConfiguration.projectFolderMaxDepth) {\r\n      throw new Error(`To keep things organized, this repository has a projectFolderMaxDepth policy`\r\n        + ` preventing project folders from being deeper than ${rushConfiguration.projectFolderMaxDepth} levels.`\r\n        + `  Problem folder:  \"${projectJson.projectFolder}\"`);\r\n    }\r\n\r\n    this._projectFolder = path.join(rushConfiguration.rushJsonFolder, projectJson.projectFolder);\r\n\r\n    if (!fsx.existsSync(this._projectFolder)) {\r\n      throw new Error(`Project folder not found: ${projectJson.projectFolder}`);\r\n    }\r\n\r\n    // Are we using a package review file?\r\n    if (rushConfiguration.approvedPackagesPolicy.enabled) {\r\n      // If so, then every project needs to have a reviewCategory that was defined\r\n      // by the reviewCategories array.\r\n      if (!projectJson.reviewCategory) {\r\n        throw new Error(`The \"approvedPackagesPolicy\" feature is enabled rush.json, but a reviewCategory` +\r\n          ` was not specified for the project \"${projectJson.packageName}\".`);\r\n      }\r\n      if (!rushConfiguration.approvedPackagesPolicy.reviewCategories.has(projectJson.reviewCategory)) {\r\n        throw new Error(`The project \"${projectJson.packageName}\" specifies its reviewCategory as`\r\n          + `\"${projectJson.reviewCategory}\" which is not one of the defined reviewCategories.`);\r\n      }\r\n      this._reviewCategory = projectJson.reviewCategory;\r\n    }\r\n\r\n    const packageJsonFilename: string = path.join(this._projectFolder, 'package.json');\r\n    this._packageJson = JsonFile.load(packageJsonFilename);\r\n\r\n    if (this._packageJson.name !== this._packageName) {\r\n      throw new Error(`The package name \"${this._packageName}\" specified in rush.json does not`\r\n        + ` match the name \"${this._packageJson.name}\" from package.json`);\r\n    }\r\n\r\n    this._tempProjectName = tempProjectName;\r\n\r\n    // The \"rushProject.tempProjectName\" is guaranteed to be unique name (e.g. by adding the \"-2\"\r\n    // suffix).  Even after we strip the NPM scope, it will still be unique.\r\n    // Example: \"my-project-2\"\r\n    this._unscopedTempProjectName = Utilities.parseScopedPackageName(tempProjectName).name;\r\n\r\n    this._cyclicDependencyProjects = new Set<string>();\r\n    if (projectJson.cyclicDependencyProjects) {\r\n      for (const cyclicDependencyProject of projectJson.cyclicDependencyProjects) {\r\n        this._cyclicDependencyProjects.add(cyclicDependencyProject);\r\n      }\r\n    }\r\n    this._downstreamDependencyProjects = [];\r\n    this._shouldPublish = !!projectJson.shouldPublish;\r\n    this._versionPolicyName = projectJson.versionPolicyName;\r\n  }\r\n\r\n  /**\r\n   * The name of the NPM package.  An error is reported if this name is not\r\n   * identical to packageJson.name.\r\n   *\r\n   * Example: \"@scope/MyProject\"\r\n   */\r\n  public get packageName(): string {\r\n    return this._packageName;\r\n  }\r\n\r\n  /**\r\n   * The full path of the folder that contains the project to be built by Rush.\r\n   *\r\n   * Example: \"C:\\MyRepo\\libraries\\my-project\"\r\n   */\r\n  public get projectFolder(): string {\r\n    return this._projectFolder;\r\n  }\r\n\r\n  /**\r\n   * The relative path of the folder that contains the project to be built by Rush.\r\n   *\r\n   * Example: \"libraries\\my-project\"\r\n   */\r\n  public get projectRelativeFolder(): string {\r\n    return this._projectRelativeFolder;\r\n  }\r\n\r\n  /**\r\n   * The review category name, or undefined if no category was assigned.\r\n   * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.\r\n   */\r\n  public get reviewCategory(): string {\r\n    return this._reviewCategory;\r\n  }\r\n\r\n  /**\r\n   * A list of local projects that appear as devDependencies for this project, but cannot be\r\n   * locally linked because it would create a cyclic dependency; instead, the last published\r\n   * version will be installed in the Common folder.\r\n   *\r\n   * These are package names that would be found by RushConfiguration.getProjectByName().\r\n   */\r\n  public get cyclicDependencyProjects(): Set<string> {\r\n    return this._cyclicDependencyProjects;\r\n  }\r\n\r\n  /**\r\n   * A list of projects within the Rush configuration which directly depend on this package.\r\n   */\r\n  public get downstreamDependencyProjects(): string[] {\r\n    return this._downstreamDependencyProjects;\r\n  }\r\n\r\n  /**\r\n   * The parsed NPM \"package.json\" file from projectFolder.\r\n   */\r\n  public get packageJson(): IPackageJson {\r\n    return this._packageJson;\r\n  }\r\n\r\n  /**\r\n   * The unique name for the temporary project that will be generated in the Common folder.\r\n   * For example, if the project name is \"@scope/MyProject\", the temporary project name\r\n   * might be \"@rush-temp/MyProject-2\".\r\n   *\r\n   * Example: \"@rush-temp/MyProject-2\"\r\n   */\r\n  public get tempProjectName(): string {\r\n    return this._tempProjectName;\r\n  }\r\n\r\n  /**\r\n   * The unscoped temporary project name\r\n   *\r\n   * Example: \"my-project-2\"\r\n   */\r\n  public get unscopedTempProjectName(): string {\r\n    return this._unscopedTempProjectName;\r\n  }\r\n\r\n  /**\r\n   * A flag which indicates whether changes to this project should be published. This controls\r\n   * whether or not the project would show up when running `rush change`, and whether or not it\r\n   * should be published during `rush publish`.\r\n   */\r\n  public get shouldPublish(): boolean {\r\n    return this._shouldPublish || !!this._versionPolicyName;\r\n  }\r\n\r\n  /**\r\n   * Name of the version policy used by this project.\r\n   * @beta\r\n   */\r\n  public get versionPolicyName(): string | undefined {\r\n    return this._versionPolicyName;\r\n  }\r\n\r\n  /**\r\n   * Version policy of the project\r\n   * @beta\r\n   */\r\n  public get versionPolicy(): VersionPolicy | undefined {\r\n    if (this.versionPolicyName && this._rushConfiguration.versionPolicyConfiguration) {\r\n      return this._rushConfiguration.versionPolicyConfiguration.getVersionPolicy(\r\n        this.versionPolicyName);\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}