{"version":3,"sources":["data/CommandLineConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yBAAyB;AACzB,6BAA6B;AAE7B,oEAGsC;AAEtC,oDAAiD;AAqCjD;;;GAGG;AACH;IAsBE;;OAEG;IACH,YAAoB,eAA0D;QAC5E,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAwB,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAA0B,CAAC;QAElD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,EAAE,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC;gBACnC,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,OAAuB;oBAC7D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClC,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBAClE,MAAM,YAAY,GAAiB,eAAe,CAAC,aAAc,CAAC,QAAQ,CAAC,CAAC;oBAE5E,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC;wBAEvC,MAAM,UAAU,GAAa,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;wBAEtE,EAAE,CAAC,CAAC,YAAY,CAAC,YAAY;4BAC1B,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC1D,MAAM,IAAI,KAAK,CAAC,OAAO,6BAAa,CAAC,mBAAmB,qBAAqB,QAAQ,IAAI;kCACrF,0BAA0B,YAAY,CAAC,YAAY,GAAG;kCACtD,4CAA4C,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;wBAC5E,CAAC;oBACH,CAAC;oBAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAC3C,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAnDD,uEAAuE;IAChE,MAAM,CAAC,eAAe,CAAC,YAAoB;QAChD,IAAI,eAAe,GAA8C,SAAS,CAAC;QAC3E,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAChC,eAAe,GAAG,4BAAQ,CAAC,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,SAAS,EAAE,CAAC,CAAC;QACjG,CAAC;QACD,MAAM,CAAC,IAAI,wBAAwB,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC;IAEO,MAAM,CAAC,SAAS;QACtB,EAAE,CAAC,CAAC,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC;YACtC,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,qCAAqC,CAAC,CAAC;YAC3F,wBAAwB,CAAC,OAAO,GAAG,8BAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACzE,CAAC;QACD,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC;IAC1C,CAAC;;AAnBc,gCAAO,GAA2B,SAAS,CAAC;AAD7D,4DAyDC","file":"data/CommandLineConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  JsonFile,\r\n  JsonSchema\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { RushConstants } from '../RushConstants';\r\n\r\nexport interface ICustomCommand {\r\n  name: string;\r\n  summary: string;\r\n  documentation: string | undefined;\r\n  parallelized: boolean;\r\n}\r\n\r\nexport interface ICustomEnumValue {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport type CustomOption = ICustomEnumOption | ICustomFlagOption;\r\n\r\nexport interface IBaseCustomOption {\r\n  description: string;\r\n  associatedCommands: Array<string>;\r\n  shortName?: string;\r\n}\r\n\r\nexport interface ICustomFlagOption extends IBaseCustomOption {\r\n  optionType: 'flag';\r\n}\r\n\r\nexport interface ICustomEnumOption extends IBaseCustomOption {\r\n  optionType: 'enum';\r\n  enumValues: Array<ICustomEnumValue>;\r\n  defaultValue?: string;\r\n}\r\n\r\ninterface ICommandLineConfigurationJson {\r\n  customCommands?: Array<ICustomCommand>;\r\n  customOptions?: { [optionName: string]: CustomOption };\r\n}\r\n\r\n/**\r\n * Custom Commands and Options for the Rush Command Line\r\n * @public\r\n */\r\nexport class CommandLineConfiguration {\r\n  private static _schema: JsonSchema | undefined = undefined;\r\n  public options: Map<string, CustomOption>;\r\n  public commands: Map<string, ICustomCommand>;\r\n\r\n  /** Attempts to load pinned versions configuration from a given file */\r\n  public static tryLoadFromFile(jsonFilename: string): CommandLineConfiguration {\r\n    let commandLineJson: ICommandLineConfigurationJson | undefined = undefined;\r\n    if (fs.existsSync(jsonFilename)) {\r\n      commandLineJson = JsonFile.loadAndValidate(jsonFilename, CommandLineConfiguration.getSchema());\r\n    }\r\n    return new CommandLineConfiguration(commandLineJson);\r\n  }\r\n\r\n  private static getSchema(): JsonSchema {\r\n    if (!CommandLineConfiguration._schema) {\r\n      const schemaFilename: string = path.join(__dirname, '../schemas/command-line.schema.json');\r\n      CommandLineConfiguration._schema = JsonSchema.fromFile(schemaFilename);\r\n    }\r\n    return CommandLineConfiguration._schema;\r\n  }\r\n\r\n  /**\r\n   * Preferred to use CommandLineConfiguration.loadFromFile()\r\n   */\r\n  private constructor(commandLineJson: ICommandLineConfigurationJson | undefined) {\r\n    this.options = new Map<string, CustomOption>();\r\n    this.commands = new Map<string, ICustomCommand>();\r\n\r\n    if (commandLineJson) {\r\n      if (commandLineJson.customCommands) {\r\n        commandLineJson.customCommands.forEach((command: ICustomCommand) => {\r\n          this.commands.set(command.name, command);\r\n        });\r\n      }\r\n\r\n      if (commandLineJson.customOptions) {\r\n        for (const flagName of Object.keys(commandLineJson.customOptions)) {\r\n          const customOption: CustomOption = commandLineJson.customOptions![flagName];\r\n\r\n          if (customOption.optionType === 'enum') {\r\n\r\n            const enumValues: string[] = customOption.enumValues.map(v => v.name);\r\n\r\n            if (customOption.defaultValue &&\r\n               (enumValues.indexOf(customOption.defaultValue) === -1)) {\r\n              throw new Error(`In \"${RushConstants.commandLineFilename}\", custom option \"${flagName}\",`\r\n                + ` uses a default value \"${customOption.defaultValue}\"`\r\n                + ` which is missing from list of options: \"${enumValues.toString()}\"`);\r\n            }\r\n          }\r\n\r\n          this.options.set(flagName, customOption);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}