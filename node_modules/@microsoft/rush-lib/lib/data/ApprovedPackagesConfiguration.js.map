{"version":3,"sources":["data/ApprovedPackagesConfiguration.ts"],"names":[],"mappings":"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","file":"data/ApprovedPackagesConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\nimport { JsonFile, JsonSchema } from '@microsoft/node-core-library';\r\n\r\nimport Utilities from '../utilities/Utilities';\r\n\r\n/**\r\n * Part of IApprovedPackagesJson.\r\n */\r\nexport interface IApprovedPackagesItemJson {\r\n  name: string;\r\n  allowedCategories: string[];\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"browser-approved-packages.json\"\r\n * and \"nonbrowser-approved-packages.json\" configuration files.  See \"approved-packages.schema.json\"\r\n * for documentation.\r\n */\r\nexport interface IApprovedPackagesJson {\r\n  $schema?: string;\r\n  packages: IApprovedPackagesItemJson[];\r\n}\r\n\r\n/**\r\n * An item returned by ApprovedPackagesConfiguration\r\n * @public\r\n */\r\nexport class ApprovedPackagesItem {\r\n  /**\r\n   * The NPM package name\r\n   */\r\n  public packageName: string;\r\n\r\n  /**\r\n   * The project categories that are allowed to use this package.\r\n   */\r\n  public allowedCategories: Set<string> = new Set<string>();\r\n}\r\n\r\n/**\r\n * This represents the JSON file specified via the \"approvedPackagesFile\" option in rush.json.\r\n * @public\r\n */\r\nexport class ApprovedPackagesConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../schemas/approved-packages.schema.json'));\r\n\r\n  public items: ApprovedPackagesItem[] = [];\r\n\r\n  private _itemsByName: Map<string, ApprovedPackagesItem> = new Map<string, ApprovedPackagesItem>();\r\n\r\n  private _loadedJson: IApprovedPackagesJson;\r\n  private _jsonFilename: string;\r\n\r\n  public constructor(jsonFilename: string) {\r\n    this._jsonFilename = jsonFilename;\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Clears all the settings, returning to an empty state.\r\n   */\r\n  public clear(): void {\r\n    this._itemsByName.clear();\r\n    this._loadedJson = {\r\n      packages: []\r\n    };\r\n  }\r\n\r\n  public getItemByName(packageName: string): ApprovedPackagesItem | undefined {\r\n    return this._itemsByName.get(packageName);\r\n  }\r\n\r\n  public addOrUpdatePackage(packageName: string, reviewCategory: string): void {\r\n    let item: ApprovedPackagesItem | undefined = this._itemsByName.get(packageName);\r\n    if (!item) {\r\n      item = new ApprovedPackagesItem();\r\n      item.packageName = packageName;\r\n      this._addItem(item);\r\n    }\r\n\r\n    if (reviewCategory) {\r\n      item.allowedCategories.add(reviewCategory);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the file exists, calls loadFromFile().\r\n   */\r\n  public tryLoadFromFile(approvedPackagesPolicyEnabled: boolean): boolean {\r\n    if (!fsx.existsSync(this._jsonFilename)) {\r\n      return false;\r\n    }\r\n\r\n    this.loadFromFile();\r\n\r\n    if (!approvedPackagesPolicyEnabled) {\r\n      console.log(`Warning: Ignoring \"${path.basename(this._jsonFilename)}\" because the`\r\n        + ` \"approvedPackagesPolicy\" setting was not specified in rush.json`);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Loads the configuration data from the filename that was passed to the constructor.\r\n   */\r\n  public loadFromFile(): void {\r\n    const approvedPackagesJson: IApprovedPackagesJson = JsonFile.loadAndValidate(this._jsonFilename,\r\n      ApprovedPackagesConfiguration._jsonSchema);\r\n\r\n    this.clear();\r\n\r\n    for (const browserPackage of approvedPackagesJson.packages) {\r\n      this._addItemJson(browserPackage, this._jsonFilename);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads the configuration data to the filename that was passed to the constructor.\r\n   */\r\n  public saveToFile(): void {\r\n    // Update the JSON structure that we already loaded, preserving any existing state\r\n    // (which passed schema validation).\r\n\r\n    this._loadedJson.packages = [];\r\n\r\n    this.items.sort((a: ApprovedPackagesItem, b: ApprovedPackagesItem) => {\r\n      return a.packageName.localeCompare(b.packageName);\r\n    });\r\n\r\n    for (const item of this.items) {\r\n      // Sort the items from the set.  Too bad we can't use the new Array.from().\r\n      const allowedCategories: string[] = Utilities.getSetAsArray(item.allowedCategories);\r\n      allowedCategories.sort();\r\n\r\n      const itemJson: IApprovedPackagesItemJson = {\r\n        name: item.packageName,\r\n        allowedCategories: allowedCategories\r\n      };\r\n\r\n      this._loadedJson.packages.push(itemJson);\r\n    }\r\n\r\n    // Save the file\r\n    let body: string = JSON.stringify(this._loadedJson, undefined, 2) + '\\n';\r\n\r\n    // Unindent the allowedCategories array to improve readability\r\n    body = body.replace(\r\n      /(\"allowedCategories\": +\\[)([^\\]]+)/g,\r\n      (substring: string, ...args: string[]) => {\r\n        return args[0] + args[1].replace(/\\s+/g, ' ');\r\n      }\r\n    );\r\n\r\n    // Add a header\r\n    body = '// DO NOT ADD COMMENTS IN THIS FILE.'\r\n      + '  They will be lost when the Rush tool resaves it.\\n' + body;\r\n\r\n    body = Utilities.getAllReplaced(body, '\\n', '\\r\\n');\r\n    fsx.writeFileSync(this._jsonFilename, body);\r\n  }\r\n\r\n  /**\r\n   * Helper function only used by the constructor when loading the file.\r\n   */\r\n  private _addItemJson(itemJson: IApprovedPackagesItemJson, jsonFilename: string): void {\r\n    if (this._itemsByName.has(itemJson.name)) {\r\n      throw new Error(`Error loading package review file ${jsonFilename}:` + os.EOL\r\n        + ` the name \"${itemJson.name}\" appears more than once`);\r\n    }\r\n\r\n    const item: ApprovedPackagesItem = new ApprovedPackagesItem();\r\n    item.packageName = itemJson.name;\r\n    if (itemJson.allowedCategories) {\r\n      for (const allowedCategory of itemJson.allowedCategories) {\r\n        item.allowedCategories.add(allowedCategory);\r\n      }\r\n    }\r\n    this._addItem(item);\r\n  }\r\n\r\n  /**\r\n   * Helper function that adds an already created ApprovedPackagesItem to the\r\n   * list and set.\r\n   */\r\n  private _addItem(item: ApprovedPackagesItem): void {\r\n    if (this._itemsByName.has(item.packageName)) {\r\n      throw new Error('Duplicate key'); // this is a program bug\r\n    }\r\n    this.items.push(item);\r\n    this._itemsByName.set(item.packageName, item);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}