"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fsx = require("fs-extra");
const node_core_library_1 = require("@microsoft/node-core-library");
const Utilities_1 = require("../utilities/Utilities");
/**
 * This represents the configuration of a project that is built by Rush, based on
 * the Rush.json configuration file.
 * @public
 */
class RushConfigurationProject {
    /** @internal */
    constructor(projectJson, rushConfiguration, tempProjectName) {
        this._rushConfiguration = rushConfiguration;
        this._packageName = projectJson.packageName;
        this._projectRelativeFolder = projectJson.projectFolder;
        // For example, the depth of "a/b/c" would be 3.  The depth of "a" is 1.
        const projectFolderDepth = projectJson.projectFolder.split('/').length;
        if (projectFolderDepth < rushConfiguration.projectFolderMinDepth) {
            throw new Error(`To keep things organized, this repository has a projectFolderMinDepth policy`
                + ` requiring project folders to be at least ${rushConfiguration.projectFolderMinDepth} levels deep.`
                + `  Problem folder: "${projectJson.projectFolder}"`);
        }
        if (projectFolderDepth > rushConfiguration.projectFolderMaxDepth) {
            throw new Error(`To keep things organized, this repository has a projectFolderMaxDepth policy`
                + ` preventing project folders from being deeper than ${rushConfiguration.projectFolderMaxDepth} levels.`
                + `  Problem folder:  "${projectJson.projectFolder}"`);
        }
        this._projectFolder = path.join(rushConfiguration.rushJsonFolder, projectJson.projectFolder);
        if (!fsx.existsSync(this._projectFolder)) {
            throw new Error(`Project folder not found: ${projectJson.projectFolder}`);
        }
        // Are we using a package review file?
        if (rushConfiguration.approvedPackagesPolicy.enabled) {
            // If so, then every project needs to have a reviewCategory that was defined
            // by the reviewCategories array.
            if (!projectJson.reviewCategory) {
                throw new Error(`The "approvedPackagesPolicy" feature is enabled rush.json, but a reviewCategory` +
                    ` was not specified for the project "${projectJson.packageName}".`);
            }
            if (!rushConfiguration.approvedPackagesPolicy.reviewCategories.has(projectJson.reviewCategory)) {
                throw new Error(`The project "${projectJson.packageName}" specifies its reviewCategory as`
                    + `"${projectJson.reviewCategory}" which is not one of the defined reviewCategories.`);
            }
            this._reviewCategory = projectJson.reviewCategory;
        }
        const packageJsonFilename = path.join(this._projectFolder, 'package.json');
        this._packageJson = node_core_library_1.JsonFile.load(packageJsonFilename);
        if (this._packageJson.name !== this._packageName) {
            throw new Error(`The package name "${this._packageName}" specified in rush.json does not`
                + ` match the name "${this._packageJson.name}" from package.json`);
        }
        this._tempProjectName = tempProjectName;
        // The "rushProject.tempProjectName" is guaranteed to be unique name (e.g. by adding the "-2"
        // suffix).  Even after we strip the NPM scope, it will still be unique.
        // Example: "my-project-2"
        this._unscopedTempProjectName = Utilities_1.default.parseScopedPackageName(tempProjectName).name;
        this._cyclicDependencyProjects = new Set();
        if (projectJson.cyclicDependencyProjects) {
            for (const cyclicDependencyProject of projectJson.cyclicDependencyProjects) {
                this._cyclicDependencyProjects.add(cyclicDependencyProject);
            }
        }
        this._downstreamDependencyProjects = [];
        this._shouldPublish = !!projectJson.shouldPublish;
        this._versionPolicyName = projectJson.versionPolicyName;
    }
    /**
     * The name of the NPM package.  An error is reported if this name is not
     * identical to packageJson.name.
     *
     * Example: "@scope/MyProject"
     */
    get packageName() {
        return this._packageName;
    }
    /**
     * The full path of the folder that contains the project to be built by Rush.
     *
     * Example: "C:\MyRepo\libraries\my-project"
     */
    get projectFolder() {
        return this._projectFolder;
    }
    /**
     * The relative path of the folder that contains the project to be built by Rush.
     *
     * Example: "libraries\my-project"
     */
    get projectRelativeFolder() {
        return this._projectRelativeFolder;
    }
    /**
     * The review category name, or undefined if no category was assigned.
     * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.
     */
    get reviewCategory() {
        return this._reviewCategory;
    }
    /**
     * A list of local projects that appear as devDependencies for this project, but cannot be
     * locally linked because it would create a cyclic dependency; instead, the last published
     * version will be installed in the Common folder.
     *
     * These are package names that would be found by RushConfiguration.getProjectByName().
     */
    get cyclicDependencyProjects() {
        return this._cyclicDependencyProjects;
    }
    /**
     * A list of projects within the Rush configuration which directly depend on this package.
     */
    get downstreamDependencyProjects() {
        return this._downstreamDependencyProjects;
    }
    /**
     * The parsed NPM "package.json" file from projectFolder.
     */
    get packageJson() {
        return this._packageJson;
    }
    /**
     * The unique name for the temporary project that will be generated in the Common folder.
     * For example, if the project name is "@scope/MyProject", the temporary project name
     * might be "@rush-temp/MyProject-2".
     *
     * Example: "@rush-temp/MyProject-2"
     */
    get tempProjectName() {
        return this._tempProjectName;
    }
    /**
     * The unscoped temporary project name
     *
     * Example: "my-project-2"
     */
    get unscopedTempProjectName() {
        return this._unscopedTempProjectName;
    }
    /**
     * A flag which indicates whether changes to this project should be published. This controls
     * whether or not the project would show up when running `rush change`, and whether or not it
     * should be published during `rush publish`.
     */
    get shouldPublish() {
        return this._shouldPublish || !!this._versionPolicyName;
    }
    /**
     * Name of the version policy used by this project.
     * @beta
     */
    get versionPolicyName() {
        return this._versionPolicyName;
    }
    /**
     * Version policy of the project
     * @beta
     */
    get versionPolicy() {
        if (this.versionPolicyName && this._rushConfiguration.versionPolicyConfiguration) {
            return this._rushConfiguration.versionPolicyConfiguration.getVersionPolicy(this.versionPolicyName);
        }
        return undefined;
    }
}
exports.default = RushConfigurationProject;

//# sourceMappingURL=RushConfigurationProject.js.map
