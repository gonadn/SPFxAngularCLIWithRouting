import { VersionPolicy, BumpType } from './VersionPolicy';
/**
 * @beta
 */
export interface IVersionPolicyJson {
    policyName: string;
    definitionName: string;
}
/**
 * @beta
 */
export interface ILockStepVersionJson extends IVersionPolicyJson {
    version: string;
    nextBump: string;
}
/**
 * @beta
 */
export interface IIndividualVersionJson extends IVersionPolicyJson {
    lockedMajor?: number;
}
/**
 * @beta
 */
export declare class VersionPolicyConfiguration {
    private _jsonFileName;
    private static _jsonSchema;
    private _versionPolicies;
    /**
     * @internal
     */
    constructor(_jsonFileName: string);
    /**
     * Gets the version policy by its name.
     * Throws error if the version policy is not found.
     * @param policyName - Name of the version policy
     */
    getVersionPolicy(policyName: string): VersionPolicy;
    /**
     * Gets all the version policies
     */
    readonly versionPolicies: Map<string, VersionPolicy>;
    /**
     * Bumps up versions for the specified version policy or all version policies
     *
     * @param versionPolicyName - version policy name
     * @param bumpType - bump type to override what policy has defined.
     * @param identifier - prerelease identifier to override what policy has defined.
     * @param shouldCommit - should save to disk
     */
    bump(versionPolicyName?: string, bumpType?: BumpType, identifier?: string, shouldCommit?: boolean): void;
    private _loadFile();
}
