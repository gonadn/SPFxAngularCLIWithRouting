"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const fsx = require("fs-extra");
const path = require("path");
const gitInfo = require("git-repo-info");
/**
 * This class represents a single change file.
 * @public
 */
class ChangeFile {
    /**
     * @internal
     */
    constructor(_changeFileData, _rushConfiguration) {
        this._changeFileData = _changeFileData;
        this._rushConfiguration = _rushConfiguration;
        if (!this._changeFileData) {
            throw new Error(`_changeFileData does not have value`);
        }
        if (!this._rushConfiguration) {
            throw new Error(`_rushConfiguration does not have value`);
        }
    }
    /**
     * Adds a change entry into the change file
     * @param data - change information
     */
    addChange(data) {
        this._changeFileData.changes.push(data);
    }
    /**
     * Gets all the change entries about the specified package from the change file.
     * @param packageName - package name
     */
    getChanges(packageName) {
        const changes = [];
        for (const info of this._changeFileData.changes) {
            if (info.packageName === packageName) {
                changes.push(info);
            }
        }
        return changes;
    }
    /**
     * Writes the change file to disk in sync mode
     */
    writeSync() {
        const filePath = this.generatePath();
        fsx.ensureFileSync(filePath);
        fsx.writeFileSync(filePath, JSON.stringify(this._changeFileData, undefined, 2));
    }
    /**
     * Generates a file path for storing the change file to disk
     */
    generatePath() {
        let branch = undefined;
        try {
            branch = gitInfo().branch;
        }
        catch (error) {
            console.log('Could not automatically detect git branch name, using timestamp instead.');
        }
        // example filename: yourbranchname_2017-05-01-20-20.json
        const filename = (branch ?
            this._escapeFilename(`${branch}_${this._getTimestamp()}.json`) :
            `${this._getTimestamp()}.json`);
        const filePath = path.join(this._rushConfiguration.changesFolder, ...this._changeFileData.packageName.split('/'), filename);
        return filePath;
    }
    /**
    * Gets the current time, formatted as YYYY-MM-DD-HH-MM
    * Optionally will include seconds
    */
    _getTimestamp(useSeconds = false) {
        // Create a date string with the current time
        // dateString === "2016-10-19T22:47:49.606Z"
        const dateString = new Date().toJSON();
        // Parse out 2 capture groups, the date and the time
        const dateParseRegex = /([0-9]{4}-[0-9]{2}-[0-9]{2}).*([0-9]{2}:[0-9]{2}:[0-9]{2})/;
        // matches[1] === "2016-10-19"
        // matches[2] === "22:47:49"
        const matches = dateString.match(dateParseRegex);
        if (matches) {
            // formattedDate === "2016-10-19"
            const formattedDate = matches[1];
            let formattedTime;
            if (useSeconds) {
                // formattedTime === "22-47-49"
                formattedTime = matches[2].replace(':', '-');
            }
            else {
                // formattedTime === "22-47"
                const timeParts = matches[2].split(':');
                formattedTime = `${timeParts[0]}-${timeParts[1]}`;
            }
            return `${formattedDate}-${formattedTime}`;
        }
        return undefined;
    }
    _escapeFilename(filename, replacer = '-') {
        // Removes / ? < > \ : * | ", really anything that isn't a letter, number, '.' '_' or '-'
        const badCharacters = /[^a-zA-Z0-9._-]/g;
        return filename.replace(badCharacters, replacer);
    }
}
exports.ChangeFile = ChangeFile;

//# sourceMappingURL=ChangeFile.js.map
