"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const RushConstants_1 = require("../RushConstants");
/**
 * Custom Commands and Options for the Rush Command Line
 * @public
 */
class CommandLineConfiguration {
    /**
     * Preferred to use CommandLineConfiguration.loadFromFile()
     */
    constructor(commandLineJson) {
        this.options = new Map();
        this.commands = new Map();
        if (commandLineJson) {
            if (commandLineJson.customCommands) {
                commandLineJson.customCommands.forEach((command) => {
                    this.commands.set(command.name, command);
                });
            }
            if (commandLineJson.customOptions) {
                for (const flagName of Object.keys(commandLineJson.customOptions)) {
                    const customOption = commandLineJson.customOptions[flagName];
                    if (customOption.optionType === 'enum') {
                        const enumValues = customOption.enumValues.map(v => v.name);
                        if (customOption.defaultValue &&
                            (enumValues.indexOf(customOption.defaultValue) === -1)) {
                            throw new Error(`In "${RushConstants_1.RushConstants.commandLineFilename}", custom option "${flagName}",`
                                + ` uses a default value "${customOption.defaultValue}"`
                                + ` which is missing from list of options: "${enumValues.toString()}"`);
                        }
                    }
                    this.options.set(flagName, customOption);
                }
            }
        }
    }
    /** Attempts to load pinned versions configuration from a given file */
    static tryLoadFromFile(jsonFilename) {
        let commandLineJson = undefined;
        if (fs.existsSync(jsonFilename)) {
            commandLineJson = node_core_library_1.JsonFile.loadAndValidate(jsonFilename, CommandLineConfiguration.getSchema());
        }
        return new CommandLineConfiguration(commandLineJson);
    }
    static getSchema() {
        if (!CommandLineConfiguration._schema) {
            const schemaFilename = path.join(__dirname, '../schemas/command-line.schema.json');
            CommandLineConfiguration._schema = node_core_library_1.JsonSchema.fromFile(schemaFilename);
        }
        return CommandLineConfiguration._schema;
    }
}
CommandLineConfiguration._schema = undefined;
exports.CommandLineConfiguration = CommandLineConfiguration;

//# sourceMappingURL=CommandLineConfiguration.js.map
