import * as semver from 'semver';
import { IVersionPolicyJson, ILockStepVersionJson, IIndividualVersionJson } from './VersionPolicyConfiguration';
import IPackageJson from '../utilities/IPackageJson';
/**
 * Type of version bumps
 * @beta
 */
export declare enum BumpType {
    'none' = 0,
    'prerelease' = 1,
    'patch' = 2,
    'preminor' = 3,
    'minor' = 4,
    'major' = 5,
}
/**
 * Version policy base type names
 * @beta
 */
export declare enum VersionPolicyDefinitionName {
    'lockStepVersion' = 0,
    'individualVersion' = 1,
}
/**
 * This is the base class for version policy which controls how versions get bumped.
 * @beta
 */
export declare abstract class VersionPolicy {
    private _policyName;
    private _definitionName;
    /**
     * Loads from version policy json
     *
     * @param versionPolicyJson - version policy Json
     *
     * @internal
     */
    static load(versionPolicyJson: IVersionPolicyJson): VersionPolicy | undefined;
    /**
     * @internal
     */
    constructor(versionPolicyJson: IVersionPolicyJson);
    /**
     * Version policy name
     */
    readonly policyName: string;
    /**
     * Version policy definition name
     */
    readonly definitionName: VersionPolicyDefinitionName;
    /**
     * Returns an updated package json that satisfies the policy.
     *
     * @param project - package json
     */
    abstract ensure(project: IPackageJson): IPackageJson | undefined;
    /**
     * Bumps version based on the policy
     *
     * @param bumpType - (optional) override bump type
     * @param identifier - (optional) override prerelease Id
     */
    abstract bump(bumpType?: BumpType, identifier?: string): void;
    /**
     * Serialized json for the policy
     *
     * @internal
     */
    readonly abstract _json: IVersionPolicyJson;
    /**
     * Validates the specified version and throws if the version does not satisfy the policy.
     *
     * @param versionString - version string
     * @param packageName - package name
     */
    abstract validate(versionString: string, packageName: string): void;
}
/**
 * This policy indicates all related projects should use the same version.
 * @beta
 */
export declare class LockStepVersionPolicy extends VersionPolicy {
    private _version;
    private _nextBump;
    /**
     * @internal
     */
    constructor(versionPolicyJson: ILockStepVersionJson);
    /**
     * The value of the lockstep version
     */
    readonly version: semver.SemVer;
    /**
     * The type of bump for next bump.
     */
    readonly nextBump: BumpType;
    /**
     * Serialized json for this policy
     *
     * @internal
     */
    readonly _json: ILockStepVersionJson;
    /**
     * Returns an updated package json that satisfies the version policy.
     *
     * @param project - input package json
     */
    ensure(project: IPackageJson): IPackageJson | undefined;
    /**
     * Bumps the version of the lockstep policy
     *
     * @param bumpType - Overwrite bump type in version-policy.json with the provided value.
     * @param identifier - Prerelease identifier if bump type is prerelease.
     */
    bump(bumpType?: BumpType, identifier?: string): void;
    /**
     * Validates the specified version and throws if the version does not satisfy lockstep version.
     *
     * @param versionString - version string
     * @param packageName - package name
     */
    validate(versionString: string, packageName: string): void;
    private _updatePackageVersion(project, newVersion);
    private _getReleaseType(bumpType);
}
/**
 * This policy indicates all related projects get version bump driven by their own changes.
 * @beta
 */
export declare class IndividualVersionPolicy extends VersionPolicy {
    private _lockedMajor;
    /**
     * @internal
     */
    constructor(versionPolicyJson: IIndividualVersionJson);
    /**
     * The major version that has been locked
     */
    readonly lockedMajor: number | undefined;
    /**
     * Serialized json for this policy
     *
     * @internal
     */
    readonly _json: IIndividualVersionJson;
    /**
     * Returns an updated package json that satisfies the version policy.
     *
     * @param project - input package json
     */
    ensure(project: IPackageJson): IPackageJson | undefined;
    /**
     * Bumps version.
     * Individual version policy lets change files drive version bump. This method currently does not do anything.
     *
     * @param bumpType - bump type
     * @param identifier - prerelease id
     */
    bump(bumpType?: BumpType, identifier?: string): void;
    /**
     * Validates the specified version and throws if the version does not satisfy the policy.
     *
     * @param versionString - version string
     * @param packageName - package name
     */
    validate(versionString: string, packageName: string): void;
}
