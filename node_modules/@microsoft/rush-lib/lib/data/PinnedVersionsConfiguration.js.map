{"version":3,"sources":["data/PinnedVersionsConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yBAAyB;AACzB,iCAAiC;AACjC,oEAAwD;AAMxD;;;;;;;;;;;;;GAaG;AACH;IAsDE;;OAEG;IACH,YAAoB,iBAAkD,EAAU,SAAiB;QAAjB,cAAS,GAAT,SAAS,CAAQ;QAC/F,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;QACvC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtB,GAAG,CAAC,CAAC,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;IACH,CAAC;IA7DD,uEAAuE;IAChE,MAAM,CAAC,eAAe,CAAC,YAAoB;QAChD,IAAI,iBAAiB,GAAoC,SAAS,CAAC;QAEnE,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAChC,iBAAiB,GAAG,4BAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,CAAC,IAAI,2BAA2B,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;IAC1E,CAAC;IAED,uEAAuE;IAChE,GAAG,CAAC,UAAkB,EAAE,OAAe;QAC5C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1D,MAAM,IAAI,KAAK,CAAC,uBAAuB,OAAO,UAAU,UAAU,4CAA4C,CAAC,CAAC;QAClH,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,GAAG,CAAC,UAAkB;QAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAEM,GAAG,CAAC,UAAkB;QAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAEM,OAAO,CAAC,EAAiD;QAC9D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,IAAI;QACT,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,UAAkB;QAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,IAAW,IAAI;QACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAcO,UAAU;QAChB,MAAM,OAAO,GAAwB,EAAE,CAAC;QACxC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,UAAkB;YACrD,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;CACF;AAzED,kEAyEC","file":"data/PinnedVersionsConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fs from 'fs';\r\nimport * as semver from 'semver';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\ninterface IPinnedVersionsJson {\r\n  [dependency: string]: string;\r\n}\r\n\r\n/**\r\n * Pinned Versions is a Rush feature designed to mimic the behavior of NPM\r\n * when performing an install. Essentially, for a project, NPM installs all of\r\n * the first level dependencies before starting any second-level dependencies.\r\n * This means that you can control the specific version of a second-level dependency\r\n * by promoting it to a 1st level dependency and using a version number that would satisfy.\r\n * However, since rush uses the /common/package.json file, NPM treats each rush project\r\n * as a top-level dependency, and treats the actual 1st level dependencies as second order.\r\n * This means you could have cases where there is unnecessary inversion and side-by-side versioning\r\n * in your shrinkwrap file. To mitigate this issue, we promote some dependencies and list them\r\n * directly in the /common/package.json, ensuring that the selected version will be installed first\r\n * and at the root.\r\n * @public\r\n */\r\nexport class PinnedVersionsConfiguration {\r\n  private _data: Map<string, string>;\r\n\r\n  /** Attempts to load pinned versions configuration from a given file */\r\n  public static tryLoadFromFile(jsonFilename: string): PinnedVersionsConfiguration {\r\n    let pinnedVersionJson: IPinnedVersionsJson | undefined = undefined;\r\n\r\n    if (fs.existsSync(jsonFilename)) {\r\n      pinnedVersionJson = JsonFile.load(jsonFilename);\r\n    }\r\n\r\n    return new PinnedVersionsConfiguration(pinnedVersionJson, jsonFilename);\r\n  }\r\n\r\n  /** Set a pinned version. Checks that the version is a valid semver. */\r\n  public set(dependency: string, version: string): this {\r\n    if (!semver.valid(version) && !semver.validRange(version)) {\r\n      throw new Error(`The pinned version \"${version}\" for \"${dependency}\" project is not a valid semantic version.`);\r\n    }\r\n    this._data.set(dependency, version);\r\n    return this;\r\n  }\r\n\r\n  public get(dependency: string): string | undefined {\r\n    return this._data.get(dependency);\r\n  }\r\n\r\n  public has(dependency: string): boolean {\r\n    return this._data.has(dependency);\r\n  }\r\n\r\n  public forEach(cb: (version: string, dependency: string) => void): this {\r\n    this._data.forEach(cb);\r\n    return this;\r\n  }\r\n\r\n  public save(): this {\r\n    JsonFile.save(this._serialize(), this._filename);\r\n    return this;\r\n  }\r\n\r\n  public delete(dependency: string): boolean {\r\n    return this._data.delete(dependency);\r\n  }\r\n\r\n  public clear(): this {\r\n    this._data.clear();\r\n    return this;\r\n  }\r\n\r\n  public get size(): number {\r\n    return this._data.size;\r\n  }\r\n\r\n  /**\r\n   * Preferred to use PinnedVersionsConfiguration.loadFromFile()\r\n   */\r\n  private constructor(pinnedVersionJson: IPinnedVersionsJson | undefined, private _filename: string) {\r\n    this._data = new Map<string, string>();\r\n    if (pinnedVersionJson) {\r\n      for (const dependency of Object.keys(pinnedVersionJson)) {\r\n        this.set(dependency, pinnedVersionJson[dependency]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _serialize(): IPinnedVersionsJson {\r\n    const rawJson: IPinnedVersionsJson = {};\r\n    this._data.forEach((version: string, dependency: string) => {\r\n      rawJson[dependency] = version;\r\n    });\r\n    return rawJson;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}