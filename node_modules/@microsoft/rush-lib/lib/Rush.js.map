{"version":3,"sources":["Rush.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,2BAAyB;AACzB,6BAA6B;AAC7B,iCAAiC;AAEjC,+EAAwE;AAGxE;;;;GAIG;AACH;IAGE;;;;;;;;OAQG;IACI,MAAM,CAAC,MAAM,CAAC,eAAuB,EAAE,SAAkB;QAC9D,OAAO,CAAC,GAAG,CACT,QAAG;YACH,MAAM,CAAC,IAAI,CAAC,iCAAiC,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,EAAE,GAAG,cAAc,CAAC,CAAC;YAC7G,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC;YACpC,QAAG,CACJ,CAAC;QAEF,MAAM,MAAM,GAA0B,IAAI,+BAAqB,EAAE,CAAC;QAElE,MAAM,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,MAAM,KAAK,OAAO;QACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,MAAM,qBAAqB,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;YAC/F,MAAM,aAAa,GAAiB,OAAO,CAAC,qBAAqB,CAAC,CAAC;YACnE,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF;AAvCD,uBAuCC","file":"Rush.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { EOL } from 'os';\r\nimport * as path from 'path';\r\nimport * as colors from 'colors';\r\n\r\nimport RushCommandLineParser from './cli/actions/RushCommandLineParser';\r\nimport IPackageJson from './utilities/IPackageJson';\r\n\r\n/**\r\n * Operations involving the rush tool and its operation.\r\n *\r\n * @public\r\n */\r\nexport default class Rush {\r\n  private static _version: string;\r\n\r\n  /**\r\n   * Executes the Rush CLI. This is expected to be called by the @microsoft/rush package, which acts as a version\r\n   *  manager for the Rush tool. The rush-lib API is exposed through the index.ts/js file.\r\n   *\r\n   * @param launcherVersion - The version of the @microsoft/rush wrapper used to call invoke the CLI.\r\n   * @param isManaged - True if the tool was invoked from within a project with a rush.json file, otherwise false. We\r\n   *  consider a project without a rush.json to be \"unmanaged\" and we'll print that to the command line when\r\n   *  the tool is executed. This is mainly used for debugging purposes.\r\n   */\r\n  public static launch(launcherVersion: string, isManaged: boolean): void {\r\n    console.log(\r\n      EOL +\r\n      colors.bold(`Rush Multi-Package Build Tool ${Rush.version}` + colors.yellow(isManaged ? '' : ' (unmanaged)')) +\r\n      colors.cyan(' - http://aka.ms/rush') +\r\n      EOL\r\n    );\r\n\r\n    const parser: RushCommandLineParser = new RushCommandLineParser();\r\n\r\n    parser.execute();\r\n  }\r\n\r\n  /**\r\n   * The currently executing version of the \"rush-lib\" library.\r\n   * This is the same as the Rush tool version for that release.\r\n   * @public\r\n   */\r\n  public static get version(): string {\r\n    if (!Rush._version) {\r\n      const myPackageJsonFilename: string = path.resolve(path.join(__dirname, '..', 'package.json'));\r\n      const myPackageJson: IPackageJson = require(myPackageJsonFilename);\r\n      Rush._version = myPackageJson.version;\r\n    }\r\n\r\n    return Rush._version;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}