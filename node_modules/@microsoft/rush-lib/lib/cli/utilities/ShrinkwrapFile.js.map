{"version":3,"sources":["cli/utilities/ShrinkwrapFile.ts"],"names":[],"mappings":"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","file":"cli/utilities/ShrinkwrapFile.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as semver from 'semver';\r\nimport npmPackageArg = require('npm-package-arg');\r\n\r\nimport Utilities from '../../utilities/Utilities';\r\nimport { RushConstants } from '../../RushConstants';\r\n\r\ninterface IShrinkwrapDependencyJson {\r\n  version: string;\r\n  from: string;\r\n  resolved: string;\r\n  dependencies: { [dependency: string]: IShrinkwrapDependencyJson };\r\n}\r\n\r\ninterface IShrinkwrapJson {\r\n  name: string;\r\n  version: string;\r\n  dependencies: { [dependency: string]: IShrinkwrapDependencyJson };\r\n}\r\n\r\n/**\r\n * This class is a parser for NPM's npm-shrinkwrap.json file format.\r\n */\r\nexport default class ShrinkwrapFile {\r\n  private _shrinkwrapJson: IShrinkwrapJson;\r\n  private _alreadyWarnedSpecs: Set<string> = new Set<string>();\r\n\r\n  public static loadFromFile(shrinkwrapJsonFilename: string): ShrinkwrapFile | undefined {\r\n    let data: string | undefined = undefined;\r\n    try {\r\n      if (!fsx.existsSync(shrinkwrapJsonFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format\r\n      // and typically very large, so we want to load it the same way that NPM does.\r\n      data = fsx.readFileSync(shrinkwrapJsonFilename).toString();\r\n      if (data.charCodeAt(0) === 0xFEFF) {  // strip BOM\r\n        data = data.slice(1);\r\n      }\r\n\r\n      return new ShrinkwrapFile(JSON.parse(data));\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapJsonFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  private static tryGetValue<T>(dictionary: { [key2: string]: T }, key: string): T | undefined {\r\n    if (dictionary.hasOwnProperty(key)) {\r\n      return dictionary[key];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns the list of temp projects defined in this file.\r\n   * Example: [ '@rush-temp/project1', '@rush-temp/project2' ]\r\n   */\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    const result: string[] = [];\r\n    for (const key of Object.keys(this._shrinkwrapJson.dependencies)) {\r\n      // If it starts with @rush-temp, then include it:\r\n      if (Utilities.parseScopedPackageName(key).scope === RushConstants.rushTempNpmScope) {\r\n        result.push(key);\r\n      }\r\n    }\r\n    result.sort();  // make the result deterministic\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the shrinkwrap file includes a package that would satisfiying the specified\r\n   * package name and SemVer version range.  By default, the dependencies are resolved by looking\r\n   * at the root of the node_modules folder described by the shrinkwrap file.  However, if\r\n   * tempProjectName is specified, then the resolution will start in that subfolder.\r\n   *\r\n   * Consider this example:\r\n   *\r\n   * - node_modules\\\r\n   *   - temp-project\\\r\n   *     - lib-a@1.2.3\r\n   *     - lib-b@1.0.0\r\n   *   - lib-b@2.0.0\r\n   *\r\n   * In this example, hasCompatibleDependency(\"lib-b\", \">= 1.1.0\", \"temp-project\") would fail\r\n   * because it finds lib-b@1.0.0 which does not satisfy the pattern \">= 1.1.0\".\r\n   */\r\n  public hasCompatibleDependency(dependencyName: string, versionRange: string, tempProjectName?: string): boolean {\r\n\r\n    // First, check under tempProjectName, as this is the first place \"rush link\" looks.\r\n    let dependencyJson: IShrinkwrapDependencyJson | undefined = undefined;\r\n\r\n    if (tempProjectName) {\r\n      const tempDependency: IShrinkwrapDependencyJson | undefined = ShrinkwrapFile.tryGetValue(\r\n        this._shrinkwrapJson.dependencies, tempProjectName);\r\n      if (tempDependency && tempDependency.dependencies) {\r\n        dependencyJson = ShrinkwrapFile.tryGetValue(tempDependency.dependencies, dependencyName);\r\n      }\r\n    }\r\n\r\n    // Otherwise look at the root of the shrinkwrap file\r\n    if (!dependencyJson) {\r\n      dependencyJson = ShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n    }\r\n\r\n    if (!dependencyJson) {\r\n      return false;\r\n    }\r\n\r\n    const result: npmPackageArg.IResult = npmPackageArg.resolve(dependencyName, versionRange);\r\n    switch (result.type) {\r\n      case 'version':\r\n      case 'range':\r\n        // If it's a SemVer pattern, then require that the shrinkwrapped version must be compatible\r\n        return semver.satisfies(dependencyJson.version, versionRange);\r\n      default:\r\n        // Only warn once for each spec\r\n        if (!this._alreadyWarnedSpecs.has(result.rawSpec)) {\r\n          this._alreadyWarnedSpecs.add(result.rawSpec);\r\n          console.log(colors.yellow(`WARNING: Not validating ${result.type}-based specifier: \"${result.rawSpec}\"`));\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n\r\n  private constructor(shrinkwrapJson: IShrinkwrapJson) {\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n\r\n    // Normalize the data\r\n    if (!this._shrinkwrapJson.version) {\r\n      this._shrinkwrapJson.version = '';\r\n    }\r\n    if (!this._shrinkwrapJson.name) {\r\n      this._shrinkwrapJson.name = '';\r\n    }\r\n    if (!this._shrinkwrapJson.dependencies) {\r\n      this._shrinkwrapJson.dependencies = { };\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}