{"version":3,"sources":["cli/utilities/InstallManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAC7B,iCAAiC;AACjC,yBAAyB;AACzB,6BAA6B;AAC7B,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B;AAC3B,qCAAqC;AACrC,0CAA2C;AAC3C,oEAAwD;AAExD,iEAA0D;AAG1D,uDAAoD;AACpD,yDAAkD;AAClD,yDAAsD;AAKtD,MAAM,oBAAoB,GAAW,CAAC,CAAC;AAEvC,MAAM,IAAI,GAAmC,QAAQ,CAAC,IAAI,CAAC,mBAAS,CAAC,eAAe,EAAE,CAAC,CAAC;AAExF;;GAEG;AACH,IAAY,WAgBX;AAhBD,WAAY,WAAW;IACrB;;;;OAIG;IACH,iDAAM,CAAA;IACN;;;OAGG;IACH,yDAAU,CAAA;IACV;;OAEG;IACH,2DAAW,CAAA;AACb,CAAC,EAhBW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAgBtB;AAED;;GAEG;AACH;IAKE;;OAEG;IACI,MAAM,CAAC,+BAA+B,CAAC,iBAAoC;QAChF,MAAM,kBAAkB,GAA6B,IAAI,GAAG,EAAuB,CAAC;QAEpF,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAiC;YACnE,cAAc,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,kBAAkB,EACxE,OAAO,CAAC,wBAAwB,EAAE,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACtE,cAAc,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,kBAAkB,EACxE,OAAO,CAAC,wBAAwB,EAAE,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,MAAM,gBAAgB,GAAwB,IAAI,GAAG,EAAkB,CAAC;QACxE,kBAAkB,CAAC,OAAO,CAAC,CAAC,QAAqB,EAAE,GAAW;YAC5D,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,OAAO,GAAW,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;gBACvD,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACrC,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,gBAAgB,CAAC;IAC1B,CAAC;IAED,kCAAkC;IAC3B,MAAM,CAAC,KAAK,CAAI,IAAiB;QACtC,MAAM,IAAI,GAAa,IAAI,KAAK,EAAK,CAAC;QAEtC,MAAM,QAAQ,GAAgB,IAAI,CAAC,IAAI,EAAE,CAAC;QAC1C,IAAI,OAAO,GAAsB,QAAQ,CAAC,IAAI,EAAE,CAAC;QACjD,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC5B,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAAC,kBAA4C,EAC7E,UAAkB,EAAE,OAAe;QACnC,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxC,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;QACxD,CAAC;QACD,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAEO,MAAM,CAAC,qBAAqB,CAClC,iBAAoC,EACpC,kBAA4C,EAC5C,UAAuB,EAAE,IAA2C;QAEpE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,UAAkB;gBAC3C,MAAM,OAAO,GAAW,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEzC,8CAA8C;gBAC9C,8CAA8C;gBAC9C,2DAA2D;gBAC3D,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC;oBAC/E,CAAC,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAE,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;oBAClG,cAAc,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;gBAC9E,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,YAAY,iBAAoC;QAC9C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAE5C,gDAAgD;QAChD,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC,IAAI,CAC/C,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;QAEjE,IAAI,CAAC,cAAc,GAAG,IAAI,uBAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACnE,CAAC;IAED;;;;;OAKG;IACH,IAAW,+BAA+B;QACxC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,kBAAkB,CAAC,cAAuB;QAC/C,qCAAqC;QACrC,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAEtF,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAChC,CAAC;QAED,+CAA+C;QAC/C,MAAM,aAAa,GAAW,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QACzG,iEAAiE;QACjE,MAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;QAE9E,4FAA4F;QAC5F,iCAAiC;QACjC,EAAE,CAAC,CAAC,cAAc,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;YAEtG,mBAAS,CAAC,yBAAyB,CACjC,aAAa,EACb,KAAK,EACL,IAAI,CAAC,kBAAkB,CAAC,cAAc,EACtC,mBAAmB,EACnB,oBAAoB,CACrB,CAAC;YAEF,0DAA0D;YAC1D,GAAG,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YACvC,OAAO,CAAC,GAAG,CAAC,6BAA6B,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QACtF,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,GAAG,MAAM,GAAG,aAAa,CAAC,CAAC;QACtG,CAAC;QAED,mCAAmC;QACnC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC9D,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QAC3D,CAAC;QAED,6CAA6C;QAC7C,MAAM,kBAAkB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;QACpG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACvC,GAAG,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,cAAc,GAAG,kBAAkB,GAAG,GAAG,CAAC,CAAC;QAChE,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC;QAC7C,GAAG,CAAC,WAAW,CAAC,aAAa,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,IAAI,CAAC,mCAAmC,CAAC,SAAS,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACI,mCAAmC,CAAC,cAA0C;QACnF,MAAM,SAAS,GAAc,qBAAS,CAAC,KAAK,EAAE,CAAC;QAE/C,4CAA4C;QAC5C,MAAM,kBAAkB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EACnF,6BAAa,CAAC,0BAA0B,CAAC,CAAC;QAE5C,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,4BAA4B,GAAG,kBAAkB,CAAC,CAAC,CAAC;QAErF,mBAAS,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;QAEpD,iFAAiF;QACjF,yBAAyB;QACzB,IAAI,iBAAiB,GAAY,IAAI,CAAC;QAEtC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,iBAAiB,GAAG,KAAK,CAAC;QAC5B,CAAC;QAED,qCAAqC;QACrC,0FAA0F;QAC1F,yEAAyE;QACzE,MAAM,gBAAgB,GACpB,cAAc,CAAC,+BAA+B,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC1E,MAAM,cAAc,GAAwB,IAAI,GAAG,EAAkB,CAAC;QAEtE,gBAAgB,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,UAAkB;YAC3D,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,UAAkB;YACjF,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACnB,sCAAsC;YACtC,cAAc,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,UAAkB;gBACzD,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,uBAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;oBACjE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAC5B,GAAG,EAAE,CAAC,GAAG,6CAA6C,UAAU,GAAG;0BACjE,KAAK,OAAO,+BAA+B,CAAC,CAAC,CAAC,CAAC;oBACnD,iBAAiB,GAAG,KAAK,CAAC;gBAC5B,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACnD,2FAA2F;gBAC3F,8FAA8F;gBAC9F,cAAc;gBACd,iBAAiB,GAAG,KAAK,CAAC;YAC5B,CAAC;QACH,CAAC;QAED,oDAAoD;QACpD,kFAAkF;QAClF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,2BAA2B,EAC/D,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC;QAElD,4DAA4D;QAC5D,2CAA2C;QAC3C,MAAM,kBAAkB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,aAAa,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAC5F,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;QAEjD,MAAM,iBAAiB,GAAiB;YACtC,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,2CAA2C;YACxD,IAAI,EAAE,aAAa;YACnB,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,OAAO;SACjB,CAAC;QAEF,8DAA8D;QAC9D,sDAAsD;QACtD,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,UAAkB;YACrE,iBAAiB,CAAC,YAAa,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,0EAA0E;QAC1E,mEAAmE;QACnE,MAAM,kBAAkB,GAA+B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjG,kBAAkB,CAAC,IAAI,CACrB,CAAC,CAA2B,EAAE,CAA2B,KAAK,CAAC,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC,eAAe,CAAC,CACjH,CAAC;QAEF,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,kBAAkB,CAAC,CAAC,CAAC;YAC7C,MAAM,WAAW,GAAiB,WAAW,CAAC,WAAW,CAAC;YAE1D,6DAA6D;YAC7D,MAAM,WAAW,GAAW,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;YAElE,0BAA0B;YAC1B,MAAM,uBAAuB,GAAW,WAAW,CAAC,uBAAuB,CAAC;YAE5E,wFAAwF;YACxF,iBAAiB,CAAC,YAAa,CAAC,WAAW,CAAC,eAAe,CAAC;kBACxD,UAAU,6BAAa,CAAC,0BAA0B,IAAI,WAAW,CAAC,uBAAuB,MAAM,CAAC;YAEpG,MAAM,eAAe,GAAyB;gBAC5C,IAAI,EAAE,WAAW,CAAC,eAAe;gBACjC,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,IAAI;gBACb,YAAY,EAAE,EAAE;aACjB,CAAC;YAEF,kEAAkE;YAClE,EAAE,CAAC,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACrC,eAAe,CAAC,oBAAoB,GAAG,WAAW,CAAC,oBAAoB,CAAC;YAC1E,CAAC;YAED,0FAA0F;YAC1F,MAAM,KAAK,GAAsD,EAAE,CAAC;YAEpE,uEAAuE;YACvE,sEAAsE;YACtE,8DAA8D;YAC9D,qEAAqE;YACrE,yEAAyE;YACzE,yDAAyD;YACzD,EAAE,CAAC,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;gBAChC,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBACnE,KAAK,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE,WAAW,CAAC,eAAe,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBACrG,CAAC;YACH,CAAC;YAED,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC7B,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAChE,KAAK,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBAClG,CAAC;YACH,CAAC;YAED,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC;gBACzB,4EAA4E;gBAC5E,6FAA6F;gBAC7F,oFAAoF;gBACpF,qGAAqG;gBACrG,MAAM,YAAY,GAChB,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC7D,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBAEjB,oEAAoE;oBACpE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBAEhE,uDAAuD;wBACvD,MAAM,mBAAmB,GAAW,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC;wBACrE,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,mBAAmB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;4BAE/D,oCAAoC;4BACpC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC;gCACtC,eAAe,CAAC,gBAAgB,GAAG,EAAE,CAAC;4BACxC,CAAC;4BACD,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;4BACzE,QAAQ,CAAC;wBACX,CAAC;oBACH,CAAC;gBACH,CAAC;gBAED,yEAAyE;gBACzE,eAAe,CAAC,YAAa,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;gBAEtE,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACnB,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,EAC/E,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;wBAC/B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CACvB,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,uCAAuC,IAAI,CAAC,WAAW,GAAG;8BACpE,KAAK,IAAI,CAAC,cAAc,kBAAkB,WAAW,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC/E,iBAAiB,GAAG,KAAK,CAAC;oBAC5B,CAAC;gBACH,CAAC;YACH,CAAC;YAED,2EAA2E;YAC3E,MAAM,gBAAgB,GAAW,SAAS,CAAC;YAE3C,6DAA6D;YAC7D,MAAM,iBAAiB,GAAW,IAAI,CAAC,IAAI,CACzC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EACxC,6BAAa,CAAC,0BAA0B,EACxC,uBAAuB,GAAG,MAAM,CAAC,CAAC;YAEpC,sEAAsE;YACtE,MAAM,uBAAuB,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,6BAAa,CAAC,mBAAmB,CAAC,CAAC;YAExG,6DAA6D;YAC7D,MAAM,eAAe,GAAW,iBAAiB,GAAG,MAAM,CAAC;YAE3D,iHAAiH;YACjH,IAAI,eAAe,GAAY,IAAI,CAAC;YACpC,IAAI,CAAC;gBACH,4DAA4D;gBAC5D,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAEhC,wDAAwD;oBACxD,mBAAS,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;oBAEjD,GAAG,CAAC,OAAO,CAAC;wBACV,GAAG,EAAE,eAAe;wBACpB,IAAI,EAAE,WAAW;wBACjB,IAAI,EAAE,IAAI;qBACX,CAAC,CAAC;oBAEH,MAAM,4BAA4B,GAChC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,gBAAgB,EAAE,6BAAa,CAAC,mBAAmB,CAAC,CAAC;oBAElF,wEAAwE;oBACxE,MAAM,SAAS,GAAW,GAAG,CAAC,YAAY,CAAC,4BAA4B,CAAC,CAAC;oBACzE,MAAM,SAAS,GAAW,IAAI,MAAM,CAAC,4BAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;oBAE1E,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC/C,eAAe,GAAG,KAAK,CAAC;oBAC1B,CAAC;gBACH,CAAC;YACH,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,8DAA8D;YAChE,CAAC;YAED,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACpB,+CAA+C;gBAC/C,mBAAS,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;gBAEnD,mEAAmE;gBACnE,4BAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,uBAAuB,CAAC,CAAC;gBAExD,2DAA2D;gBAC3D,GAAG,CAAC,MAAM,CAAC;oBACT,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,WAAW;oBACjB,GAAG,EAAE,iBAAiB;oBACtB,QAAQ,EAAE,IAAI;oBACd,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,gBAAgB;iBACzB,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;gBAErB,OAAO,CAAC,GAAG,CAAC,YAAY,WAAW,EAAE,CAAC,CAAC;YACzC,CAAC;YAED,6CAA6C;YAC7C,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;YAClC,GAAG,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QAClC,CAAC;QAED,gDAAgD;QAChD,MAAM,yBAAyB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAC1F,6BAAa,CAAC,mBAAmB,CAAC,CAAC;QAErC,uFAAuF;QACvF,+BAA+B;QAC/B,4BAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;QAErF,SAAS,CAAC,IAAI,EAAE,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,wCAAwC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAE7E,MAAM,CAAC,iBAAiB,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACI,oBAAoB,CAAC,WAAwB;QAClD,mEAAmE;QACnE,MAAM,eAAe,GAAW,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC;QACxE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACrC,sFAAsF;YACtF,uCAAuC;YACvC,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,eAAe,GAAG,GAAG,CAAC,CAAC;QAChF,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;cACpG,EAAE,CAAC,GAAG,CAAC,CAAC;QAEZ,MAAM,uBAAuB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EACxF,cAAc,CAAC,CAAC;QAElB,iFAAiF;QACjF,MAAM,wBAAwB,GAAY,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAE/F,wFAAwF;QACxF,4FAA4F;QAC5F,WAAW;QACX,MAAM,mBAAmB,GAAY,WAAW,KAAK,WAAW,CAAC,MAAM,IAAI,CAAC,wBAAwB,CAAC;QAErG,0DAA0D;QAC1D,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,MAAM,uBAAuB,GAAa,EAAE,CAAC;YAE7C,iFAAiF;YACjF,0DAA0D;YAC1D,uBAAuB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAEtD,6EAA6E;YAC7E,kCAAkC;YAClC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,2BAA2B,CAAC,CAAC;YAElF,kGAAkG;YAClG,qEAAqE;YACrE,6DAA6D;YAC7D,uBAAuB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACpE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,CAAC;YAEJ,4FAA4F;YAC5F,sDAAsD;YACtD,EAAE,CAAC,CAAC,mBAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,+BAA+B,EAAE,uBAAuB,CAAC,CAAC,CAAC,CAAC;gBACpG,2EAA2E;gBAC3E,MAAM,CAAC;YACT,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YAC7C,0DAA0D;YAC1D,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YAEvE,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YAC7C,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACvE,CAAC;QAED,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC7B,qFAAqF;YACrF,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QACvD,CAAC;QAED,iGAAiG;QACjG,6DAA6D;QAC7D,mBAAS,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;QAEnE,0DAA0D;QAC1D,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;YAC5C,qDAAqD;YACrD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACxB,6BAA6B;gBAE7B,kEAAkE;gBAClE,EAAE,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;oBACvC,OAAO,CAAC,GAAG,CAAC,sEAAsE;wBAChF,iCAAiC,CAAC,CAAC;gBACvC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,uBAAuB,CAAC,CAAC;gBACpE,CAAC;gBAED,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;gBAExD,wFAAwF;gBACxF,wFAAwF;gBACxF,mBAAS,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;YAC3D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,6DAA6D;gBAE7D,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,CAAC;gBAClF,MAAM,OAAO,GAAa,CAAC,OAAO,CAAC,CAAC;gBACpC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;gBACvC,mBAAS,CAAC,uBAAuB,CAAC,eAAe,EAAE,OAAO,EAAE,oBAAoB,EAC9E,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;gBAE5C,kFAAkF;gBAClF,2CAA2C;gBAC3C,kFAAkF;gBAElF,2DAA2D;gBAC3D,MAAM,uBAAuB,GAAW,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,6BAAa,CAAC,gBAAgB,CAAC,CAAC;gBAC3G,OAAO,CAAC,GAAG,CAAC,YAAY,uBAAuB,KAAK,CAAC,CAAC;gBACtD,kCAAkC;gBAClC,MAAM,iCAAiC,GACnC,mBAAS,CAAC,cAAc,CAAC,uBAAuB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;gBAEjE,6DAA6D;gBAC7D,GAAG,CAAC,CAAC,MAAM,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,iCAAiC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC7F,kFAAkF;oBAClF,mBAAmB;oBACnB,mBAAS,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;gBAClD,CAAC;YACH,CAAC;QACH,CAAC;QAED,mFAAmF;QACnF,yCAAyC;QACzC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;QAEhC,yCAAyC;QAEzC,wGAAwG;QACxG,uGAAuG;QACvG,0GAA0G;QAC1G,oEAAoE;QACpE,2GAA2G;QAC3G,mGAAmG;QACnG,EAAE;QACF,+GAA+G;QAC/G,8GAA8G;QAC9G,uCAAuC;QACvC,EAAE;QACF,+GAA+G;QAC/G,+GAA+G;QAC/G,wEAAwE;QAExE,MAAM,cAAc,GAAa,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QAC9D,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;QAE9C,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,4BAA4B,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;cACpG,EAAE,CAAC,GAAG,CAAC,CAAC;QACZ,mBAAS,CAAC,uBAAuB,CAAC,eAAe,EAC/C,cAAc,EACd,oBAAoB,EACpB,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QAE5C,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE5B,mEAAmE;QACnE,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QACzD,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC;IAED;;;OAGG;IACI,wBAAwB,CAAC,OAAiB;QAC/C,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAChE,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAC9D,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,UAAkB,EAAE,UAAkB;QACpD,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,CAAC;YACtC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QACvC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,CAAC;gBACtC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,mBAAmB,CAAC,OAAiC;QAC3D,MAAM,CAAC,IAAI,CAAC,IAAI,CACd,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EACxC,6BAAa,CAAC,0BAA0B,EACxC,GAAG,OAAO,CAAC,uBAAuB,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;;;;;;;;;OAaG;IACK,oBAAoB;QAC1B,MAAM,uBAAuB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EACxF,cAAc,EAAE,6BAAa,CAAC,gBAAgB,CAAC,CAAC;QAClD,kCAAkC;QAClC,MAAM,iCAAiC,GACnC,mBAAS,CAAC,cAAc,CAAC,uBAAuB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;QAEjE,IAAI,UAAU,GAAY,KAAK,CAAC;QAEhC,0EAA0E;QAC1E,GAAG,CAAC,CAAC,MAAM,eAAe,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,iCAAiC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC3G,gFAAgF;YAChF,MAAM,iBAAiB,GAAyB,4BAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAE/E,wDAAwD;YACxD,iBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;YAEpC,EAAE,CAAC,CAAC,4BAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,eAAe,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/E,UAAU,GAAG,IAAI,CAAC;YACpB,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QACzF,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,yBAAyB,CAAC,cAA8B;QAE9D,oFAAoF;QACpF,GAAG,CAAC,CAAC,MAAM,eAAe,IAAI,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YACnE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACpE,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CACrC,kDAAkD,eAAe,2BAA2B,CAAC,CAAC;sBAC5F,EAAE,CAAC,GAAG,CAAC,CAAC;gBACZ,MAAM,CAAC,IAAI,CAAC,CAAE,YAAY;YAC5B,CAAC;QACH,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,CAAE,aAAa;IAC9B,CAAC;CACF;AA1pBD,iCA0pBC","file":"cli/utilities/InstallManager.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as glob from 'glob';\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport * as semver from 'semver';\r\nimport * as tar from 'tar';\r\nimport * as wordwrap from 'wordwrap';\r\nimport globEscape = require('glob-escape');\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport AsyncRecycler from '../../utilities/AsyncRecycler';\r\nimport RushConfiguration from '../../data/RushConfiguration';\r\nimport RushConfigurationProject from '../../data/RushConfigurationProject';\r\nimport { RushConstants } from '../../RushConstants';\r\nimport Utilities from '../../utilities/Utilities';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport IPackageJson from '../../utilities/IPackageJson';\r\nimport { IRushTempPackageJson } from '../utilities/Package';\r\nimport ShrinkwrapFile from '../utilities/ShrinkwrapFile';\r\n\r\nconst MAX_INSTALL_ATTEMPTS: number = 5;\r\n\r\nconst wrap: (textToWrap: string) => string = wordwrap.soft(Utilities.getConsoleWidth());\r\n\r\n/**\r\n * Controls the behavior of InstallManager.installCommonModules()\r\n */\r\nexport enum InstallType {\r\n  /**\r\n   * The default behavior: (1) If the timestamps are up to date, don't do anything.\r\n   * (2) Otherwise, if the common folder is in a good state, do an incremental install.\r\n   * (3) Otherwise, delete everything, clear the cache, and do a clean install.\r\n   */\r\n  Normal,\r\n  /**\r\n   * Force a clean install, i.e. delete \"common\\node_modules\", clear the cache,\r\n   * and then install.\r\n   */\r\n  ForceClean,\r\n  /**\r\n   * Same as ForceClean, but also clears the global NPM cache (which is not threadsafe).\r\n   */\r\n  UnsafePurge\r\n}\r\n\r\n/**\r\n * This class implements common logic between \"rush install\" and \"rush generate\".\r\n */\r\nexport default class InstallManager {\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _commonNodeModulesMarkerFilename: string;\r\n  private _asyncRecycler: AsyncRecycler;\r\n\r\n  /**\r\n   * Returns a map of all direct dependencies that only have a single semantic version specifier\r\n   */\r\n  public static collectImplicitlyPinnedVersions(rushConfiguration: RushConfiguration): Map<string, string> {\r\n    const directDependencies: Map<string, Set<string>> = new Map<string, Set<string>>();\r\n\r\n    rushConfiguration.projects.forEach((project: RushConfigurationProject) => {\r\n      InstallManager._addDependenciesToMap(rushConfiguration, directDependencies,\r\n        project.cyclicDependencyProjects, project.packageJson.dependencies);\r\n      InstallManager._addDependenciesToMap(rushConfiguration, directDependencies,\r\n        project.cyclicDependencyProjects, project.packageJson.devDependencies);\r\n    });\r\n\r\n    const implicitlyPinned: Map<string, string> = new Map<string, string>();\r\n    directDependencies.forEach((versions: Set<string>, dep: string) => {\r\n      if (versions.size === 1) {\r\n        const version: string = versions.values().next().value;\r\n        implicitlyPinned.set(dep, version);\r\n      }\r\n    });\r\n    return implicitlyPinned;\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public static _keys<T>(data: Map<T, any>): Array<T> {\r\n    const keys: Array<T> = new Array<T>();\r\n\r\n    const iterator: Iterator<T> = data.keys();\r\n    let current: IteratorResult<T> = iterator.next();\r\n    while (!current.done) {\r\n      keys.push(current.value);\r\n      current = iterator.next();\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  private static _addDependencyToMap(directDependencies: Map<string, Set<string>>,\r\n    dependency: string, version: string): void {\r\n    if (!directDependencies.has(dependency)) {\r\n      directDependencies.set(dependency, new Set<string>());\r\n    }\r\n    directDependencies.get(dependency)!.add(version);\r\n  }\r\n\r\n  private static _addDependenciesToMap(\r\n    rushConfiguration: RushConfiguration,\r\n    directDependencies: Map<string, Set<string>>,\r\n    cyclicDeps: Set<string>, deps: { [dep: string]: string } | undefined): void {\r\n\r\n    if (deps) {\r\n      Object.keys(deps).forEach((dependency: string) => {\r\n        const version: string = deps[dependency];\r\n\r\n        // If the dependency is not a local project OR\r\n        //    the dependency is a cyclic dependency OR\r\n        //    we depend on a different version than the one locally\r\n        if (!rushConfiguration.getProjectByName(dependency) || cyclicDeps.has(dependency) ||\r\n          !semver.satisfies(rushConfiguration.getProjectByName(dependency)!.packageJson.version, version)) {\r\n          InstallManager._addDependencyToMap(directDependencies, dependency, version);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n\r\n    // Example: \"C:\\MyRepo\\common\\last-install.flag\"\r\n    this._commonNodeModulesMarkerFilename = path.join(\r\n      this._rushConfiguration.commonTempFolder, 'last-install.flag');\r\n\r\n    this._asyncRecycler = new AsyncRecycler(this._rushConfiguration);\r\n  }\r\n\r\n  /**\r\n   * Returns the filename of the flag file used to detect invalid installations.\r\n   * The file itself may not actually exist.  If the file exists, it means an \"npm install\"\r\n   * was successfully completed for the \"common/node_modules\" folder.\r\n   * Example: \"C:\\MyRepo\\common\\last-install.flag\"\r\n   */\r\n  public get commonNodeModulesMarkerFilename(): string {\r\n    return this._commonNodeModulesMarkerFilename;\r\n  }\r\n\r\n  /**\r\n   * If the \"npm-local\" symlink hasn't been set up yet, this creates it, installing the\r\n   * specified NPM version in the user's home directory if needed.\r\n   */\r\n  public ensureLocalNpmTool(forceReinstall: boolean): void {\r\n    // Example: \"C:\\Users\\YourName\\.rush\"\r\n    const rushHomeFolder: string = path.join(this._rushConfiguration.homeFolder, '.rush');\r\n\r\n    if (!fsx.existsSync(rushHomeFolder)) {\r\n      console.log('Creating ' + rushHomeFolder);\r\n      fsx.mkdirSync(rushHomeFolder);\r\n    }\r\n\r\n    // Example: \"C:\\Users\\YourName\\.rush\\npm-1.2.3\"\r\n    const npmToolFolder: string = path.join(rushHomeFolder, 'npm-' + this._rushConfiguration.npmToolVersion);\r\n    // Example: \"C:\\Users\\YourName\\.rush\\npm-1.2.3\\last-install.flag\"\r\n    const npmToolFlagFile: string = path.join(npmToolFolder, 'last-install.flag');\r\n\r\n    // NOTE: We don't care about the timestamp for last-install.flag, because nobody will change\r\n    // the package.json for this case\r\n    if (forceReinstall || !fsx.existsSync(npmToolFlagFile)) {\r\n      console.log(colors.bold('Installing NPM version ' + this._rushConfiguration.npmToolVersion) + os.EOL);\r\n\r\n      Utilities.installPackageInDirectory(\r\n        npmToolFolder,\r\n        'npm',\r\n        this._rushConfiguration.npmToolVersion,\r\n        'npm-local-install',\r\n        MAX_INSTALL_ATTEMPTS\r\n      );\r\n\r\n      // Create the marker file to indicate a successful install\r\n      fsx.writeFileSync(npmToolFlagFile, '');\r\n      console.log('Successfully installed NPM ' + this._rushConfiguration.npmToolVersion);\r\n    } else {\r\n      console.log('Found NPM version ' + this._rushConfiguration.npmToolVersion + ' in ' + npmToolFolder);\r\n    }\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\"\r\n    if (!fsx.existsSync(this._rushConfiguration.commonTempFolder)) {\r\n      fsx.mkdirsSync(this._rushConfiguration.commonTempFolder);\r\n    }\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\"\r\n    const localNpmToolFolder: string = path.join(this._rushConfiguration.commonTempFolder, 'npm-local');\r\n    if (fsx.existsSync(localNpmToolFolder)) {\r\n      fsx.unlinkSync(localNpmToolFolder);\r\n    }\r\n    console.log(os.EOL + 'Symlinking \"' + localNpmToolFolder + '\"');\r\n    console.log('  --> \"' + npmToolFolder + '\"');\r\n    fsx.symlinkSync(npmToolFolder, localNpmToolFolder, 'junction');\r\n  }\r\n\r\n  /**\r\n   * Regenerates the common/package.json and all temp_modules projects.\r\n   */\r\n  public createTempModules(): void {\r\n    this.createTempModulesAndCheckShrinkwrap(undefined);\r\n  }\r\n\r\n  /**\r\n   * Regenerates the common/package.json and all temp_modules projects.\r\n   * If shrinkwrapFile is provided, this function also validates whether it contains\r\n   * everything we need to install and returns true if so; in all other cases,\r\n   * the return value is false.\r\n   */\r\n  public createTempModulesAndCheckShrinkwrap(shrinkwrapFile: ShrinkwrapFile | undefined): boolean {\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\"\r\n    const tempProjectsFolder: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      RushConstants.rushTempProjectsFolderName);\r\n\r\n    console.log(os.EOL + colors.bold('Updating temp projects in ' + tempProjectsFolder));\r\n\r\n    Utilities.createFolderWithRetry(tempProjectsFolder);\r\n\r\n    // We will start with the assumption that it's valid, and then set it to false if\r\n    // any of the checks fail\r\n    let shrinkwrapIsValid: boolean = true;\r\n\r\n    if (!shrinkwrapFile) {\r\n      shrinkwrapIsValid = false;\r\n    }\r\n\r\n    // Find the implicitly pinnedVersions\r\n    // These are any first-level dependencies for which we only consume a single version range\r\n    // (e.g. every package that depends on react uses an identical specifier)\r\n    const implicitlyPinned: Map<string, string> =\r\n      InstallManager.collectImplicitlyPinnedVersions(this._rushConfiguration);\r\n    const pinnedVersions: Map<string, string> = new Map<string, string>();\r\n\r\n    implicitlyPinned.forEach((version: string, dependency: string) => {\r\n      pinnedVersions.set(dependency, version);\r\n    });\r\n\r\n    this._rushConfiguration.pinnedVersions.forEach((version: string, dependency: string) => {\r\n      pinnedVersions.set(dependency, version);\r\n    });\r\n\r\n    if (shrinkwrapFile) {\r\n      // Check any pinned dependencies first\r\n      pinnedVersions.forEach((version: string, dependency: string) => {\r\n        if (!shrinkwrapFile.hasCompatibleDependency(dependency, version)) {\r\n          console.log(colors.yellow(wrap(\r\n            `${os.EOL}The NPM shrinkwrap file does not provide \"${dependency}\"`\r\n            + ` (${version}) required by pinned versions`)));\r\n          shrinkwrapIsValid = false;\r\n        }\r\n      });\r\n\r\n      if (this._findOrphanedTempProjects(shrinkwrapFile)) {\r\n        // If there are any orphaned projects, then \"npm install\" would fail because the shrinkwrap\r\n        // contains references such as \"resolved\": \"file:projects\\\\project1\" that refer to nonexistent\r\n        // file paths.\r\n        shrinkwrapIsValid = false;\r\n      }\r\n    }\r\n\r\n    // Either way, resync the temporary shrinkwrap file.\r\n    // Copy (or delete) common\\npm-shrinkwrap.json --> common\\temp\\npm-shrinkwrap.json\r\n    this.syncFile(this._rushConfiguration.committedShrinkwrapFilename,\r\n      this._rushConfiguration.tempShrinkwrapFilename);\r\n\r\n    // Also copy down the committed .npmrc file, if there is one\r\n    // \"common\\.npmrc\" --> \"common\\temp\\.npmrc\"\r\n    const committedNpmrcPath: string = path.join(this._rushConfiguration.commonRushConfigFolder, '.npmrc');\r\n    const tempNpmrcPath: string = path.join(this._rushConfiguration.commonTempFolder, '.npmrc');\r\n    this.syncFile(committedNpmrcPath, tempNpmrcPath);\r\n\r\n    const commonPackageJson: IPackageJson = {\r\n      dependencies: {},\r\n      description: 'Temporary file generated by the Rush tool',\r\n      name: 'rush-common',\r\n      private: true,\r\n      version: '0.0.0'\r\n    };\r\n\r\n    // Add any pinned versions to the top of the commonPackageJson\r\n    // do this in alphabetical order for simpler debugging\r\n    InstallManager._keys(pinnedVersions).sort().forEach((dependency: string) => {\r\n      commonPackageJson.dependencies![dependency] = pinnedVersions.get(dependency)!;\r\n    });\r\n\r\n    // To make the common/package.json file more readable, sort alphabetically\r\n    // according to rushProject.tempProjectName instead of packageName.\r\n    const sortedRushProjects: RushConfigurationProject[] = this._rushConfiguration.projects.slice(0);\r\n    sortedRushProjects.sort(\r\n      (a: RushConfigurationProject, b: RushConfigurationProject) => a.tempProjectName.localeCompare(b.tempProjectName)\r\n    );\r\n\r\n    for (const rushProject of sortedRushProjects) {\r\n      const packageJson: IPackageJson = rushProject.packageJson;\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n      const tarballFile: string = this._getTarballFilePath(rushProject);\r\n\r\n      // Example: \"my-project-2\"\r\n      const unscopedTempProjectName: string = rushProject.unscopedTempProjectName;\r\n\r\n      // Example: dependencies[\"@rush-temp/my-project-2\"] = \"file:./projects/my-project-2.tgz\"\r\n      commonPackageJson.dependencies![rushProject.tempProjectName]\r\n        = `file:./${RushConstants.rushTempProjectsFolderName}/${rushProject.unscopedTempProjectName}.tgz`;\r\n\r\n      const tempPackageJson: IRushTempPackageJson = {\r\n        name: rushProject.tempProjectName,\r\n        version: '0.0.0',\r\n        private: true,\r\n        dependencies: {}\r\n      };\r\n\r\n      // If there are any optional dependencies, copy them over directly\r\n      if (packageJson.optionalDependencies) {\r\n        tempPackageJson.optionalDependencies = packageJson.optionalDependencies;\r\n      }\r\n\r\n      // Collect pairs of (packageName, packageVersion) to be added as temp package dependencies\r\n      const pairs: { packageName: string, packageVersion: string }[] = [];\r\n\r\n      // If there are devDependencies, we need to merge them with the regular\r\n      // dependencies.  If the same library appears in both places, then the\r\n      // regular dependency takes precedence over the devDependency.\r\n      // It also takes precedence over a duplicate in optionalDependencies,\r\n      // but NPM will take care of that for us.  (Frankly any kind of duplicate\r\n      // should be an error, but NPM is pretty lax about this.)\r\n      if (packageJson.devDependencies) {\r\n        for (const packageName of Object.keys(packageJson.devDependencies)) {\r\n          pairs.push({ packageName: packageName, packageVersion: packageJson.devDependencies[packageName] });\r\n        }\r\n      }\r\n\r\n      if (packageJson.dependencies) {\r\n        for (const packageName of Object.keys(packageJson.dependencies)) {\r\n          pairs.push({ packageName: packageName, packageVersion: packageJson.dependencies[packageName] });\r\n        }\r\n      }\r\n\r\n      for (const pair of pairs) {\r\n        // Is there a locally built Rush project that could satisfy this dependency?\r\n        // If so, then we will symlink to the project folder rather than to common/temp/node_modules.\r\n        // In this case, we don't want \"npm install\" to process this package, but we do need\r\n        // to record this decision for \"rush link\" later, so we add it to a special 'rushDependencies' field.\r\n        const localProject: RushConfigurationProject | undefined =\r\n          this._rushConfiguration.getProjectByName(pair.packageName);\r\n        if (localProject) {\r\n\r\n          // Don't locally link if it's listed in the cyclicDependencyProjects\r\n          if (!rushProject.cyclicDependencyProjects.has(pair.packageName)) {\r\n\r\n            // Also, don't locally link if the SemVer doesn't match\r\n            const localProjectVersion: string = localProject.packageJson.version;\r\n            if (semver.satisfies(localProjectVersion, pair.packageVersion)) {\r\n\r\n              // We will locally link this package\r\n              if (!tempPackageJson.rushDependencies) {\r\n                tempPackageJson.rushDependencies = {};\r\n              }\r\n              tempPackageJson.rushDependencies[pair.packageName] = pair.packageVersion;\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n\r\n        // We will NOT locally link this package; add it as a regular dependency.\r\n        tempPackageJson.dependencies![pair.packageName] = pair.packageVersion;\r\n\r\n        if (shrinkwrapFile) {\r\n          if (!shrinkwrapFile.hasCompatibleDependency(pair.packageName, pair.packageVersion,\r\n            rushProject.tempProjectName)) {\r\n            console.log(colors.yellow(\r\n              wrap(`${os.EOL}The NPM shrinkwrap file is missing \"${pair.packageName}\"`\r\n                + ` (${pair.packageVersion}) required by \"${rushProject.packageName}\".`)));\r\n            shrinkwrapIsValid = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // NPM expects the root of the tarball to have a directory called 'package'\r\n      const npmPackageFolder: string = 'package';\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.new\"\r\n      const tempProjectFolder: string = path.join(\r\n        this._rushConfiguration.commonTempFolder,\r\n        RushConstants.rushTempProjectsFolderName,\r\n        unscopedTempProjectName + '.new');\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2\\package.json\"\r\n      const tempPackageJsonFilename: string = path.join(tempProjectFolder, RushConstants.packageJsonFilename);\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.old\"\r\n      const extractedFolder: string = tempProjectFolder + '.old';\r\n\r\n      // we only want to overwrite the package if the existing tarball's package.json is different from tempPackageJson\r\n      let shouldOverwrite: boolean = true;\r\n      try {\r\n        // extract the tarball and compare the package.json directly\r\n        if (fsx.existsSync(tarballFile)) {\r\n\r\n          // ensure the folder we are about to extract into exists\r\n          Utilities.createFolderWithRetry(extractedFolder);\r\n\r\n          tar.extract({\r\n            cwd: extractedFolder,\r\n            file: tarballFile,\r\n            sync: true\r\n          });\r\n\r\n          const extractedPackageJsonFilename: string =\r\n            path.join(extractedFolder, npmPackageFolder, RushConstants.packageJsonFilename);\r\n\r\n          // compare the extracted package.json with the one we are about to write\r\n          const oldBuffer: Buffer = fsx.readFileSync(extractedPackageJsonFilename);\r\n          const newBuffer: Buffer = new Buffer(JsonFile.stringify(tempPackageJson));\r\n\r\n          if (Buffer.compare(oldBuffer, newBuffer) === 0) {\r\n            shouldOverwrite = false;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // ignore the error, we will go ahead and create a new tarball\r\n      }\r\n\r\n      if (shouldOverwrite) {\r\n        // ensure the folder we are about to zip exists\r\n        Utilities.createFolderWithRetry(tempProjectFolder);\r\n\r\n        // write the expected package.json file into the zip staging folder\r\n        JsonFile.save(tempPackageJson, tempPackageJsonFilename);\r\n\r\n        // create the new tarball, this overwrites the existing one\r\n        tar.create({\r\n          gzip: true,\r\n          file: tarballFile,\r\n          cwd: tempProjectFolder,\r\n          portable: true,\r\n          noPax: true,\r\n          sync: true,\r\n          prefix: npmPackageFolder\r\n        }, ['package.json']);\r\n\r\n        console.log(`Updating ${tarballFile}`);\r\n      }\r\n\r\n      // clean up the old tarball & the temp folder\r\n      fsx.removeSync(tempProjectFolder);\r\n      fsx.removeSync(extractedFolder);\r\n    }\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\package.json\"\r\n    const commonPackageJsonFilename: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      RushConstants.packageJsonFilename);\r\n\r\n    // Don't update the file timestamp unless the content has changed, since \"rush install\"\r\n    // will consider this timestamp\r\n    JsonFile.save(commonPackageJson, commonPackageJsonFilename, { onlyIfChanged: true });\r\n\r\n    stopwatch.stop();\r\n    console.log(`Finished creating temporary modules (${stopwatch.toString()})`);\r\n\r\n    return shrinkwrapIsValid;\r\n  }\r\n\r\n  /**\r\n   * Runs \"npm install\" in the common folder, in one of three ways:\r\n   * 1. No action because it is already up to date\r\n   * 2. Incremental action (\"npm prune\", \"npm install\", etc).\r\n   * 3. Full clean and \"npm install\"\r\n   */\r\n  public installCommonModules(installType: InstallType): void {\r\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\r\n    const npmToolFilename: string = this._rushConfiguration.npmToolFilename;\r\n    if (!fsx.existsSync(npmToolFilename)) {\r\n      // This normally should never occur -- it indicates that some code path forgot to call\r\n      // InstallManager.ensureLocalNpmTool().\r\n      throw new Error('Expected to find local NPM here: \"' + npmToolFilename + '\"');\r\n    }\r\n\r\n    console.log(os.EOL + colors.bold('Checking node_modules in ' + this._rushConfiguration.commonTempFolder)\r\n      + os.EOL);\r\n\r\n    const commonNodeModulesFolder: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      'node_modules');\r\n\r\n    // This marker file indicates that the last \"rush install\" completed successfully\r\n    const markerFileExistedAtStart: boolean = fsx.existsSync(this.commonNodeModulesMarkerFilename);\r\n\r\n    // If \"--clean\" or \"--full-clean\" was specified, or if the last install was interrupted,\r\n    // then we will need to delete the node_modules folder.  Otherwise, we can do an incremental\r\n    // install.\r\n    const deletingNodeModules: boolean = installType !== InstallType.Normal || !markerFileExistedAtStart;\r\n\r\n    // Based on timestamps, can we skip this install entirely?\r\n    if (!deletingNodeModules) {\r\n      const potentiallyChangedFiles: string[] = [];\r\n\r\n      // Consider the timestamp on the node_modules folder; if someone tampered with it\r\n      // or deleted it entirely, then we can't skip this install\r\n      potentiallyChangedFiles.push(commonNodeModulesFolder);\r\n\r\n      // Additionally, if they pulled an updated npm-shrinkwrap.json file from Git,\r\n      // then we can't skip this install\r\n      potentiallyChangedFiles.push(this._rushConfiguration.committedShrinkwrapFilename);\r\n\r\n      // Also consider timestamps for all the temp tarballs. (createTempModulesAndCheckShrinkwrap() will\r\n      // carefully preserve these timestamps unless something has changed.)\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n      potentiallyChangedFiles.push(...this._rushConfiguration.projects.map(x => {\r\n        return this._getTarballFilePath(x);\r\n      }));\r\n\r\n      // NOTE: If commonNodeModulesMarkerFilename (or any of the potentiallyChangedFiles) does not\r\n      // exist, then isFileTimestampCurrent() returns false.\r\n      if (Utilities.isFileTimestampCurrent(this.commonNodeModulesMarkerFilename, potentiallyChangedFiles)) {\r\n        // Nothing to do, because everything is up to date according to time stamps\r\n        return;\r\n      }\r\n    } else {\r\n      console.log(`Deleting the NPM cache folder`);\r\n      // This is faster and more thorough than \"npm cache clean\"\r\n      this._asyncRecycler.moveFolder(this._rushConfiguration.npmCacheFolder);\r\n\r\n      console.log(`Deleting the \"npm-tmp\" folder`);\r\n      this._asyncRecycler.moveFolder(this._rushConfiguration.npmTmpFolder);\r\n    }\r\n\r\n    if (markerFileExistedAtStart) {\r\n      // Delete the successful install file to indicate the install transaction has started\r\n      fsx.unlinkSync(this.commonNodeModulesMarkerFilename);\r\n    }\r\n\r\n    // Since we're tampering with common/node_modules, delete the \"rush link\" flag file if it exists;\r\n    // this ensures that a full \"rush link\" is required next time\r\n    Utilities.deleteFile(this._rushConfiguration.rushLinkJsonFilename);\r\n\r\n    // Is there an existing \"node_modules\" folder to consider?\r\n    if (fsx.existsSync(commonNodeModulesFolder)) {\r\n      // Should we delete the entire \"node_modules\" folder?\r\n      if (deletingNodeModules) {\r\n        // YES: Delete \"node_modules\"\r\n\r\n        // Explain to the user why we are hosing their node_modules folder\r\n        if (installType === InstallType.Normal) {\r\n          console.log('Deleting the \"node_modules\" folder because the previous Rush install' +\r\n            ' did not complete successfully.');\r\n        } else {\r\n          console.log('Deleting old files from ' + commonNodeModulesFolder);\r\n        }\r\n\r\n        this._asyncRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n        // Since it may be a while before NPM gets around to creating the \"node_modules\" folder,\r\n        // create an empty folder so that the above warning will be shown if we get interrupted.\r\n        Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n      } else {\r\n        // NO: Do an incremental install in the \"node_modules\" folder\r\n\r\n        console.log(`Running \"npm prune\" in ${this._rushConfiguration.commonTempFolder}`);\r\n        const npmArgs: string[] = ['prune'];\r\n        this.pushConfigurationNpmArgs(npmArgs);\r\n        Utilities.executeCommandWithRetry(npmToolFilename, npmArgs, MAX_INSTALL_ATTEMPTS,\r\n          this._rushConfiguration.commonTempFolder);\r\n\r\n        // Delete the (installed image of) the temp projects, since \"npm install\" does not\r\n        // detect changes for \"file:./\" references.\r\n        // We recognize the temp projects by their names, which always start with \"rush-\".\r\n\r\n        // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\"\r\n        const pathToDeleteWithoutStar: string = path.join(commonNodeModulesFolder, RushConstants.rushTempNpmScope);\r\n        console.log(`Deleting ${pathToDeleteWithoutStar}\\\\*`);\r\n        // Glob can't handle Windows paths\r\n        const normalizedpathToDeleteWithoutStar: string\r\n          = Utilities.getAllReplaced(pathToDeleteWithoutStar, '\\\\', '/');\r\n\r\n        // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*\"\r\n        for (const tempModulePath of glob.sync(globEscape(normalizedpathToDeleteWithoutStar) + '/*')) {\r\n          // We could potentially use AsyncRecycler here, but in practice these folders tend\r\n          // to be very small\r\n          Utilities.dangerouslyDeletePath(tempModulePath);\r\n        }\r\n      }\r\n    }\r\n\r\n    // If any folders were moved into the AsyncRecycler, get that going before we start\r\n    // the expensive \"npm install\" operation.\r\n    this._asyncRecycler.deleteAll();\r\n\r\n    // Run \"npm install\" in the common folder\r\n\r\n    // NOTE: we do NOT install optional dependencies for Rush, as it seems that optional dependencies do not\r\n    //       work properly with shrinkwrap. Consider the \"fsevents\" package. This is a Mac specific package\r\n    //       which is an optional second-order dependency. Optional dependencies work by attempting to install\r\n    //       the package, but removes the package if the install failed.\r\n    //       This means that someone running generate on a Mac WILL have fsevents included in their shrinkwrap.\r\n    //       When someone using Windows attempts to install from the shrinkwrap, the install will fail.\r\n    //\r\n    //       If someone generates the shrinkwrap using Windows, then fsevents will NOT be listed in the shrinkwrap.\r\n    //       When someone using Mac attempts to install from the shrinkwrap, (as of NPM 4), they will NOT have the\r\n    //       optional dependency installed.\r\n    //\r\n    //       One possible solution would be to have the shrinkwrap include information about whether the dependency\r\n    //       is optional or not, but it does not appear to do so. Also, this would result in strange behavior where\r\n    //       people would have different node_modules based on their system.\r\n\r\n    const npmInstallArgs: string[] = ['install', '--no-optional'];\r\n    this.pushConfigurationNpmArgs(npmInstallArgs);\r\n\r\n    console.log(os.EOL + colors.bold(`Running \"npm install\" in ${this._rushConfiguration.commonTempFolder}`)\r\n      + os.EOL);\r\n    Utilities.executeCommandWithRetry(npmToolFilename,\r\n      npmInstallArgs,\r\n      MAX_INSTALL_ATTEMPTS,\r\n      this._rushConfiguration.commonTempFolder);\r\n\r\n    this._fixupNpm5Regression();\r\n\r\n    // Finally, create the marker file to indicate a successful install\r\n    fsx.createFileSync(this.commonNodeModulesMarkerFilename);\r\n    console.log('');\r\n  }\r\n\r\n  /**\r\n   * Used when invoking the NPM tool.  Appends the common configuration options\r\n   * to the command-line.\r\n   */\r\n  public pushConfigurationNpmArgs(npmArgs: string[]): void {\r\n    npmArgs.push('--cache', this._rushConfiguration.npmCacheFolder);\r\n    npmArgs.push('--tmp', this._rushConfiguration.npmTmpFolder);\r\n  }\r\n\r\n  /**\r\n   * Copies the file \"sourcePath\" to \"targetPath\", overwriting the target file location.\r\n   * If the source file does not exist, then the target file is deleted.\r\n   */\r\n  public syncFile(sourcePath: string, targetPath: string): void {\r\n    if (fsx.existsSync(sourcePath)) {\r\n      console.log('Updating ' + targetPath);\r\n      fsx.copySync(sourcePath, targetPath);\r\n    } else {\r\n      if (fsx.existsSync(targetPath)) {\r\n        console.log('Deleting ' + targetPath);\r\n        fsx.unlinkSync(targetPath);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the path to the tarball\r\n   * Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n   */\r\n  private _getTarballFilePath(project: RushConfigurationProject): string {\r\n    return path.join(\r\n      this._rushConfiguration.commonTempFolder,\r\n      RushConstants.rushTempProjectsFolderName,\r\n      `${project.unscopedTempProjectName}.tgz`);\r\n  }\r\n\r\n  /**\r\n   * This is a workaround for a bug introduced in NPM 5 (and still unfixed as of NPM 5.5.1):\r\n   * https://github.com/npm/npm/issues/19006\r\n   *\r\n   * The regression is that \"npm install\" sets the package.json \"version\" field for the\r\n   * @rush-temp projects to a value like \"file:projects/example.tgz\", when it should be \"0.0.0\".\r\n   * This causes \"rush link\" to fail later, when read-package-tree tries to parse the bad version.\r\n   * The error looks like this:\r\n   *\r\n   * ERROR: Failed to parse package.json for foo: Invalid version: \"file:projects/example.tgz\"\r\n   *\r\n   * Our workaround is to rewrite the package.json files for each of the @rush-temp projects\r\n   * in the node_modules folder, after \"npm install\" completes.\r\n   */\r\n  private _fixupNpm5Regression(): void {\r\n    const pathToDeleteWithoutStar: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      'node_modules', RushConstants.rushTempNpmScope);\r\n    // Glob can't handle Windows paths\r\n    const normalizedpathToDeleteWithoutStar: string\r\n      = Utilities.getAllReplaced(pathToDeleteWithoutStar, '\\\\', '/');\r\n\r\n    let anyChanges: boolean = false;\r\n\r\n    // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*/package.json\"\r\n    for (const packageJsonPath of glob.sync(globEscape(normalizedpathToDeleteWithoutStar) + '/*/package.json')) {\r\n      // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/example/package.json\"\r\n      const packageJsonObject: IRushTempPackageJson = JsonFile.load(packageJsonPath);\r\n\r\n      // The temp projects always use \"0.0.0\" as their version\r\n      packageJsonObject.version = '0.0.0';\r\n\r\n      if (JsonFile.save(packageJsonObject, packageJsonPath, { onlyIfChanged: true })) {\r\n        anyChanges = true;\r\n      }\r\n    }\r\n\r\n    if (anyChanges) {\r\n      console.log(os.EOL + colors.yellow(wrap(`Applied workaround for NPM 5 bug`)) + os.EOL);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks for temp projects that exist in the shrinkwrap file, but don't exist\r\n   * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.\r\n   *\r\n   * @returns true if orphans were found, or false if everything is okay\r\n   */\r\n  private _findOrphanedTempProjects(shrinkwrapFile: ShrinkwrapFile): boolean {\r\n\r\n    // We can recognize temp projects because they are under the \"@rush-temp\" NPM scope.\r\n    for (const tempProjectName of shrinkwrapFile.getTempProjectNames()) {\r\n      if (!this._rushConfiguration.findProjectByTempName(tempProjectName)) {\r\n        console.log(os.EOL + colors.yellow(wrap(\r\n          `Your NPM shrinkwrap file references a project \"${tempProjectName}\" which no longer exists.`))\r\n          + os.EOL);\r\n        return true;  // found one\r\n      }\r\n    }\r\n\r\n    return false;  // none found\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}