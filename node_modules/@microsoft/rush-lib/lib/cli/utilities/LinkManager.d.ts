import { default as RushConfiguration } from '../../data/RushConfiguration';
export default class LinkManager {
    private _rushConfiguration;
    private static _createSymlink(linkTarget, linkSource, symlinkKind);
    /**
     * This is a helper function used by createSymlinksForTopLevelProject().
     * It will recursively creates symlinked folders corresponding to each of the
     * Package objects in the provided tree.
     */
    private static _createSymlinksForDependencies(localPackage);
    /**
     * For a Package object that represents a top-level Rush project folder
     * (i.e. with source code that we will be building), this clears out its
     * node_modules folder and then recursively creates all the symlinked folders.
     */
    private static _createSymlinksForTopLevelProject(localPackage);
    constructor(rushConfiguration: RushConfiguration);
    /**
     * Creates node_modules symlinks for all Rush projects defined in the RushConfiguration.
     * @param force - Normally the operation will be skipped if the links are already up to date;
     *   if true, this option forces the links to be recreated.
     */
    createSymlinksForProjects(force: boolean): Promise<void>;
    /**
     * This is called once for each local project from Rush.json.
     * @param project             The local project that we will create symlinks for
     * @param commonRootPackage   The common/temp/package.json package
     * @param commonPackageLookup A dictionary for finding packages under common/temp/node_modules
     * @param rushConfiguration   The rush.json file contents
     * @param rushLinkJson        The common/temp/rush-link.json output file
     * @param options             Command line options for "rush link"
     */
    private _linkProject(project, commonRootPackage, commonPackageLookup, rushLinkJson);
}
