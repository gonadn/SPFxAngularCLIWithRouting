import { IChangeInfoHash } from './PublishUtilities';
import { IChangeInfo } from '../../data/ChangeManagement';
import { IChangelog } from '../../data/Changelog';
import RushConfigurationProject from '../../data/RushConfigurationProject';
export default class ChangelogGenerator {
    /**
     * Updates the appropriate changelogs with the given changes.
     */
    static updateChangelogs(allChanges: IChangeInfoHash, allProjects: Map<string, RushConfigurationProject>, shouldCommit: boolean): IChangelog[];
    /**
     * Fully regenerate the markdown files based on the current json files.
     */
    static regenerateChangelogs(allProjects: Map<string, RushConfigurationProject>): void;
    /**
     * Updates an individual changelog for a single project.
     */
    static updateIndividualChangelog(change: IChangeInfo, projectFolder: string, shouldCommit: boolean, forceUpdate?: boolean): IChangelog | undefined;
    /**
     * Loads the changelog json from disk, or creates a new one if there isn't one.
     */
    private static _getChangelog(packageName, projectFolder);
    /**
     * Translates the given changelog json object into a markdown string.
     */
    private static _translateToMarkdown(changelog);
    /**
     * Helper to return the comments string to be appends to the markdown content.
     */
    private static _getChangeComments(title, commentsArray);
}
