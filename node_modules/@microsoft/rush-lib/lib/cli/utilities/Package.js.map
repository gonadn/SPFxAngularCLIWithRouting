{"version":3,"sources":["cli/utilities/Package.ts"],"names":[],"mappings":"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","file":"cli/utilities/Package.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport readPackageTree = require('read-package-tree');\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport { IPackageJson } from '../../index';\r\n\r\n/**\r\n * The type of dependency; used by IPackageDependency.\r\n */\r\nexport enum PackageDependencyKind {\r\n  Normal,\r\n  /**\r\n   * The dependency was listed in the optionalDependencies section of package.json.\r\n   */\r\n  Optional,\r\n\r\n  /**\r\n   * The dependency should be a symlink to a project that is locally built by Rush..\r\n   */\r\n  LocalLink\r\n}\r\n\r\nexport interface IPackageDependency {\r\n  /**\r\n   * The name of the dependency\r\n   */\r\n  name: string;\r\n  /**\r\n   * The requested version, which may be a pattern such as \"^1.2.3\"\r\n   */\r\n  versionRange: string;\r\n\r\n  /**\r\n   * The kind of dependency\r\n   */\r\n  kind: PackageDependencyKind;\r\n}\r\n\r\n/**\r\n * Represents a \"@rush-temp\" scoped package, which has our additional custom field\r\n * for tracking the dependency graph.\r\n */\r\nexport interface IRushTempPackageJson extends IPackageJson {\r\n  /**\r\n   * An extra setting written into package.json for temp packages, to track\r\n   * references to locally built projects.\r\n   */\r\n  rushDependencies?: { [key: string]: string };\r\n}\r\n\r\n/**\r\n * Represents an NPM package being processed by the \"rush link\" algorithm.\r\n */\r\nexport default class Package {\r\n  /**\r\n   * The \"name\" field from package.json\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * The \"version\" field from package.json\r\n   */\r\n  public version: string;\r\n\r\n  /**\r\n   * Names of packages that we explicitly depend on.  The actual dependency\r\n   * package may be found in this.children, or possibly in this.children of\r\n   * one of the parents.\r\n   * If a dependency is listed in the \"optionalDependencies\" section of package.json\r\n   * then its name here will be prepended with a \"?\" character, which means that Rush\r\n   * will not report an error if the module cannot be found in the Common folder.\r\n   */\r\n  public dependencies: IPackageDependency[];\r\n\r\n  /**\r\n   * The absolute path to the folder that contains package.json.\r\n   */\r\n  public folderPath: string;\r\n\r\n  /**\r\n   * The parent package, or undefined if this is the root of the tree.\r\n   */\r\n  public parent: Package | undefined;\r\n\r\n  /**\r\n   * If this is a local path that we are planning to symlink to a target folder,\r\n   * then symlinkTargetFolderPath keeps track of the intended target.\r\n   */\r\n  public symlinkTargetFolderPath: string | undefined = undefined;\r\n\r\n  /**\r\n   * Packages that were placed in node_modules subfolders of this package.\r\n   * The child packages are not necessarily dependencies of this package.\r\n   */\r\n  public children: Package[];\r\n  private _childrenByName: Map<string, Package>;\r\n\r\n  /**\r\n   * Recursive constructs a tree of Package objects using information returned\r\n   * by the \"read-package-tree\" library.\r\n   */\r\n  public static createFromNpm(npmPackage: readPackageTree.PackageNode): Package {\r\n    if (npmPackage.error) {\r\n      throw Error(`Failed to parse package.json for ${path.basename(npmPackage.path)}: `\r\n        + npmPackage.error.message);\r\n    }\r\n\r\n    let dependencies: IPackageDependency[] = [];\r\n    const dependencyNames: Set<string> = new Set<string>();\r\n    const packageJson: IRushTempPackageJson = npmPackage.package;\r\n\r\n    if (packageJson.optionalDependencies) {\r\n      for (const dependencyName of Object.keys(packageJson.optionalDependencies)) {\r\n        if (!dependencyNames.has(dependencyName)) {\r\n          dependencyNames.add(dependencyName);\r\n          dependencies.push({\r\n            name: dependencyName,\r\n            versionRange: packageJson.optionalDependencies[dependencyName],\r\n            kind: PackageDependencyKind.Optional\r\n          });\r\n        }\r\n      }\r\n    }\r\n    if (packageJson.dependencies) {\r\n      for (const dependencyName of Object.keys(packageJson.dependencies)) {\r\n        if (!dependencyNames.has(dependencyName)) {\r\n          dependencyNames.add(dependencyName);\r\n          dependencies.push({\r\n            name: dependencyName,\r\n            versionRange: packageJson.dependencies[dependencyName],\r\n            kind: PackageDependencyKind.Normal\r\n          });\r\n        }\r\n      }\r\n    }\r\n    if (packageJson.rushDependencies) {\r\n      for (const dependencyName of Object.keys(packageJson.rushDependencies)) {\r\n        if (!dependencyNames.has(dependencyName)) {\r\n          dependencyNames.add(dependencyName);\r\n          dependencies.push({\r\n            name: dependencyName,\r\n            versionRange: packageJson.dependencies![dependencyName],\r\n            kind: PackageDependencyKind.LocalLink\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    dependencies = dependencies.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const newPackage: Package = new Package(\r\n      npmPackage.package.name,\r\n      npmPackage.package.version,\r\n      dependencies,\r\n      // NOTE: We don't use packageNode.realpath here, because if \"npm unlink\" was\r\n      // performed without redoing \"rush link\", then a broken symlink is better than\r\n      // a symlink to the wrong thing.\r\n      npmPackage.path\r\n    );\r\n\r\n    for (const child of npmPackage.children) {\r\n      newPackage.addChild(Package.createFromNpm(child));\r\n    }\r\n\r\n    return newPackage;\r\n  }\r\n\r\n  /**\r\n   * Used by \"npm link\" when creating a Package object that represents symbolic links to be created.\r\n   */\r\n  public static createLinkedPackage(name: string, version: string, dependencies: IPackageDependency[],\r\n    folderPath: string): Package {\r\n    return new Package(name, version, dependencies, folderPath);\r\n  }\r\n\r\n  /**\r\n   * Used by \"npm link\" to simulate a temp project that is missing from the common/node_modules\r\n   * folder (e.g. because it was added after the shrinkwrap file was regenerated).\r\n   * @param packageJsonFilename - Filename of the source package.json\r\n   *        Example: c:\\MyRepo\\common\\temp\\projects\\project1\\package.json\r\n   * @param targetFolderName - Filename where it should have been installed\r\n   *        Example: c:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1\r\n   */\r\n  public static createVirtualTempPackage(packageJsonFilename: string, installFolderName: string): Package {\r\n    const packageJson: IPackageJson = JsonFile.load(packageJsonFilename);\r\n    const npmPackage: readPackageTree.PackageNode = {\r\n      children: [],\r\n      error: undefined,\r\n      id: 0,\r\n      isLink: false,\r\n      package: packageJson,\r\n      parent: undefined,\r\n      path: installFolderName,\r\n      realpath: installFolderName\r\n    };\r\n    return Package.createFromNpm(npmPackage);\r\n  }\r\n\r\n  public get nameAndVersion(): string {\r\n    let result: string = '';\r\n\r\n    if (this.name) {\r\n      result += this.name;\r\n    } else {\r\n      result += '(missing name)';\r\n    }\r\n    result += '@';\r\n    if (this.version) {\r\n      result += this.version;\r\n    } else {\r\n      result += '(missing version)';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public addChild(child: Package): void {\r\n    if (child.parent) {\r\n      throw Error('Child already has a parent');\r\n    }\r\n    if (this._childrenByName.has(child.name)) {\r\n      throw Error('Child already exists');\r\n    }\r\n    child.parent = this;\r\n    this.children.push(child);\r\n    this._childrenByName.set(child.name, child);\r\n  }\r\n\r\n  public getChildByName(childPackageName: string): Package | undefined {\r\n    return this._childrenByName.get(childPackageName);\r\n  }\r\n\r\n  /**\r\n   * Searches the node_modules hierarchy for the nearest matching package with the\r\n   * given name.  Note that the nearest match may have an incompatible version.\r\n   * If a match is found, then the \"found\" result will not be undefined.\r\n   * In either case, the parentForCreate result indicates where the missing\r\n   * dependency can be added, i.e. if the requested dependency was not found\r\n   * or was found with an incompatible version.\r\n   *\r\n   * \"cyclicSubtreeRoot\" is a special optional parameter that specifies a different\r\n   * root for the tree; the cyclicDependencyProjects feature uses this to isolate\r\n   * certain devDependencies in their own subtree.\r\n   */\r\n  public resolveOrCreate(dependencyName: string, cyclicSubtreeRoot?: Package): IResolveOrCreateResult {\r\n\r\n    let currentParent: Package = this;\r\n    let parentForCreate: Package | undefined = undefined;\r\n\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n      // Does any child match?\r\n      for (const child of currentParent.children) {\r\n        if (child.name === dependencyName) {\r\n          // One of the children matched.  Note that parentForCreate may be\r\n          // undefined, e.g. if an immediate child is found but has the wrong version,\r\n          // then we have no place in the tree to create another version.\r\n          return { found: child, parentForCreate };\r\n        }\r\n      }\r\n\r\n      // If no child matched, then make this node the \"parentForCreate\" where we\r\n      // could add a missing dependency.\r\n      parentForCreate = currentParent;\r\n\r\n      if (!currentParent.parent\r\n        || (cyclicSubtreeRoot && currentParent === cyclicSubtreeRoot)) {\r\n        // We reached the root without finding a match\r\n        // parentForCreate will be the root.\r\n        return { found: undefined, parentForCreate };\r\n      }\r\n\r\n      // Continue walking upwards.\r\n      currentParent = currentParent.parent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Searches the node_modules hierarchy for the nearest matching package with the\r\n   * given name.  If no match is found, then undefined is returned.\r\n   */\r\n  public resolve(dependencyName: string): Package | undefined {\r\n    return this.resolveOrCreate(dependencyName).found;\r\n  }\r\n\r\n  public printTree(indent?: string): void {\r\n    if (!indent) {\r\n      indent = '';\r\n    }\r\n    console.log(indent + this.nameAndVersion);\r\n    for (const child of this.children) {\r\n      child.printTree(indent + '  ');\r\n    }\r\n  }\r\n\r\n  private constructor(name: string, version: string, dependencies: IPackageDependency[], folderPath: string) {\r\n    this.name = name;\r\n    this.version = version;\r\n    this.dependencies = dependencies.slice(0); // clone the array\r\n    this.folderPath = folderPath;\r\n    this.parent = undefined;\r\n    this.children = [];\r\n    this._childrenByName = new Map<string, Package>();\r\n  }\r\n}\r\n\r\n/**\r\n * Used by the \"rush link\" algorithm when doing NPM package resolution.\r\n */\r\nexport interface IResolveOrCreateResult {\r\n  found: Package | undefined;\r\n  parentForCreate: Package | undefined;\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}