{"version":3,"sources":["cli/utilities/GitPolicy.ts"],"names":[],"mappings":"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","file":"cli/utilities/GitPolicy.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as colors from 'colors';\r\n\r\nimport RushConfiguration from '../../data/RushConfiguration';\r\nimport Utilities from '../../utilities/Utilities';\r\n\r\nexport default class GitPolicy {\r\n  public static check(rushConfiguration: RushConfiguration): boolean {\r\n    if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    console.log('Checking Git policy for this repository.' + os.EOL);\r\n\r\n    // Determine the user's account\r\n    // Ex: \"bob@example.com\"\r\n    let userEmail: string;\r\n    try {\r\n      userEmail = Utilities.executeCommandAndCaptureOutput('git',\r\n        ['config', 'user.email'], '.').trim();\r\n    } catch (e) {\r\n      console.log(\r\n`Error: ${e.message}\r\nUnable to determine your Git configuration using this command:\r\n\r\n    git config user.email\r\n\r\nIf you didn't configure your e-mail yet, try something like this:`);\r\n\r\n      console.log(colors.cyan(\r\n`\r\n    git config --local user.name \"Mr. Example\"\r\n    git config --local user.email \"${rushConfiguration.gitSampleEmail}\"\r\n`));\r\n\r\n      console.log(colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)'));\r\n\r\n      return false;\r\n    }\r\n\r\n    // sanity check; a valid e-mail should not contain any whitespace\r\n    if (!userEmail.match(/^\\S+$/g)) {\r\n      throw new Error('The gitPolicy check failed because \"git config\" returned unexpected output:'\r\n        + os.EOL + `\"${userEmail}\"`);\r\n    }\r\n\r\n    for (const pattern of rushConfiguration.gitAllowedEmailRegExps) {\r\n      const regex: RegExp = new RegExp('^' + pattern + '$', 'i');\r\n      if (userEmail.match(regex)) {\r\n        // For debugging:\r\n        // console.log(`${userEmail} matched pattern: \"${pattern}\"`);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Show the user's name as well.\r\n    // Ex. \"Mr. Example <mr@example.com>\"\r\n    let fancyEmail: string = colors.cyan(userEmail);\r\n    try {\r\n      const userName: string = Utilities.executeCommandAndCaptureOutput('git',\r\n        ['config', 'user.name'], '.').trim();\r\n      if (userName) {\r\n        fancyEmail = `${userName} <${fancyEmail}>`;\r\n      }\r\n    } catch (e) {\r\n      // but if it fails, this isn't critical, so don't bother them about it\r\n    }\r\n\r\n    let message: string = 'Hey there!  To keep things tidy, this repo asks you '\r\n      + 'to submit your Git commmits using an e-mail like ';\r\n    if (rushConfiguration.gitAllowedEmailRegExps.length > 1) {\r\n      message += 'one of these patterns:';\r\n    } else {\r\n      message += 'this pattern:';\r\n    }\r\n    console.log(message + os.EOL);\r\n\r\n    for (const pattern of  rushConfiguration.gitAllowedEmailRegExps) {\r\n      console.log('    ' + colors.cyan(pattern));\r\n    }\r\n\r\n    console.log(\r\n`\r\n...but yours is configured like this:\r\n\r\n    ${fancyEmail}\r\n\r\nTo fix it, you can use commands like this:`);\r\n\r\n    console.log(colors.cyan(\r\n`\r\n    git config --local user.name \"Mr. Example\"\r\n    git config --local user.email \"${rushConfiguration.gitSampleEmail}\"\r\n`));\r\n\r\n    console.log(colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)'));\r\n    return false;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}