import { default as RushConfiguration } from '../../data/RushConfiguration';
export interface ITaskSelectorConstructor {
    rushConfiguration: RushConfiguration;
    toFlags: Array<string>;
    fromFlags: Array<string>;
    commandToRun: string;
    customFlags: string[];
    isQuietMode: boolean;
    parallelism: number;
    isIncrementalBuildAllowed: boolean;
}
/**
 * This class is responsible for:
 *  - based on to/from flags, solving the dependency graph and figuring out which projects need to be run
 *  - creating a ProjectBuildTask for each project that needs to be built
 *  - registering the necessary ProjectBuildTasks with the TaskRunner, which actually orchestrates execution
 *
 * This class is currently only used by CustomRushAction
 */
export declare class TaskSelector {
    private _options;
    private _taskRunner;
    private _dependentList;
    private _rushLinkJson;
    constructor(_options: ITaskSelectorConstructor);
    execute(): Promise<void>;
    private _registerToFlags(toFlags);
    private _registerFromFlags(fromFlags);
    private _registerAll();
    /**
     * Collects all upstream dependencies for a certain project
     */
    private _collectAllDependencies(project);
    /**
     * Collects all downstream dependents of a certain project
     */
    private _collectAllDependents(project);
    /**
     * Inverts the localLinks to arrive at the dependent graph, rather than using the dependency graph
     * this helps when using the --from flag
     */
    private _buildDependentGraph();
    private _registerTask(project);
}
