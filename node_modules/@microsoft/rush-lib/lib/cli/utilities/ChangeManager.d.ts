import { IChangeInfo } from '../../data/ChangeManagement';
import IPackageJson from '../../utilities/IPackageJson';
import RushConfiguration from '../../data/RushConfiguration';
import RushConfigurationProject from '../../data/RushConfigurationProject';
import { VersionPolicyConfiguration } from '../../data/VersionPolicyConfiguration';
import PrereleaseToken from './PrereleaseToken';
/**
 * The class manages change files and controls how changes logged by change files
 * can be applied to package.json and change logs.
 */
export default class ChangeManager {
    private _rushConfiguration;
    private _lockStepProjectsToExclude;
    private _prereleaseToken;
    private _orderedChanges;
    private _allPackages;
    private _allChanges;
    private _changeFiles;
    constructor(_rushConfiguration: RushConfiguration, _lockStepProjectsToExclude?: Set<string> | undefined);
    /**
     * Load changes from change files
     * @param changesPath - location of change files
     * @param prereleaseToken - prerelease token
     * @param includeCommitDetails - whether commit details need to be included in changes
     */
    load(changesPath: string, prereleaseToken?: PrereleaseToken, includeCommitDetails?: boolean): void;
    hasChanges(): boolean;
    readonly changes: IChangeInfo[];
    readonly allPackages: Map<string, RushConfigurationProject>;
    validateChanges(versionConfig: VersionPolicyConfiguration): void;
    /**
     * Apply changes to package.json
     * @param shouldCommit - If the value is true, package.json will be updated.
     * If the value is false, package.json and change logs will not be updated. It will only do a dry-run.
     */
    apply(shouldCommit: boolean): Map<string, IPackageJson> | undefined;
    updateChangelog(shouldCommit: boolean, updatedPackages?: Map<string, IPackageJson>): void;
}
