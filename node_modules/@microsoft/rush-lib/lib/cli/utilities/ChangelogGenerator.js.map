{"version":3,"sources":["cli/utilities/ChangelogGenerator.ts"],"names":[],"mappings":"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","file":"cli/utilities/ChangelogGenerator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\n\r\nimport {\r\n  default as PublishUtilities,\r\n  IChangeInfoHash\r\n} from './PublishUtilities';\r\nimport {\r\n  IChangeInfo,\r\n  ChangeType\r\n} from '../../data/ChangeManagement';\r\nimport {\r\n  IChangelog,\r\n  IChangeLogEntry,\r\n  IChangeLogComment\r\n} from '../../data/Changelog';\r\nimport RushConfigurationProject from '../../data/RushConfigurationProject';\r\n\r\nconst CHANGELOG_JSON: string = 'CHANGELOG.json';\r\nconst CHANGELOG_MD: string = 'CHANGELOG.md';\r\nconst EOL: string = '\\n';\r\n\r\nexport default class ChangelogGenerator {\r\n\r\n  /**\r\n   * Updates the appropriate changelogs with the given changes.\r\n   */\r\n  public static updateChangelogs(\r\n    allChanges: IChangeInfoHash,\r\n    allProjects: Map<string, RushConfigurationProject>,\r\n    shouldCommit: boolean\r\n  ): IChangelog[] {\r\n    const updatedChangeLogs: IChangelog[] = [];\r\n\r\n    for (const packageName in allChanges) {\r\n      if (allChanges.hasOwnProperty(packageName)) {\r\n        const project: RushConfigurationProject | undefined = allProjects.get(packageName);\r\n\r\n        // Changelogs should only be generated for publishable projects.\r\n        // Do not update changelog or delete the change files for prerelease.\r\n        // Save them for the official release.\r\n        if (!!project && project.shouldPublish && !semver.prerelease(project.packageJson.version)) {\r\n          const changeLog: IChangelog | undefined = ChangelogGenerator.updateIndividualChangelog(\r\n            allChanges[packageName],\r\n            project.projectFolder,\r\n            shouldCommit);\r\n\r\n            if (changeLog) {\r\n              updatedChangeLogs.push(changeLog);\r\n            }\r\n        }\r\n      }\r\n    }\r\n    return updatedChangeLogs;\r\n  }\r\n\r\n  /**\r\n   * Fully regenerate the markdown files based on the current json files.\r\n   */\r\n  public static regenerateChangelogs(\r\n    allProjects: Map<string, RushConfigurationProject>\r\n  ): void {\r\n    allProjects.forEach(project => {\r\n      const markdownPath: string = path.resolve(project.projectFolder, CHANGELOG_MD);\r\n      const markdownJSONPath: string = path.resolve(project.projectFolder, CHANGELOG_JSON);\r\n\r\n      if (fs.existsSync(markdownPath)) {\r\n        console.log('Found: ' + markdownPath);\r\n        if (!fs.existsSync(markdownJSONPath)) {\r\n          throw new Error('A CHANGELOG.md without json: ' + markdownPath);\r\n        }\r\n\r\n        const changelog: IChangelog = ChangelogGenerator._getChangelog(project.packageName, project.projectFolder);\r\n\r\n        fs.writeFileSync(\r\n          path.join(project.projectFolder, CHANGELOG_MD),\r\n          ChangelogGenerator._translateToMarkdown(changelog),\r\n          { encoding: 'utf8' }\r\n        );\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates an individual changelog for a single project.\r\n   */\r\n  public static updateIndividualChangelog(\r\n    change: IChangeInfo,\r\n    projectFolder: string,\r\n    shouldCommit: boolean,\r\n    forceUpdate?: boolean\r\n  ): IChangelog | undefined {\r\n    const changelog: IChangelog = ChangelogGenerator._getChangelog(change.packageName, projectFolder);\r\n\r\n    if (\r\n      !changelog.entries.some(entry => entry.version === change.newVersion)) {\r\n\r\n      const changelogEntry: IChangeLogEntry = {\r\n        version: change.newVersion!,\r\n        tag: PublishUtilities.createTagname(change.packageName, change.newVersion!),\r\n        date: new Date().toUTCString(),\r\n        comments: {}\r\n      };\r\n\r\n      change.changes!.forEach(individualChange => {\r\n        if (individualChange.comment) {\r\n\r\n          // Initialize the comments array only as necessary.\r\n          const changeTypeString: string = ChangeType[individualChange.changeType!];\r\n          const comments: IChangeLogComment[] =\r\n            changelogEntry.comments[changeTypeString] =\r\n            changelogEntry.comments[changeTypeString] || [];\r\n\r\n          comments.push({\r\n            author: individualChange.author,\r\n            commit: individualChange.commit,\r\n            comment: individualChange.comment\r\n          });\r\n        }\r\n      });\r\n\r\n      // Add the changelog entry to the start of the list.\r\n      changelog.entries.unshift(changelogEntry);\r\n\r\n      const changelogFilename: string = path.join(projectFolder, CHANGELOG_JSON);\r\n\r\n      console.log(\r\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: ` +\r\n        `Changelog update for \"${change.packageName}@${change.newVersion}\".`\r\n      );\r\n\r\n      if (shouldCommit) {\r\n        // Write markdown transform.\r\n        fs.writeFileSync(changelogFilename, JSON.stringify(changelog, undefined, 2), { encoding: 'utf8' });\r\n\r\n        fs.writeFileSync(\r\n          path.join(projectFolder, CHANGELOG_MD),\r\n          ChangelogGenerator._translateToMarkdown(changelog),\r\n          { encoding: 'utf8' }\r\n        );\r\n      }\r\n      return changelog;\r\n    }\r\n    // change log not updated.\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Loads the changelog json from disk, or creates a new one if there isn't one.\r\n   */\r\n  private static _getChangelog(packageName: string, projectFolder: string): IChangelog {\r\n    const changelogFilename: string = path.join(projectFolder, CHANGELOG_JSON);\r\n    let changelog: IChangelog | undefined = undefined;\r\n\r\n    // Try to read the existing changelog.\r\n    if (fs.existsSync(changelogFilename)) {\r\n      changelog = JSON.parse(fs.readFileSync(changelogFilename, 'utf8')) as IChangelog;\r\n    }\r\n\r\n    if (!changelog) {\r\n      changelog = {\r\n        name: packageName,\r\n        entries: []\r\n      };\r\n    } else {\r\n      // Force the changelog name to be same as package name.\r\n      // In case the package has been renamed but change log name is not updated.\r\n      changelog.name = packageName;\r\n    }\r\n\r\n    return changelog;\r\n  }\r\n\r\n  /**\r\n   * Translates the given changelog json object into a markdown string.\r\n   */\r\n  private static _translateToMarkdown(changelog: IChangelog): string {\r\n    let markdown: string = [\r\n      `# Change Log - ${changelog.name}`,\r\n      '',\r\n      `This log was last generated on ${new Date().toUTCString()} and should not be manually modified.`,\r\n      '',\r\n      ''\r\n    ].join(EOL);\r\n\r\n    changelog.entries.forEach((entry, index) => {\r\n      markdown += `## ${entry.version}${EOL}`;\r\n\r\n      if (entry.date) {\r\n        markdown += `${entry.date}${EOL}`;\r\n      }\r\n\r\n      markdown += EOL;\r\n\r\n      let comments: string = '';\r\n\r\n      comments += ChangelogGenerator._getChangeComments(\r\n        'Breaking changes',\r\n        entry.comments[ChangeType[ChangeType.major]]);\r\n\r\n      comments += ChangelogGenerator._getChangeComments(\r\n        'Minor changes',\r\n        entry.comments[ChangeType[ChangeType.minor]]);\r\n\r\n      comments += ChangelogGenerator._getChangeComments(\r\n        'Patches',\r\n        entry.comments[ChangeType[ChangeType.patch]]);\r\n\r\n      if (!comments) {\r\n        markdown += ((changelog.entries.length === index + 1) ?\r\n          '*Initial release*' :\r\n          '*Version update only*') +\r\n          EOL + EOL;\r\n      } else {\r\n        markdown += comments;\r\n      }\r\n\r\n    });\r\n\r\n    return markdown;\r\n  }\r\n\r\n  /**\r\n   * Helper to return the comments string to be appends to the markdown content.\r\n   */\r\n  private static _getChangeComments(title: string, commentsArray: IChangeLogComment[]): string {\r\n    let comments: string = '';\r\n\r\n    if (commentsArray) {\r\n      comments = `### ${title}${EOL + EOL}`;\r\n      commentsArray.forEach(comment => {\r\n        comments += `- ${comment.comment}${EOL}`;\r\n      });\r\n      comments += EOL;\r\n    }\r\n\r\n    return comments;\r\n  }\r\n\r\n}"],"sourceRoot":"..\\..\\..\\src"}