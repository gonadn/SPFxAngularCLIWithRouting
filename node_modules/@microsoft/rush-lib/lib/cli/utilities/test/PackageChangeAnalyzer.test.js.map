{"version":3,"sources":["cli/utilities/test/PackageChangeAnalyzer.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA8B;AAC9B,6BAA6B;AAE7B,oEAAiE;AAMjE,MAAM,QAAQ,GAAW,WAAW,CAAC;AACrC,MAAM,YAAY,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC1D,MAAM,KAAK,GAAW,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;AAC9D,wCAAwC;AACxC,6DAA6D;AAC7D,iEAAiE;AACjE,6DAA6D;AAC7D,MAAM,IAAI,GAAW,aAAa,CAAC;AACnC,0DAA0D;AAE1D,QAAQ,CAAC,uBAAuB,EAAE;IAChC,SAAS,CAAC;QACR,6CAAqB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE;QAC5D,MAAM,YAAY,GAAiB;YACjC,KAAK,EAAE;gBACL,CAAC,KAAK,CAAC,EAAE,IAAI;aACd;SACF,CAAC;QAEF,6CAAqB,CAAC,cAAc,GAAG,CAAC,WAAmB,EAAE,OAAiB,KAAK,YAAY,CAAC;QAChG,6CAAqB,CAAC,UAAU,GAAG;YACjC,QAAQ,EAAE,CAAC;oBACT,WAAW,EAAE,QAAQ;oBACrB,qBAAqB,EAAE,YAAY;iBACpC,CAAC;SACI,CAAC,CAAC,6BAA6B;QAEvC,MAAM,WAAW,GAA6B,6CAAqB,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC1G,aAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsCE;AACJ,CAAC,CAAC,CAAC","file":"cli/utilities/test/PackageChangeAnalyzer.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { expect } from 'chai';\r\nimport * as path from 'path';\r\n\r\nimport { PackageChangeAnalyzer } from '../PackageChangeAnalyzer';\r\n\r\nimport {\r\n  IPackageDeps\r\n} from '@microsoft/package-deps-hash';\r\n\r\nconst packageA: string = 'project-a';\r\nconst packageAPath: string = path.join('tools', packageA);\r\nconst fileA: string = path.join(packageAPath, 'src/index.ts');\r\n// const packageB: string = 'project-b';\r\n// const packageBPath: string = path.join('tools', packageB);\r\n// const fileB: string = path.join(packageBPath, 'src/index.ts');\r\n// const packageBPath: string = path.join('tools', packageB);\r\nconst HASH: string = '12345abcdef';\r\n// const looseFile: string = 'some/other/folder/index.ts';\r\n\r\ndescribe('PackageChangeAnalyzer', () => {\r\n  afterEach(() => {\r\n    PackageChangeAnalyzer.reset();\r\n  });\r\n\r\n  it('can associate a file in a project folder with a project', () => {\r\n    const repoHashDeps: IPackageDeps = {\r\n      files: {\r\n        [fileA]: HASH\r\n      }\r\n    };\r\n\r\n    PackageChangeAnalyzer.getPackageDeps = (packagePath: string, ignored: string[]) => repoHashDeps;\r\n    PackageChangeAnalyzer.rushConfig = {\r\n      projects: [{\r\n        packageName: packageA,\r\n        projectRelativeFolder: packageAPath\r\n      }]\r\n    } as any; // tslint:disable-line:no-any\r\n\r\n    const packageDeps: IPackageDeps | undefined = PackageChangeAnalyzer.instance.getPackageDepsHash(packageA);\r\n    expect(packageDeps).eql(repoHashDeps);\r\n  });\r\n\r\n  /*\r\n  it('associates a file that is not in a project with all projects', () => {\r\n    const repoHashDeps: IPackageDeps = {\r\n      files: {\r\n        [looseFile]: HASH,\r\n        [fileA]: HASH,\r\n        [fileB]: HASH\r\n      }\r\n    };\r\n\r\n    PackageChangeAnalyzer.getPackageDeps = (path: string, ignored: string[]) => repoHashDeps;\r\n    PackageChangeAnalyzer.rushConfig = {\r\n      projects: [{\r\n        packageName: packageA,\r\n        projectRelativeFolder: packageAPath\r\n      },\r\n      {\r\n        packageName: packageB,\r\n        projectRelativeFolder: packageBPath\r\n      }]\r\n    } as any; // tslint:disable-line:no-any\r\n\r\n    let packageDeps: IPackageDeps = PackageChangeAnalyzer.instance.getPackageDepsHash(packageA);\r\n    expect(packageDeps).eql({\r\n      files: {\r\n        [looseFile]: HASH,\r\n        [fileA]: HASH\r\n      }\r\n    });\r\n\r\n    packageDeps = PackageChangeAnalyzer.instance.getPackageDepsHash(packageB);\r\n    expect(packageDeps).eql({\r\n      files: {\r\n        [looseFile]: HASH,\r\n        [fileB]: HASH\r\n      }\r\n    });\r\n  });\r\n  */\r\n});"],"sourceRoot":"..\\..\\..\\..\\src"}