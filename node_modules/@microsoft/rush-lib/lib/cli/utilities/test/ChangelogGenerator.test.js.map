{"version":3,"sources":["cli/utilities/test/ChangelogGenerator.test.ts"],"names":[],"mappings":"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","file":"cli/utilities/test/ChangelogGenerator.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { expect } from 'chai';\r\n\r\nimport { IChangelog } from '../../../data/Changelog';\r\nimport { ChangeType } from '../../../data/ChangeManagement';\r\nimport RushConfiguration from '../../../data/RushConfiguration';\r\nimport RushConfigurationProject from '../../../data/RushConfigurationProject';\r\nimport ChangelogGenerator from '../ChangelogGenerator';\r\nimport { IChangeInfoHash } from '../PublishUtilities';\r\n\r\nimport * as path from 'path';\r\n\r\ndescribe('updateIndividualChangelog', () => {\r\n\r\n  it('can translate a single change request into a new changelog object', () => {\r\n    const actualResult: IChangelog = ChangelogGenerator.updateIndividualChangelog(\r\n      {\r\n        packageName: 'a',\r\n        newVersion: '1.0.0',\r\n        changeType: ChangeType.major,\r\n        changes: [{\r\n          packageName: 'a',\r\n          type: 'major',\r\n          changeType: ChangeType.major,\r\n          comment: 'Patching a'\r\n        }]\r\n      },\r\n      'rootMajorChange',\r\n      false)!;\r\n\r\n    const expectedResult: IChangelog = {\r\n      name: 'a',\r\n      entries: [\r\n        {\r\n          version: '1.0.0',\r\n          tag: 'a_v1.0.0',\r\n          date: '',\r\n          comments: {\r\n            major: [\r\n              {\r\n                author: undefined,\r\n                comment: 'Patching a',\r\n                commit: undefined\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // Ignore comparing date.\r\n    expectedResult.entries[0].date = actualResult.entries[0].date;\r\n\r\n    expect(actualResult).eql(expectedResult);\r\n  });\r\n\r\n  it('can merge a new change request into an existing changelog', () => {\r\n    const actualResult: IChangelog = ChangelogGenerator.updateIndividualChangelog(\r\n      {\r\n        packageName: 'a',\r\n        newVersion: '1.0.0',\r\n        changeType: ChangeType.major,\r\n        changes: [{\r\n          packageName: 'a',\r\n          type: 'major',\r\n          changeType: ChangeType.major,\r\n          comment: 'Patching a'\r\n        }]\r\n      },\r\n      path.resolve(__dirname, 'exampleChangelog'),\r\n      false\r\n    )!;\r\n\r\n    const expectedResult: IChangelog = {\r\n      name: 'a',\r\n      entries: [\r\n        {\r\n          version: '1.0.0',\r\n          tag: 'a_v1.0.0',\r\n          date: '',\r\n          comments: {\r\n            major: [\r\n              {\r\n                author: undefined,\r\n                comment: 'Patching a',\r\n                commit: undefined\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          version: '0.0.1',\r\n          tag: 'a_v0.0.1',\r\n          date: 'Wed, 30 Nov 2016 18:37:45 GMT',\r\n          comments: {\r\n            patch: [\r\n              {\r\n                comment: 'Patching a'\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // Ignore comparing date.\r\n    expectedResult.entries[0].date = actualResult.entries[0].date;\r\n\r\n    expect(actualResult).eql(expectedResult);\r\n  });\r\n\r\n  it('can avoid adding duplicate entries', () => {\r\n    const actualResult: IChangelog = ChangelogGenerator.updateIndividualChangelog(\r\n      {\r\n        packageName: 'a',\r\n        newVersion: '0.0.1',\r\n        changeType: ChangeType.patch,\r\n        changes: [{\r\n          packageName: 'a',\r\n          type: 'patch',\r\n          changeType: ChangeType.patch,\r\n          comment: 'Patching a'\r\n        }]\r\n      },\r\n      path.resolve(__dirname, 'exampleChangelog'),\r\n      false\r\n    )!;\r\n\r\n    /* tslint:disable-next-line:no-unused-expression */\r\n    expect(actualResult).to.be.undefined;\r\n  });\r\n\r\n  it('can handle dependency bumps', () => {\r\n    const actualResult: IChangelog = ChangelogGenerator.updateIndividualChangelog(\r\n      {\r\n        packageName: 'a',\r\n        newVersion: '0.0.2',\r\n        changeType: ChangeType.dependency,\r\n        changes: [{\r\n          packageName: 'a',\r\n          type: 'dependency',\r\n          changeType: ChangeType.dependency,\r\n          comment: 'Updating a'\r\n        }]\r\n      },\r\n      path.resolve(__dirname, 'exampleChangelog'),\r\n      false\r\n    )!;\r\n\r\n    const expectedResult: IChangelog = {\r\n      name: 'a',\r\n      entries: [\r\n        {\r\n          version: '0.0.2',\r\n          tag: 'a_v0.0.2',\r\n          date: undefined,\r\n          comments: {\r\n            dependency: [\r\n              {\r\n                author: undefined,\r\n                comment: 'Updating a',\r\n                commit: undefined\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          version: '0.0.1',\r\n          tag: 'a_v0.0.1',\r\n          date: 'Wed, 30 Nov 2016 18:37:45 GMT',\r\n          comments: {\r\n            patch: [\r\n              {\r\n                comment: 'Patching a'\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // Remove date.\r\n    actualResult.entries[0].date = undefined;\r\n\r\n    expect(actualResult).eql(expectedResult);\r\n  });\r\n\r\n});\r\n\r\ndescribe('updateChangelogs', () => {\r\n  const rushJsonFile: string = path.resolve(__dirname, 'packages', 'rush.json');\r\n  let rushConfiguration: RushConfiguration;\r\n\r\n  beforeEach(() => {\r\n    rushConfiguration = RushConfiguration.loadFromConfigurationFile(rushJsonFile);\r\n  });\r\n\r\n  /* tslint:disable:no-string-literal */\r\n  it('skips changes logs if the project version is not changed.', () => {\r\n    const changeHash: IChangeInfoHash = {};\r\n    // Package a does not have version change.\r\n    changeHash['a'] = {\r\n      packageName: 'a',\r\n      changeType: ChangeType.dependency,\r\n      newVersion: '1.0.0',\r\n      changes: []\r\n    };\r\n    // Package b has version change.\r\n    changeHash['b'] = {\r\n      packageName: 'b',\r\n      changeType: ChangeType.patch,\r\n      newVersion: '1.0.1',\r\n      changes: []\r\n    };\r\n    const updatedChangeLogs: IChangelog[] = ChangelogGenerator.updateChangelogs(\r\n      changeHash, rushConfiguration.projectsByName, false);\r\n    expect(updatedChangeLogs.length).eqls(1);\r\n    expect(updatedChangeLogs[0].name).eqls('b');\r\n  });\r\n\r\n  it('skips changes logs if the project is in pre-release', () => {\r\n    const changeHash: IChangeInfoHash = {};\r\n    // Package a is a prerelease\r\n    changeHash['a'] = {\r\n      packageName: 'a',\r\n      changeType: ChangeType.dependency,\r\n      newVersion: '1.0.1-pre.1',\r\n      changes: []\r\n    };\r\n    // Package b is not a prerelease\r\n    changeHash['b'] = {\r\n      packageName: 'b',\r\n      changeType: ChangeType.patch,\r\n      newVersion: '1.0.1',\r\n      changes: []\r\n    };\r\n    // Makes package 'a' prerelease package.\r\n    const rushProjectA: RushConfigurationProject = rushConfiguration.projectsByName.get('a')!;\r\n    rushProjectA.packageJson.version = '1.0.1-pre.1';\r\n\r\n    const updatedChangeLogs: IChangelog[] = ChangelogGenerator.updateChangelogs(\r\n      changeHash, rushConfiguration.projectsByName, false);\r\n    expect(updatedChangeLogs.length).eqls(1);\r\n    expect(updatedChangeLogs[0].name).eqls('b');\r\n  });\r\n  /* tslint:enable:no-string-literal */\r\n});\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}