{"version":3,"sources":["cli/utilities/test/VersionManager.test.ts"],"names":[],"mappings":"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","file":"cli/utilities/test/VersionManager.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { assert } from 'chai';\r\nimport * as path from 'path';\r\n\r\nimport { BumpType } from '../../../data/VersionPolicy';\r\nimport { ChangeFile } from '../../../data/ChangeFile';\r\nimport { ChangeType, IChangeInfo } from '../../../data/ChangeManagement';\r\nimport RushConfiguration from '../../../data/RushConfiguration';\r\nimport { VersionPolicyConfiguration } from '../../../data/VersionPolicyConfiguration';\r\nimport IPackageJson from '../../../utilities/IPackageJson';\r\nimport { VersionManager } from '../VersionManager';\r\n\r\nfunction _getChanges(changeFiles: Map<string, ChangeFile>,\r\n  packageName: string): IChangeInfo[] | undefined {\r\n  const changeFile: ChangeFile | undefined = changeFiles.get(packageName);\r\n  if (!changeFile) {\r\n    return undefined;\r\n  }\r\n  return changeFile.getChanges(packageName);\r\n}\r\n\r\ndescribe('VersionManager', () => {\r\n  const rushJsonFile: string = path.resolve(__dirname, 'repo', 'rush.json');\r\n  const rushConfiguration: RushConfiguration = RushConfiguration.loadFromConfigurationFile(rushJsonFile);\r\n  const versionConfigJsonFile: string = path.resolve(__dirname, 'repo', 'version-policies.json');\r\n  const versionPolicyConfiguration: VersionPolicyConfiguration =\r\n    new VersionPolicyConfiguration(versionConfigJsonFile);\r\n  let versionManager: VersionManager;\r\n\r\n  beforeEach(() => {\r\n    versionManager = new VersionManager(rushConfiguration, 'test@microsoft.com', versionPolicyConfiguration);\r\n  });\r\n\r\n  /* tslint:disable:no-string-literal */\r\n  describe('ensure', () => {\r\n    it('fixes lock step versions', () => {\r\n      versionManager.ensure('testPolicy1');\r\n      const updatedPackages: Map<string, IPackageJson> = versionManager.updatedProjects;\r\n      const expectedVersion: string = '10.10.0';\r\n      assert.equal(updatedPackages.size, 6, 'The number of updated packages matches');\r\n      assert.equal(updatedPackages.get('a')!.version, expectedVersion);\r\n      assert.equal(updatedPackages.get('b')!.version, expectedVersion);\r\n      assert.equal(updatedPackages.get('b')!.dependencies!['a'], `~${expectedVersion}`);\r\n      assert.equal(updatedPackages.get('c')!.version, '3.1.1', 'c version should not change');\r\n      assert.equal(updatedPackages.get('c')!.dependencies!['b'], `>=10.10.0 <11.0.0`);\r\n      assert.equal(updatedPackages.get('d')!.version, '4.1.1', 'd version should not change');\r\n      assert.equal(updatedPackages.get('d')!.dependencies!['b'], `>=10.10.0 <11.0.0`);\r\n      assert.equal(updatedPackages.get('f')!.version, '1.0.0', 'f version should not change');\r\n      assert.equal(updatedPackages.get('f')!.dependencies!['a'], `~10.10.0`);\r\n      assert.equal(updatedPackages.get('g')!.devDependencies!['a'], `~10.10.0`);\r\n\r\n      const changeFiles: Map<string, ChangeFile> = versionManager.changeFiles;\r\n      assert.equal(changeFiles.size, 4, 'The number of change files matches');\r\n      assert.equal(_getChanges(changeFiles, 'a')!.length, 1, 'a does not have one change');\r\n      assert.equal(_getChanges(changeFiles, 'a')![0].changeType, ChangeType.none,\r\n        'a does not have a none change');\r\n      assert.equal(_getChanges(changeFiles, 'b')!.length, 2, 'b does not have two change');\r\n      assert.equal(_getChanges(changeFiles, 'b')![0].changeType, ChangeType.none,\r\n        'b does not have a none change');\r\n      assert.equal(_getChanges(changeFiles, 'b')![1].changeType, ChangeType.dependency,\r\n        'b does not have a dependency update');\r\n      assert.equal(_getChanges(changeFiles, 'c')!.length, 2, 'c does not have two change');\r\n      assert.equal(_getChanges(changeFiles, 'c')![0].changeType, ChangeType.patch,\r\n        'c does not have a patch change');\r\n      assert.equal(_getChanges(changeFiles, 'c')![1].changeType, ChangeType.dependency,\r\n        'c does not have a dependency change');\r\n      assert.equal(_getChanges(changeFiles, 'd')!.length, 2, 'd does not have two change');\r\n      assert.equal(_getChanges(changeFiles, 'd')![0].changeType, ChangeType.patch,\r\n        'd does not have a  patch change');\r\n      assert.equal(_getChanges(changeFiles, 'd')![1].changeType, ChangeType.dependency,\r\n        'd does not have a  patch change');\r\n    });\r\n\r\n    it('fixes major version for individual version policy', () => {\r\n      versionManager.ensure('testPolicy2');\r\n      const updatedPackages: Map<string, IPackageJson> = versionManager.updatedProjects;\r\n      assert.equal(updatedPackages.size, 2);\r\n      assert.equal(updatedPackages.get('c')!.version, '5.0.0');\r\n      assert.equal(updatedPackages.get('c')!.dependencies!['b'], `>=2.0.0 <3.0.0`);\r\n      assert.equal(updatedPackages.get('e')!.version, '10.10.0');\r\n      assert.equal(updatedPackages.get('e')!.dependencies!['c'], '~5.0.0');\r\n    });\r\n\r\n    it('does not change packageJson if not needed by individual version policy', () => {\r\n      versionManager.ensure('testPolicy3');\r\n      const updatedPackages: Map<string, IPackageJson> = versionManager.updatedProjects;\r\n      assert.equal(updatedPackages.size, 0);\r\n    });\r\n  });\r\n\r\n  describe('bump', () => {\r\n    it('bumps to prerelease version', () => {\r\n      versionManager.bump('testPolicy1', BumpType.prerelease, 'dev', false);\r\n      const updatedPackages: Map<string, IPackageJson> = versionManager.updatedProjects;\r\n      const expectedVersion: string = '10.10.1-dev.0';\r\n\r\n      const changeFiles: Map<string, ChangeFile> = versionManager.changeFiles;\r\n\r\n      assert.equal(updatedPackages.get('a')!.version, expectedVersion, `a version is not expected`);\r\n      assert.equal(updatedPackages.get('b')!.version, expectedVersion, `b version is not expected`);\r\n      assert.equal(updatedPackages.get('e')!.version, expectedVersion, `e version is not expected`);\r\n      assert.equal(updatedPackages.get('g')!.devDependencies!['a'], `~${expectedVersion}`,\r\n        'a version is not expected in dev dependency');\r\n      assert.isUndefined(_getChanges(changeFiles, 'a'), 'a has change entry.');\r\n      assert.isUndefined(_getChanges(changeFiles, 'b'), 'b has change entry');\r\n    });\r\n  });\r\n  /* tslint:enable:no-string-literal */\r\n});"],"sourceRoot":"..\\..\\..\\..\\src"}