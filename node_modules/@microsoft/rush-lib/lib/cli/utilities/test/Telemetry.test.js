"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const path = require("path");
const RushConfiguration_1 = require("../../../data/RushConfiguration");
const Rush_1 = require("../../../Rush");
const Telemetry_1 = require("../Telemetry");
describe('Telemetry', () => {
    it('adds data to store if telemetry is enabled', () => {
        const filename = path.resolve(path.join(__dirname, './telemetry/telemetryEnabled.json'));
        const rushConfig = RushConfiguration_1.default.loadFromConfigurationFile(filename);
        const telemetry = new Telemetry_1.default(rushConfig);
        const logData1 = {
            name: 'testData1',
            duration: 100,
            result: 'Succeeded',
            timestamp: new Date().getTime(),
            platform: process.platform,
            rushVersion: Rush_1.default.version
        };
        const logData2 = {
            name: 'testData2',
            duration: 100,
            result: 'Failed',
            timestamp: new Date().getTime(),
            platform: process.platform,
            rushVersion: Rush_1.default.version
        };
        telemetry.log(logData1);
        telemetry.log(logData2);
        chai_1.assert.deepEqual(telemetry.store, [logData1, logData2]);
    });
    it('does not add data to store if telemetry is not enabled', () => {
        const filename = path.resolve(path.join(__dirname, './telemetry/telemetryNotEnabled.json'));
        const rushConfig = RushConfiguration_1.default.loadFromConfigurationFile(filename);
        const telemetry = new Telemetry_1.default(rushConfig);
        const logData = {
            name: 'testData',
            duration: 100,
            result: 'Succeeded',
            timestamp: new Date().getTime(),
            platform: process.platform,
            rushVersion: Rush_1.default.version
        };
        telemetry.log(logData);
        chai_1.assert.deepEqual(telemetry.store, []);
    });
    it('deletes data after flush', () => {
        const filename = path.resolve(path.join(__dirname, './telemetry/telemetryEnabled.json'));
        const rushConfig = RushConfiguration_1.default.loadFromConfigurationFile(filename);
        const telemetry = new Telemetry_1.default(rushConfig);
        const logData = {
            name: 'testData1',
            duration: 100,
            result: 'Succeeded',
            timestamp: new Date().getTime(),
            platform: process.platform,
            rushVersion: Rush_1.default.version
        };
        telemetry.log(logData);
        let logFile;
        let dataToWrite;
        telemetry.flush((file, data) => {
            logFile = file;
            dataToWrite = data;
        });
        chai_1.assert.isDefined(logFile.match(/telemetry_.*\.json/));
        chai_1.assert.deepEqual(dataToWrite, JSON.stringify([logData]));
        chai_1.assert.deepEqual(telemetry.store, []);
    });
    it('populates default fields', () => {
        const filename = path.resolve(path.join(__dirname, './telemetry/telemetryEnabled.json'));
        const rushConfig = RushConfiguration_1.default.loadFromConfigurationFile(filename);
        const telemetry = new Telemetry_1.default(rushConfig);
        const logData = {
            name: 'testData1',
            duration: 100,
            result: 'Succeeded'
        };
        telemetry.log(logData);
        const result = telemetry.store[0];
        chai_1.assert.equal(result.platform, process.platform);
        chai_1.assert.equal(result.rushVersion, Rush_1.default.version);
        chai_1.assert.isDefined(result.timestamp);
    });
});

//# sourceMappingURL=Telemetry.test.js.map
