{"version":3,"sources":["cli/utilities/test/Telemetry.test.ts"],"names":[],"mappings":"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","file":"cli/utilities/test/Telemetry.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { assert } from 'chai';\r\nimport * as path from 'path';\r\n\r\nimport RushConfiguration from '../../../data/RushConfiguration';\r\nimport Rush from '../../../Rush';\r\nimport {\r\n  default as Telemetry,\r\n  ITelemetryData\r\n } from '../Telemetry';\r\n\r\ndescribe('Telemetry', () => {\r\n  it('adds data to store if telemetry is enabled', () => {\r\n    const filename: string = path.resolve(path.join(__dirname, './telemetry/telemetryEnabled.json'));\r\n    const rushConfig: RushConfiguration = RushConfiguration.loadFromConfigurationFile(filename);\r\n    const telemetry: Telemetry = new Telemetry(rushConfig);\r\n    const logData1: ITelemetryData = {\r\n      name: 'testData1',\r\n      duration: 100,\r\n      result: 'Succeeded',\r\n      timestamp: new Date().getTime(),\r\n      platform: process.platform,\r\n      rushVersion: Rush.version\r\n    };\r\n\r\n    const logData2: ITelemetryData = {\r\n      name: 'testData2',\r\n      duration: 100,\r\n      result: 'Failed',\r\n      timestamp: new Date().getTime(),\r\n      platform: process.platform,\r\n      rushVersion: Rush.version\r\n    };\r\n\r\n    telemetry.log(logData1);\r\n    telemetry.log(logData2);\r\n    assert.deepEqual(telemetry.store, [logData1, logData2]);\r\n  });\r\n\r\n  it('does not add data to store if telemetry is not enabled', () => {\r\n    const filename: string = path.resolve(path.join(__dirname, './telemetry/telemetryNotEnabled.json'));\r\n    const rushConfig: RushConfiguration = RushConfiguration.loadFromConfigurationFile(filename);\r\n    const telemetry: Telemetry = new Telemetry(rushConfig);\r\n    const logData: ITelemetryData = {\r\n      name: 'testData',\r\n      duration: 100,\r\n      result: 'Succeeded',\r\n      timestamp: new Date().getTime(),\r\n      platform: process.platform,\r\n      rushVersion: Rush.version\r\n    };\r\n\r\n    telemetry.log(logData);\r\n    assert.deepEqual(telemetry.store, []);\r\n  });\r\n\r\n  it('deletes data after flush', () => {\r\n    const filename: string = path.resolve(path.join(__dirname, './telemetry/telemetryEnabled.json'));\r\n    const rushConfig: RushConfiguration = RushConfiguration.loadFromConfigurationFile(filename);\r\n    const telemetry: Telemetry = new Telemetry(rushConfig);\r\n    const logData: ITelemetryData = {\r\n      name: 'testData1',\r\n      duration: 100,\r\n      result: 'Succeeded',\r\n      timestamp: new Date().getTime(),\r\n      platform: process.platform,\r\n      rushVersion: Rush.version\r\n    };\r\n\r\n    telemetry.log(logData);\r\n    let logFile: string;\r\n    let dataToWrite: string;\r\n    telemetry.flush((file, data) => {\r\n      logFile = file;\r\n      dataToWrite = data;\r\n    });\r\n    assert.isDefined(logFile!.match(/telemetry_.*\\.json/));\r\n    assert.deepEqual(dataToWrite!, JSON.stringify([logData]));\r\n    assert.deepEqual(telemetry.store, []);\r\n  });\r\n\r\n  it('populates default fields', () => {\r\n    const filename: string = path.resolve(path.join(__dirname, './telemetry/telemetryEnabled.json'));\r\n    const rushConfig: RushConfiguration = RushConfiguration.loadFromConfigurationFile(filename);\r\n    const telemetry: Telemetry = new Telemetry(rushConfig);\r\n    const logData: ITelemetryData = {\r\n      name: 'testData1',\r\n      duration: 100,\r\n      result: 'Succeeded'\r\n    };\r\n\r\n    telemetry.log(logData);\r\n    const result: ITelemetryData = telemetry.store[0];\r\n    assert.equal(result.platform, process.platform);\r\n    assert.equal(result.rushVersion, Rush.version);\r\n    assert.isDefined(result.timestamp);\r\n  });\r\n});"],"sourceRoot":"..\\..\\..\\..\\src"}