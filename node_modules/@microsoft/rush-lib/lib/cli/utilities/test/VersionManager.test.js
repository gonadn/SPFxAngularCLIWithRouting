"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const path = require("path");
const VersionPolicy_1 = require("../../../data/VersionPolicy");
const ChangeManagement_1 = require("../../../data/ChangeManagement");
const RushConfiguration_1 = require("../../../data/RushConfiguration");
const VersionPolicyConfiguration_1 = require("../../../data/VersionPolicyConfiguration");
const VersionManager_1 = require("../VersionManager");
function _getChanges(changeFiles, packageName) {
    const changeFile = changeFiles.get(packageName);
    if (!changeFile) {
        return undefined;
    }
    return changeFile.getChanges(packageName);
}
describe('VersionManager', () => {
    const rushJsonFile = path.resolve(__dirname, 'repo', 'rush.json');
    const rushConfiguration = RushConfiguration_1.default.loadFromConfigurationFile(rushJsonFile);
    const versionConfigJsonFile = path.resolve(__dirname, 'repo', 'version-policies.json');
    const versionPolicyConfiguration = new VersionPolicyConfiguration_1.VersionPolicyConfiguration(versionConfigJsonFile);
    let versionManager;
    beforeEach(() => {
        versionManager = new VersionManager_1.VersionManager(rushConfiguration, 'test@microsoft.com', versionPolicyConfiguration);
    });
    /* tslint:disable:no-string-literal */
    describe('ensure', () => {
        it('fixes lock step versions', () => {
            versionManager.ensure('testPolicy1');
            const updatedPackages = versionManager.updatedProjects;
            const expectedVersion = '10.10.0';
            chai_1.assert.equal(updatedPackages.size, 6, 'The number of updated packages matches');
            chai_1.assert.equal(updatedPackages.get('a').version, expectedVersion);
            chai_1.assert.equal(updatedPackages.get('b').version, expectedVersion);
            chai_1.assert.equal(updatedPackages.get('b').dependencies['a'], `~${expectedVersion}`);
            chai_1.assert.equal(updatedPackages.get('c').version, '3.1.1', 'c version should not change');
            chai_1.assert.equal(updatedPackages.get('c').dependencies['b'], `>=10.10.0 <11.0.0`);
            chai_1.assert.equal(updatedPackages.get('d').version, '4.1.1', 'd version should not change');
            chai_1.assert.equal(updatedPackages.get('d').dependencies['b'], `>=10.10.0 <11.0.0`);
            chai_1.assert.equal(updatedPackages.get('f').version, '1.0.0', 'f version should not change');
            chai_1.assert.equal(updatedPackages.get('f').dependencies['a'], `~10.10.0`);
            chai_1.assert.equal(updatedPackages.get('g').devDependencies['a'], `~10.10.0`);
            const changeFiles = versionManager.changeFiles;
            chai_1.assert.equal(changeFiles.size, 4, 'The number of change files matches');
            chai_1.assert.equal(_getChanges(changeFiles, 'a').length, 1, 'a does not have one change');
            chai_1.assert.equal(_getChanges(changeFiles, 'a')[0].changeType, ChangeManagement_1.ChangeType.none, 'a does not have a none change');
            chai_1.assert.equal(_getChanges(changeFiles, 'b').length, 2, 'b does not have two change');
            chai_1.assert.equal(_getChanges(changeFiles, 'b')[0].changeType, ChangeManagement_1.ChangeType.none, 'b does not have a none change');
            chai_1.assert.equal(_getChanges(changeFiles, 'b')[1].changeType, ChangeManagement_1.ChangeType.dependency, 'b does not have a dependency update');
            chai_1.assert.equal(_getChanges(changeFiles, 'c').length, 2, 'c does not have two change');
            chai_1.assert.equal(_getChanges(changeFiles, 'c')[0].changeType, ChangeManagement_1.ChangeType.patch, 'c does not have a patch change');
            chai_1.assert.equal(_getChanges(changeFiles, 'c')[1].changeType, ChangeManagement_1.ChangeType.dependency, 'c does not have a dependency change');
            chai_1.assert.equal(_getChanges(changeFiles, 'd').length, 2, 'd does not have two change');
            chai_1.assert.equal(_getChanges(changeFiles, 'd')[0].changeType, ChangeManagement_1.ChangeType.patch, 'd does not have a  patch change');
            chai_1.assert.equal(_getChanges(changeFiles, 'd')[1].changeType, ChangeManagement_1.ChangeType.dependency, 'd does not have a  patch change');
        });
        it('fixes major version for individual version policy', () => {
            versionManager.ensure('testPolicy2');
            const updatedPackages = versionManager.updatedProjects;
            chai_1.assert.equal(updatedPackages.size, 2);
            chai_1.assert.equal(updatedPackages.get('c').version, '5.0.0');
            chai_1.assert.equal(updatedPackages.get('c').dependencies['b'], `>=2.0.0 <3.0.0`);
            chai_1.assert.equal(updatedPackages.get('e').version, '10.10.0');
            chai_1.assert.equal(updatedPackages.get('e').dependencies['c'], '~5.0.0');
        });
        it('does not change packageJson if not needed by individual version policy', () => {
            versionManager.ensure('testPolicy3');
            const updatedPackages = versionManager.updatedProjects;
            chai_1.assert.equal(updatedPackages.size, 0);
        });
    });
    describe('bump', () => {
        it('bumps to prerelease version', () => {
            versionManager.bump('testPolicy1', VersionPolicy_1.BumpType.prerelease, 'dev', false);
            const updatedPackages = versionManager.updatedProjects;
            const expectedVersion = '10.10.1-dev.0';
            const changeFiles = versionManager.changeFiles;
            chai_1.assert.equal(updatedPackages.get('a').version, expectedVersion, `a version is not expected`);
            chai_1.assert.equal(updatedPackages.get('b').version, expectedVersion, `b version is not expected`);
            chai_1.assert.equal(updatedPackages.get('e').version, expectedVersion, `e version is not expected`);
            chai_1.assert.equal(updatedPackages.get('g').devDependencies['a'], `~${expectedVersion}`, 'a version is not expected in dev dependency');
            chai_1.assert.isUndefined(_getChanges(changeFiles, 'a'), 'a has change entry.');
            chai_1.assert.isUndefined(_getChanges(changeFiles, 'b'), 'b has change entry');
        });
    });
    /* tslint:enable:no-string-literal */
});

//# sourceMappingURL=VersionManager.test.js.map
