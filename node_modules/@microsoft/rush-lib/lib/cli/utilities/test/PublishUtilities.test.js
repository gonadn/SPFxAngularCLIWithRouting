"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const path = require("path");
const ChangeManagement_1 = require("../../../data/ChangeManagement");
const RushConfiguration_1 = require("../../../data/RushConfiguration");
const PublishUtilities_1 = require("../PublishUtilities");
const ChangeFiles_1 = require("../ChangeFiles");
/* tslint:disable:no-string-literal */
describe('findChangeRequests', () => {
    it('returns no changes in an empty change folder', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'noChange')));
        chai_1.expect(Object.keys(allChanges).length).to.equal(0);
    });
    it('returns 1 change when changing a leaf package', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'leafChange')));
        chai_1.expect(Object.keys(allChanges).length).to.equal(1);
        chai_1.expect(allChanges).has.property('d');
        chai_1.expect(allChanges['d'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'd was not patched');
    });
    it('returns 2 changes when patching a root package', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'rootPatchChange')));
        chai_1.expect(Object.keys(allChanges).length).to.equal(2);
        chai_1.expect(allChanges).has.property('a');
        chai_1.expect(allChanges).has.property('b');
        chai_1.expect(allChanges['a'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'a was not a patch');
        chai_1.expect(allChanges['b'].changeType).equals(ChangeManagement_1.ChangeType.dependency, 'b was not a dependency change');
        chai_1.expect(allChanges['a'].newVersion).equals('1.0.1', 'a was not patched');
        chai_1.expect(allChanges['b'].newVersion).equals('1.0.0', 'b was not left unchanged');
    });
    it('returns 3 changes when major bumping a root package', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'rootMajorChange')));
        chai_1.expect(Object.keys(allChanges).length).to.equal(3);
        chai_1.expect(allChanges).has.property('a');
        chai_1.expect(allChanges).has.property('b');
        chai_1.expect(allChanges).has.property('c');
        chai_1.expect(allChanges['a'].changeType).equals(ChangeManagement_1.ChangeType.major, 'a was not a major');
        chai_1.expect(allChanges['b'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'b was not a patch');
        chai_1.expect(allChanges['c'].changeType).equals(ChangeManagement_1.ChangeType.dependency, 'c was not a dependency change');
        chai_1.expect(allChanges['a'].newVersion).equals('2.0.0', 'a was not a major change');
        chai_1.expect(allChanges['b'].newVersion).equals('1.0.1', 'b was not patched');
        chai_1.expect(allChanges['c'].newVersion).equals('1.0.0', 'c was not left unchanged');
    });
    it('returns 2 changes when bumping cyclic dependencies', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'cyclicDeps')));
        chai_1.expect(Object.keys(allChanges).length).to.equal(2);
        chai_1.expect(allChanges).has.property('cyclic-dep-1');
        chai_1.expect(allChanges).has.property('cyclic-dep-2');
        chai_1.expect(allChanges['cyclic-dep-1'].changeType).equals(ChangeManagement_1.ChangeType.major, 'cyclic-dep-1 was not a major');
        chai_1.expect(allChanges['cyclic-dep-2'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'cyclic-dep-2 was not a patch');
    });
    it('can resolve multiple changes requests on the same package', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'multipleChanges')));
        chai_1.expect(Object.keys(allChanges).length).to.equal(3);
        chai_1.expect(allChanges).has.property('a');
        chai_1.expect(allChanges).has.property('b');
        chai_1.expect(allChanges).has.property('c');
        chai_1.expect(allChanges['a'].changeType).equals(ChangeManagement_1.ChangeType.major, 'a was not a major');
        chai_1.expect(allChanges['b'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'b was not a patch');
        chai_1.expect(allChanges['c'].changeType).equals(ChangeManagement_1.ChangeType.dependency, 'c was not a dependency change');
        chai_1.expect(allChanges['a'].newVersion).equals('2.0.0', 'a was not a major change');
        chai_1.expect(allChanges['b'].newVersion).equals('1.0.1', 'b was not patched');
        chai_1.expect(allChanges['c'].newVersion).equals('1.0.0', 'b was not left unchanged');
    });
    it('can update an explicit dependency', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'explicitVersionChange')));
        chai_1.expect(Object.keys(allChanges).length).to.equal(2);
        chai_1.expect(allChanges).has.property('c');
        chai_1.expect(allChanges).has.property('d');
        chai_1.expect(allChanges['c'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'c was not a patch');
        chai_1.expect(allChanges['d'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'd was not a patch');
    });
    it('can exclude lock step projects', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'repo', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'repo', 'changes')), false, undefined, new Set(['a', 'b', 'e']));
        chai_1.expect(Object.keys(allChanges).length).to.equal(5);
        chai_1.expect(allChanges['a'].newVersion).equals('1.0.0', 'a version is changed');
        chai_1.expect(allChanges['b'].newVersion).equals('2.0.0', 'b version is changed');
        chai_1.expect(allChanges['c'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'c was not a patch');
        chai_1.expect(allChanges['c'].newVersion).equals('3.1.2');
        chai_1.expect(allChanges['d'].changeType).equals(ChangeManagement_1.ChangeType.patch, 'd was not a patch');
        chai_1.expect(allChanges['d'].newVersion).equals('4.1.2');
        chai_1.expect(allChanges['e'].newVersion).equals(allPackages.get('e').packageJson.version, 'e version gets changed');
    });
});
describe('sortChangeRequests', () => {
    it('can return a sorted array of the change requests to be published in the correct order', () => {
        const allPackages = RushConfiguration_1.default.loadFromConfigurationFile(path.resolve(__dirname, 'packages', 'rush.json')).projectsByName;
        const allChanges = PublishUtilities_1.default.findChangeRequests(allPackages, new ChangeFiles_1.default(path.join(__dirname, 'multipleChanges')));
        const orderedChanges = PublishUtilities_1.default.sortChangeRequests(allChanges);
        chai_1.expect(orderedChanges.length).equals(3, 'there was not 3 changes');
        chai_1.expect(orderedChanges[0].packageName).equals('a', 'a was not at index 0');
        chai_1.expect(orderedChanges[1].packageName).equals('b', 'b was not at index 1');
        chai_1.expect(orderedChanges[2].packageName).equals('c', 'c was not at index 2');
    });
});
describe('isRangeDependency', () => {
    it('can test ranges', () => {
        /* tslint:disable:no-unused-expression */
        chai_1.expect(PublishUtilities_1.default.isRangeDependency('>=1.0.0 <2.0.0')).is.true;
        chai_1.expect(PublishUtilities_1.default.isRangeDependency('>=1.0.0-pr.1 <2.0.0')).is.true;
        chai_1.expect(PublishUtilities_1.default.isRangeDependency('1.0.0')).is.false;
        chai_1.expect(PublishUtilities_1.default.isRangeDependency('^1.0.0')).is.false;
        chai_1.expect(PublishUtilities_1.default.isRangeDependency('~1.0.0')).is.false;
        /* tslint:enable:no-unused-expression */
    });
});
describe('getNewDependencyVersion', () => {
    it('can update dependency versions', () => {
        const dependencies = {
            'a': '~1.0.0',
            'b': '^1.0.0',
            'c': '>=1.0.0 <2.0.0'
        };
        chai_1.expect(PublishUtilities_1.default.getNewDependencyVersion(dependencies, 'a', '1.1.0')).equals('~1.1.0');
        chai_1.expect(PublishUtilities_1.default.getNewDependencyVersion(dependencies, 'b', '1.2.0')).equals('^1.2.0');
        chai_1.expect(PublishUtilities_1.default.getNewDependencyVersion(dependencies, 'c', '1.3.0')).equals('>=1.3.0 <2.0.0');
    });
    it('can update dependency versions with prereleases', () => {
        const dependencies = {
            'a': '~1.0.0-pr.1',
            'b': '^1.0.0-pr.1',
            'c': '>=1.0.0-pr.1 <2.0.0'
        };
        chai_1.expect(PublishUtilities_1.default.getNewDependencyVersion(dependencies, 'a', '1.1.0-pr.1')).equals('~1.1.0-pr.1');
        chai_1.expect(PublishUtilities_1.default.getNewDependencyVersion(dependencies, 'b', '1.2.0-pr.2')).equals('^1.2.0-pr.2');
        chai_1.expect(PublishUtilities_1.default.getNewDependencyVersion(dependencies, 'c', '1.3.0-pr.3')).equals('>=1.3.0-pr.3 <2.0.0');
    });
});

//# sourceMappingURL=PublishUtilities.test.js.map
