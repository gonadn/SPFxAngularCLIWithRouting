{"version":3,"sources":["cli/utilities/test/ChangeFiles.test.ts"],"names":[],"mappings":"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","file":"cli/utilities/test/ChangeFiles.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { expect } from 'chai';\r\nimport * as path from 'path';\r\n\r\nimport { IChangelog } from '../../../data/Changelog';\r\nimport ChangeFiles from '../ChangeFiles';\r\n\r\ndescribe('ChangeFiles', () => {\r\n  describe('getFiles', () => {\r\n    it('returns correctly when there is one change file', () => {\r\n      const changesPath: string = path.join(__dirname, 'leafChange');\r\n      const changeFiles: ChangeFiles = new ChangeFiles(changesPath);\r\n      const expectedPath: string = path.join(changesPath, 'change1.json').replace(/\\\\/g, '/');\r\n      expect(changeFiles.getFiles()).to.eql([expectedPath]);\r\n    });\r\n\r\n    it('returns empty array when no change files', () => {\r\n      const changesPath: string = path.join(__dirname, 'noChange');\r\n      const changeFiles: ChangeFiles = new ChangeFiles(changesPath);\r\n      expect(changeFiles.getFiles().length).to.equal(0);\r\n    });\r\n\r\n    it('returns correctly when change files are categorized', () => {\r\n      const changesPath: string = path.join(__dirname, 'categorizedChanges');\r\n      const changeFiles: ChangeFiles = new ChangeFiles(changesPath);\r\n      const files: string[] = changeFiles.getFiles();\r\n      expect(files.length).to.equal(3);\r\n\r\n      const expectedPathA: string = path.join(changesPath, '@ms', 'a', 'changeA.json').replace(/\\\\/g, '/');\r\n      const expectedPathB: string = path.join(changesPath, '@ms', 'b', 'changeB.json').replace(/\\\\/g, '/');\r\n      const expectedPathC: string = path.join(changesPath, 'changeC.json').replace(/\\\\/g, '/');\r\n      expect(files).to.contains(expectedPathA, 'changeA is missing');\r\n      expect(files).to.contains(expectedPathB, 'changeB is missing');\r\n      expect(files).to.contains(expectedPathC, 'changeC is missing');\r\n    });\r\n  });\r\n\r\n  describe('validate', () => {\r\n    it('throws when there is any missing package.', () => {\r\n      const changeFile: string = path.join(__dirname, 'verifyChanges', 'changes.json');\r\n      const changedPackages: string[] = ['a', 'b', 'c'];\r\n      expect(() => {\r\n        ChangeFiles.validate([changeFile], changedPackages);\r\n      }).to.throw(Error);\r\n    });\r\n\r\n    it('does not throw when there is no missing packages', () => {\r\n      const changeFile: string = path.join(__dirname, 'verifyChanges', 'changes.json');\r\n      const changedPackages: string[] = ['a'];\r\n      expect(() => {\r\n        ChangeFiles.validate([changeFile], changedPackages);\r\n      }).not.to.throw();\r\n    });\r\n\r\n    it('throws when missing packages from categorized changes', () => {\r\n      const changeFileA: string = path.join(__dirname, 'categorizedChanges', '@ms', 'a', 'changeA.json');\r\n      const changeFileB: string = path.join(__dirname, 'categorizedChanges', '@ms', 'b', 'changeB.json');\r\n      const changedPackages: string[] = ['@ms/a', '@ms/b', 'c'];\r\n      expect(() => {\r\n        ChangeFiles.validate([changeFileA, changeFileB], changedPackages);\r\n      }).to.throw(Error);\r\n    });\r\n\r\n    it('does not throw when no missing packages from categorized changes', () => {\r\n      const changeFileA: string = path.join(__dirname, 'categorizedChanges', '@ms', 'a', 'changeA.json');\r\n      const changeFileB: string = path.join(__dirname, 'categorizedChanges', '@ms', 'b', 'changeB.json');\r\n      const changeFileC: string = path.join(__dirname, 'categorizedChanges', 'changeC.json');\r\n      const changedPackages: string[] = ['@ms/a', '@ms/b', 'c'];\r\n      expect(() => {\r\n        ChangeFiles.validate([changeFileA, changeFileB, changeFileC], changedPackages);\r\n      }).not.to.throw(Error);\r\n    });\r\n  });\r\n\r\n  describe('deleteAll', () => {\r\n    it('delete all files when there are no prerelease packages', () => {\r\n      const changesPath: string = path.join(__dirname, 'multipleChangeFiles');\r\n      const changeFiles: ChangeFiles = new ChangeFiles(changesPath);\r\n      expect(changeFiles.deleteAll(false)).equals(3);\r\n    });\r\n\r\n    it('does not delete change files for package whose change logs do not get updated. ', () => {\r\n      const changesPath: string = path.join(__dirname, 'multipleChangeFiles');\r\n      const changeFiles: ChangeFiles = new ChangeFiles(changesPath);\r\n      const updatedChangelogs: IChangelog[] = [\r\n        {\r\n          name: 'a',\r\n          entries: []\r\n        },\r\n        {\r\n          name: 'b',\r\n          entries: []\r\n        }\r\n      ];\r\n      expect(changeFiles.deleteAll(false, updatedChangelogs)).equals(2,\r\n        'Changes files for a and b should be deleted.');\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}