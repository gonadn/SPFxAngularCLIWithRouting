"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const ChangeManagement_1 = require("../../../data/ChangeManagement");
const RushConfiguration_1 = require("../../../data/RushConfiguration");
const ChangelogGenerator_1 = require("../ChangelogGenerator");
const path = require("path");
describe('updateIndividualChangelog', () => {
    it('can translate a single change request into a new changelog object', () => {
        const actualResult = ChangelogGenerator_1.default.updateIndividualChangelog({
            packageName: 'a',
            newVersion: '1.0.0',
            changeType: ChangeManagement_1.ChangeType.major,
            changes: [{
                    packageName: 'a',
                    type: 'major',
                    changeType: ChangeManagement_1.ChangeType.major,
                    comment: 'Patching a'
                }]
        }, 'rootMajorChange', false);
        const expectedResult = {
            name: 'a',
            entries: [
                {
                    version: '1.0.0',
                    tag: 'a_v1.0.0',
                    date: '',
                    comments: {
                        major: [
                            {
                                author: undefined,
                                comment: 'Patching a',
                                commit: undefined
                            }
                        ]
                    }
                }
            ]
        };
        // Ignore comparing date.
        expectedResult.entries[0].date = actualResult.entries[0].date;
        chai_1.expect(actualResult).eql(expectedResult);
    });
    it('can merge a new change request into an existing changelog', () => {
        const actualResult = ChangelogGenerator_1.default.updateIndividualChangelog({
            packageName: 'a',
            newVersion: '1.0.0',
            changeType: ChangeManagement_1.ChangeType.major,
            changes: [{
                    packageName: 'a',
                    type: 'major',
                    changeType: ChangeManagement_1.ChangeType.major,
                    comment: 'Patching a'
                }]
        }, path.resolve(__dirname, 'exampleChangelog'), false);
        const expectedResult = {
            name: 'a',
            entries: [
                {
                    version: '1.0.0',
                    tag: 'a_v1.0.0',
                    date: '',
                    comments: {
                        major: [
                            {
                                author: undefined,
                                comment: 'Patching a',
                                commit: undefined
                            }
                        ]
                    }
                },
                {
                    version: '0.0.1',
                    tag: 'a_v0.0.1',
                    date: 'Wed, 30 Nov 2016 18:37:45 GMT',
                    comments: {
                        patch: [
                            {
                                comment: 'Patching a'
                            }
                        ]
                    }
                }
            ]
        };
        // Ignore comparing date.
        expectedResult.entries[0].date = actualResult.entries[0].date;
        chai_1.expect(actualResult).eql(expectedResult);
    });
    it('can avoid adding duplicate entries', () => {
        const actualResult = ChangelogGenerator_1.default.updateIndividualChangelog({
            packageName: 'a',
            newVersion: '0.0.1',
            changeType: ChangeManagement_1.ChangeType.patch,
            changes: [{
                    packageName: 'a',
                    type: 'patch',
                    changeType: ChangeManagement_1.ChangeType.patch,
                    comment: 'Patching a'
                }]
        }, path.resolve(__dirname, 'exampleChangelog'), false);
        /* tslint:disable-next-line:no-unused-expression */
        chai_1.expect(actualResult).to.be.undefined;
    });
    it('can handle dependency bumps', () => {
        const actualResult = ChangelogGenerator_1.default.updateIndividualChangelog({
            packageName: 'a',
            newVersion: '0.0.2',
            changeType: ChangeManagement_1.ChangeType.dependency,
            changes: [{
                    packageName: 'a',
                    type: 'dependency',
                    changeType: ChangeManagement_1.ChangeType.dependency,
                    comment: 'Updating a'
                }]
        }, path.resolve(__dirname, 'exampleChangelog'), false);
        const expectedResult = {
            name: 'a',
            entries: [
                {
                    version: '0.0.2',
                    tag: 'a_v0.0.2',
                    date: undefined,
                    comments: {
                        dependency: [
                            {
                                author: undefined,
                                comment: 'Updating a',
                                commit: undefined
                            }
                        ]
                    }
                },
                {
                    version: '0.0.1',
                    tag: 'a_v0.0.1',
                    date: 'Wed, 30 Nov 2016 18:37:45 GMT',
                    comments: {
                        patch: [
                            {
                                comment: 'Patching a'
                            }
                        ]
                    }
                }
            ]
        };
        // Remove date.
        actualResult.entries[0].date = undefined;
        chai_1.expect(actualResult).eql(expectedResult);
    });
});
describe('updateChangelogs', () => {
    const rushJsonFile = path.resolve(__dirname, 'packages', 'rush.json');
    let rushConfiguration;
    beforeEach(() => {
        rushConfiguration = RushConfiguration_1.default.loadFromConfigurationFile(rushJsonFile);
    });
    /* tslint:disable:no-string-literal */
    it('skips changes logs if the project version is not changed.', () => {
        const changeHash = {};
        // Package a does not have version change.
        changeHash['a'] = {
            packageName: 'a',
            changeType: ChangeManagement_1.ChangeType.dependency,
            newVersion: '1.0.0',
            changes: []
        };
        // Package b has version change.
        changeHash['b'] = {
            packageName: 'b',
            changeType: ChangeManagement_1.ChangeType.patch,
            newVersion: '1.0.1',
            changes: []
        };
        const updatedChangeLogs = ChangelogGenerator_1.default.updateChangelogs(changeHash, rushConfiguration.projectsByName, false);
        chai_1.expect(updatedChangeLogs.length).eqls(1);
        chai_1.expect(updatedChangeLogs[0].name).eqls('b');
    });
    it('skips changes logs if the project is in pre-release', () => {
        const changeHash = {};
        // Package a is a prerelease
        changeHash['a'] = {
            packageName: 'a',
            changeType: ChangeManagement_1.ChangeType.dependency,
            newVersion: '1.0.1-pre.1',
            changes: []
        };
        // Package b is not a prerelease
        changeHash['b'] = {
            packageName: 'b',
            changeType: ChangeManagement_1.ChangeType.patch,
            newVersion: '1.0.1',
            changes: []
        };
        // Makes package 'a' prerelease package.
        const rushProjectA = rushConfiguration.projectsByName.get('a');
        rushProjectA.packageJson.version = '1.0.1-pre.1';
        const updatedChangeLogs = ChangelogGenerator_1.default.updateChangelogs(changeHash, rushConfiguration.projectsByName, false);
        chai_1.expect(updatedChangeLogs.length).eqls(1);
        chai_1.expect(updatedChangeLogs[0].name).eqls('b');
    });
    /* tslint:enable:no-string-literal */
});

//# sourceMappingURL=ChangelogGenerator.test.js.map
