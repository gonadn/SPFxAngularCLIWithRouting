{"version":3,"sources":["cli/utilities/ApprovedPackagesChecker.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAM3D,yDAAkD;AAElD;IACE;;;;;;;OAOG;IACI,MAAM,CAAC,kBAAkB,CAAC,iBAAoC;QACnE,MAAM,sBAAsB,GAA2B,iBAAiB,CAAC,sBAAsB,CAAC;QAChG,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC;QACT,CAAC;QAED,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;YACrD,MAAM,WAAW,GAAiB,WAAW,CAAC,WAAW,CAAC;YAE1D,uBAAuB,CAAC,oBAAoB,CAAC,WAAW,CAAC,YAAY,EACnE,sBAAsB,EAAE,WAAW,CAAC,CAAC;YACvC,uBAAuB,CAAC,oBAAoB,CAAC,WAAW,CAAC,oBAAoB,EAC3E,sBAAsB,EAAE,WAAW,CAAC,CAAC;YACvC,uBAAuB,CAAC,oBAAoB,CAAC,WAAW,CAAC,eAAe,EACtE,sBAAsB,EAAE,WAAW,CAAC,CAAC;QACzC,CAAC;QAED,sBAAsB,CAAC,uBAAuB,CAAC,UAAU,EAAE,CAAC;QAC5D,sBAAsB,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC;IACjE,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAAC,YAAmD,EACrF,sBAA8C,EAAE,WAAqC;QAErF,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,KAAK,GAAW,mBAAS,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;gBAE1E,4EAA4E;gBAC5E,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxD,oDAAoD;oBAEpD,sFAAsF;oBACtF,2CAA2C;oBAC3C,EAAE,CAAC,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBACjF,sBAAsB,CAAC,0BAA0B;6BAC9C,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;oBACjE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,sBAAsB,CAAC,uBAAuB;6BAC3C,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;oBACjE,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAtDD,0DAsDC","file":"cli/utilities/ApprovedPackagesChecker.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport IPackageJson from '../../utilities/IPackageJson';\r\nimport { ApprovedPackagesPolicy } from '../../data/ApprovedPackagesPolicy';\r\nimport RushConfiguration from '../../data/RushConfiguration';\r\nimport RushConfigurationProject from '../../data/RushConfigurationProject';\r\nimport Utilities from '../../utilities/Utilities';\r\n\r\nexport class ApprovedPackagesChecker {\r\n  /**\r\n   * Examines the current dependencies for the projects specified in RushConfiguration,\r\n   * and then adds them to the 'browser-approved-packages.json' and\r\n   * 'nonbrowser-approved-packages.json' config files.  If these files don't exist,\r\n   * they will be created.\r\n   *\r\n   * If the \"approvedPackagesPolicy\" feature is not enabled, then no action is taken.\r\n   */\r\n  public static rewriteConfigFiles(rushConfiguration: RushConfiguration): void {\r\n    const approvedPackagesPolicy: ApprovedPackagesPolicy = rushConfiguration.approvedPackagesPolicy;\r\n    if (!approvedPackagesPolicy.enabled) {\r\n      return;\r\n    }\r\n\r\n    for (const rushProject of rushConfiguration.projects) {\r\n      const packageJson: IPackageJson = rushProject.packageJson;\r\n\r\n      ApprovedPackagesChecker._collectDependencies(packageJson.dependencies,\r\n        approvedPackagesPolicy, rushProject);\r\n      ApprovedPackagesChecker._collectDependencies(packageJson.optionalDependencies,\r\n        approvedPackagesPolicy, rushProject);\r\n      ApprovedPackagesChecker._collectDependencies(packageJson.devDependencies,\r\n        approvedPackagesPolicy, rushProject);\r\n    }\r\n\r\n    approvedPackagesPolicy.browserApprovedPackages.saveToFile();\r\n    approvedPackagesPolicy.nonbrowserApprovedPackages.saveToFile();\r\n  }\r\n\r\n  private static _collectDependencies(dependencies: { [key: string]: string } | undefined,\r\n    approvedPackagesPolicy: ApprovedPackagesPolicy, rushProject: RushConfigurationProject): void {\r\n\r\n    if (dependencies) {\r\n      for (const packageName of Object.keys(dependencies)) {\r\n        const scope: string = Utilities.parseScopedPackageName(packageName).scope;\r\n\r\n        // Make sure the scope isn't something like \"@types\" which should be ignored\r\n        if (!approvedPackagesPolicy.ignoredNpmScopes.has(scope)) {\r\n          // Yes, add it to the list if it's not already there\r\n\r\n          // By default we put everything in the browser file.  But if it already appears in the\r\n          // non-browser file, then use that instead.\r\n          if (approvedPackagesPolicy.nonbrowserApprovedPackages.getItemByName(packageName)) {\r\n            approvedPackagesPolicy.nonbrowserApprovedPackages\r\n              .addOrUpdatePackage(packageName, rushProject.reviewCategory);\r\n          } else {\r\n            approvedPackagesPolicy.browserApprovedPackages\r\n              .addOrUpdatePackage(packageName, rushProject.reviewCategory);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}