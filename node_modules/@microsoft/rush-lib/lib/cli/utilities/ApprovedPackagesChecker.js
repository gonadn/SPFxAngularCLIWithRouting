"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const Utilities_1 = require("../../utilities/Utilities");
class ApprovedPackagesChecker {
    /**
     * Examines the current dependencies for the projects specified in RushConfiguration,
     * and then adds them to the 'browser-approved-packages.json' and
     * 'nonbrowser-approved-packages.json' config files.  If these files don't exist,
     * they will be created.
     *
     * If the "approvedPackagesPolicy" feature is not enabled, then no action is taken.
     */
    static rewriteConfigFiles(rushConfiguration) {
        const approvedPackagesPolicy = rushConfiguration.approvedPackagesPolicy;
        if (!approvedPackagesPolicy.enabled) {
            return;
        }
        for (const rushProject of rushConfiguration.projects) {
            const packageJson = rushProject.packageJson;
            ApprovedPackagesChecker._collectDependencies(packageJson.dependencies, approvedPackagesPolicy, rushProject);
            ApprovedPackagesChecker._collectDependencies(packageJson.optionalDependencies, approvedPackagesPolicy, rushProject);
            ApprovedPackagesChecker._collectDependencies(packageJson.devDependencies, approvedPackagesPolicy, rushProject);
        }
        approvedPackagesPolicy.browserApprovedPackages.saveToFile();
        approvedPackagesPolicy.nonbrowserApprovedPackages.saveToFile();
    }
    static _collectDependencies(dependencies, approvedPackagesPolicy, rushProject) {
        if (dependencies) {
            for (const packageName of Object.keys(dependencies)) {
                const scope = Utilities_1.default.parseScopedPackageName(packageName).scope;
                // Make sure the scope isn't something like "@types" which should be ignored
                if (!approvedPackagesPolicy.ignoredNpmScopes.has(scope)) {
                    // Yes, add it to the list if it's not already there
                    // By default we put everything in the browser file.  But if it already appears in the
                    // non-browser file, then use that instead.
                    if (approvedPackagesPolicy.nonbrowserApprovedPackages.getItemByName(packageName)) {
                        approvedPackagesPolicy.nonbrowserApprovedPackages
                            .addOrUpdatePackage(packageName, rushProject.reviewCategory);
                    }
                    else {
                        approvedPackagesPolicy.browserApprovedPackages
                            .addOrUpdatePackage(packageName, rushProject.reviewCategory);
                    }
                }
            }
        }
    }
}
exports.ApprovedPackagesChecker = ApprovedPackagesChecker;

//# sourceMappingURL=ApprovedPackagesChecker.js.map
