{"version":3,"sources":["cli/utilities/LinkManager.ts"],"names":[],"mappings":"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","file":"cli/utilities/LinkManager.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport * as tar from 'tar';\r\nimport readPackageTree = require('read-package-tree');\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport { RushConstants } from '../../RushConstants';\r\nimport {\r\n  default as RushConfiguration,\r\n  IRushLinkJson\r\n} from '../../data/RushConfiguration';\r\nimport RushConfigurationProject from '../../data/RushConfigurationProject';\r\nimport Utilities from '../../utilities/Utilities';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport Package, { IResolveOrCreateResult, PackageDependencyKind } from './Package';\r\nimport PackageLookup from './PackageLookup';\r\n\r\ninterface IQueueItem {\r\n  // A project from somewhere under \"common/temp/node_modules\"\r\n  commonPackage: Package;\r\n\r\n  // A symlinked virtual package that we will create somewhere under \"this-project/node_modules\"\r\n  localPackage: Package;\r\n\r\n  // If we encounter a dependency listed in cyclicDependencyProjects, this will be set to the root\r\n  // of the localPackage subtree where we will stop creating local links.\r\n  cyclicSubtreeRoot: Package | undefined;\r\n}\r\n\r\nenum SymlinkKind {\r\n  File,\r\n  Directory\r\n}\r\n\r\nexport default class LinkManager {\r\n  private _rushConfiguration: RushConfiguration;\r\n\r\n  private static _createSymlink(linkTarget: string, linkSource: string, symlinkKind: SymlinkKind): void {\r\n    if (symlinkKind === SymlinkKind.Directory) {\r\n      // For directories, we use a Windows \"junction\".  On Unix, this produces a regular symlink.\r\n      fsx.symlinkSync(linkTarget, linkSource, 'junction');\r\n    } else {\r\n      if (process.platform === 'win32') {\r\n        // For files, we use a Windows \"hard link\", because creating a symbolic link requires\r\n        // administrator permission.\r\n        fsx.linkSync(linkTarget, linkSource);\r\n      } else {\r\n        // However hard links seem to cause build failures on Mac, so for all other operating systems\r\n        // we use symbolic links for this case.\r\n        fsx.symlinkSync(linkTarget, linkSource, 'file');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is a helper function used by createSymlinksForTopLevelProject().\r\n   * It will recursively creates symlinked folders corresponding to each of the\r\n   * Package objects in the provided tree.\r\n   */\r\n  private static _createSymlinksForDependencies(localPackage: Package): void {\r\n    const localModuleFolder: string = path.join(localPackage.folderPath, 'node_modules');\r\n\r\n    if (!localPackage.symlinkTargetFolderPath) {\r\n      // Program bug\r\n      throw Error('localPackage.symlinkTargetFolderPath was not assigned');\r\n    }\r\n\r\n    // This is special case for when localPackage.name has the form '@scope/name',\r\n    // in which case we need to create the '@scope' folder first.\r\n    const parentFolderPath: string = path.dirname(localPackage.folderPath);\r\n    if (parentFolderPath && parentFolderPath !== localPackage.folderPath) {\r\n      if (!fsx.existsSync(parentFolderPath)) {\r\n        Utilities.createFolderWithRetry(parentFolderPath);\r\n      }\r\n    }\r\n\r\n    if (localPackage.children.length === 0) {\r\n      // If there are no children, then we can symlink the entire folder\r\n      LinkManager._createSymlink(localPackage.symlinkTargetFolderPath, localPackage.folderPath, SymlinkKind.Directory);\r\n    } else {\r\n      // If there are children, then we need to symlink each item in the folder individually\r\n      Utilities.createFolderWithRetry(localPackage.folderPath);\r\n\r\n      for (const filename of fsx.readdirSync(localPackage.symlinkTargetFolderPath)) {\r\n        if (filename.toLowerCase() !== 'node_modules') {\r\n          // Create the symlink\r\n          let symlinkKind: SymlinkKind = SymlinkKind.File;\r\n\r\n          const linkSource: string = path.join(localPackage.folderPath, filename);\r\n          let linkTarget: string = path.join(localPackage.symlinkTargetFolderPath, filename);\r\n\r\n          const linkStats: fsx.Stats = fsx.lstatSync(linkTarget);\r\n\r\n          if (linkStats.isSymbolicLink()) {\r\n            const targetStats: fsx.Stats = fsx.statSync(linkTarget);\r\n            if (targetStats.isDirectory()) {\r\n              // Neither a junction nor a directory-symlink can have a directory-symlink\r\n              // as its target; instead, we must obtain the real physical path.\r\n              // A junction can link to another junction.  Unfortunately, the node 'fs' API\r\n              // lacks the ability to distinguish between a junction and a directory-symlink\r\n              // (even though it has the ability to create them both), so the safest policy\r\n              // is to always make a junction and always to the real physical path.\r\n              linkTarget = fsx.realpathSync(linkTarget);\r\n              symlinkKind = SymlinkKind.Directory;\r\n            }\r\n          } else if (linkStats.isDirectory()) {\r\n            symlinkKind = SymlinkKind.Directory;\r\n          }\r\n\r\n          LinkManager._createSymlink(linkTarget, linkSource, symlinkKind);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (localPackage.children.length > 0) {\r\n      Utilities.createFolderWithRetry(localModuleFolder);\r\n\r\n      for (const child of localPackage.children) {\r\n        LinkManager._createSymlinksForDependencies(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For a Package object that represents a top-level Rush project folder\r\n   * (i.e. with source code that we will be building), this clears out its\r\n   * node_modules folder and then recursively creates all the symlinked folders.\r\n   */\r\n  private static _createSymlinksForTopLevelProject(localPackage: Package): void {\r\n    const localModuleFolder: string = path.join(localPackage.folderPath, 'node_modules');\r\n\r\n    // Sanity check\r\n    if (localPackage.parent) {\r\n      throw new Error('The provided package is not a top-level project');\r\n    }\r\n\r\n    // The root-level folder is the project itself, so we simply delete its node_modules\r\n    // to start clean\r\n    console.log('Purging ' + localModuleFolder);\r\n    Utilities.dangerouslyDeletePath(localModuleFolder);\r\n\r\n    if (localPackage.children.length > 0) {\r\n      Utilities.createFolderWithRetry(localModuleFolder);\r\n\r\n      for (const child of localPackage.children) {\r\n        LinkManager._createSymlinksForDependencies(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n  }\r\n\r\n  /**\r\n   * Creates node_modules symlinks for all Rush projects defined in the RushConfiguration.\r\n   * @param force - Normally the operation will be skipped if the links are already up to date;\r\n   *   if true, this option forces the links to be recreated.\r\n   */\r\n  public createSymlinksForProjects(force: boolean): Promise<void> {\r\n    return new Promise<void>((resolve: () => void, reject: (reason: Error) => void): void => {\r\n      if (!force) {\r\n        if (fsx.existsSync(this._rushConfiguration.rushLinkJsonFilename)) {\r\n          console.log(colors.green(`Skipping linking -- everything is already up to date.`));\r\n          resolve();\r\n          return;\r\n        }\r\n      }\r\n\r\n      console.log('Linking projects together...');\r\n      const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n      // Delete the flag file if it exists; if we get interrupted, this will ensure that\r\n      // a full \"rush link\" is required next time\r\n      Utilities.deleteFile(this._rushConfiguration.rushLinkJsonFilename);\r\n\r\n      readPackageTree(this._rushConfiguration.commonTempFolder,\r\n        (error: Error, npmPackage: readPackageTree.PackageNode) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          try {\r\n            const commonRootPackage: Package = Package.createFromNpm(npmPackage);\r\n\r\n            const commonPackageLookup: PackageLookup = new PackageLookup();\r\n            commonPackageLookup.loadTree(commonRootPackage);\r\n\r\n            const rushLinkJson: IRushLinkJson = { localLinks: {} };\r\n\r\n            for (const rushProject of this._rushConfiguration.projects) {\r\n              console.log(os.EOL + 'LINKING: ' + rushProject.packageName);\r\n              this._linkProject(rushProject, commonRootPackage, commonPackageLookup, rushLinkJson);\r\n            }\r\n\r\n            console.log(`Writing \"${this._rushConfiguration.rushLinkJsonFilename}\"`);\r\n            JsonFile.save(rushLinkJson, this._rushConfiguration.rushLinkJsonFilename);\r\n\r\n            stopwatch.stop();\r\n            console.log(os.EOL + colors.green(`Linking finished successfully. (${stopwatch.toString()})`));\r\n            console.log(os.EOL + 'Next you should probably run: \"rush rebuild\"');\r\n\r\n            resolve();\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is called once for each local project from Rush.json.\r\n   * @param project             The local project that we will create symlinks for\r\n   * @param commonRootPackage   The common/temp/package.json package\r\n   * @param commonPackageLookup A dictionary for finding packages under common/temp/node_modules\r\n   * @param rushConfiguration   The rush.json file contents\r\n   * @param rushLinkJson        The common/temp/rush-link.json output file\r\n   * @param options             Command line options for \"rush link\"\r\n   */\r\n  private _linkProject(\r\n    project: RushConfigurationProject,\r\n    commonRootPackage: Package,\r\n    commonPackageLookup: PackageLookup,\r\n    rushLinkJson: IRushLinkJson): void {\r\n\r\n    let commonProjectPackage: Package | undefined = commonRootPackage.getChildByName(project.tempProjectName);\r\n    if (!commonProjectPackage) {\r\n      // Normally we would expect the temp project to have been installed into the common\\node_modules\r\n      // folder.  However, if it was recently added, \"rush install\" doesn't technically require\r\n      // this, as long as its dependencies can be found at the root of the NPM shrinkwrap file.\r\n      // This avoids the need to run \"rush generate\" unnecessarily.\r\n\r\n      // Example: \"project1\"\r\n      const unscopedTempProjectName: string = Utilities.parseScopedPackageName(project.tempProjectName).name;\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\r\n      const extractedFolder: string = path.join(this._rushConfiguration.commonTempFolder,\r\n        RushConstants.rushTempProjectsFolderName, unscopedTempProjectName);\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1.tgz\"\r\n      const tarballFile: string = path.join(this._rushConfiguration.commonTempFolder,\r\n        RushConstants.rushTempProjectsFolderName, unscopedTempProjectName + '.tgz');\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\\package.json\"\r\n      const packageJsonFilename: string = path.join(extractedFolder, 'package', 'package.json');\r\n\r\n      Utilities.createFolderWithRetry(extractedFolder);\r\n      tar.extract({\r\n        cwd: extractedFolder,\r\n        file: tarballFile,\r\n        sync: true\r\n      });\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1\"\r\n      const installFolderName: string = path.join(this._rushConfiguration.commonTempFolder,\r\n        RushConstants.nodeModulesFolderName, RushConstants.rushTempNpmScope, unscopedTempProjectName);\r\n\r\n      commonProjectPackage = Package.createVirtualTempPackage(packageJsonFilename, installFolderName);\r\n\r\n      // remove the extracted tarball contents\r\n      fsx.removeSync(packageJsonFilename);\r\n      fsx.removeSync(extractedFolder);\r\n\r\n      commonRootPackage.addChild(commonProjectPackage);\r\n    }\r\n\r\n    // TODO: Validate that the project's package.json still matches the common folder\r\n    const localProjectPackage: Package = Package.createLinkedPackage(\r\n      project.packageJson.name,\r\n      commonProjectPackage.version,\r\n      commonProjectPackage.dependencies,\r\n      project.projectFolder\r\n    );\r\n\r\n    const queue: IQueueItem[] = [];\r\n    queue.push({\r\n      commonPackage: commonProjectPackage,\r\n      localPackage: localProjectPackage,\r\n      cyclicSubtreeRoot: undefined\r\n    });\r\n\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n      const queueItem: IQueueItem | undefined = queue.shift();\r\n      if (!queueItem) {\r\n        break;\r\n      }\r\n\r\n      // A project from somewhere under \"common/temp/node_modules\"\r\n      const commonPackage: Package = queueItem.commonPackage;\r\n\r\n      // A symlinked virtual package somewhere under \"this-project/node_modules\",\r\n      // where \"this-project\" corresponds to the \"project\" parameter for linkProject().\r\n      const localPackage: Package = queueItem.localPackage;\r\n\r\n      // If we encounter a dependency listed in cyclicDependencyProjects, this will be set to the root\r\n      // of the localPackage subtree where we will stop creating local links.\r\n      const cyclicSubtreeRoot: Package | undefined = queueItem.cyclicSubtreeRoot;\r\n\r\n      // NOTE: It's important that this traversal follows the dependencies in the Common folder,\r\n      // because for Rush projects this will be the union of\r\n      // devDependencies / dependencies / optionalDependencies.\r\n      for (const dependency of commonPackage.dependencies) {\r\n        let startingCyclicSubtree: boolean = false;\r\n\r\n        // Should this be a \"local link\" to a top-level Rush project (i.e. versus a regular link\r\n        // into the Common folder)?\r\n        const matchedRushPackage: RushConfigurationProject | undefined =\r\n          this._rushConfiguration.getProjectByName(dependency.name);\r\n\r\n        if (matchedRushPackage) {\r\n          const matchedVersion: string = matchedRushPackage.packageJson.version;\r\n\r\n          // The dependency name matches an Rush project, but are there any other reasons not\r\n          // to create a local link?\r\n          if (cyclicSubtreeRoot) {\r\n            // DO NOT create a local link, because this is part of an existing\r\n            // cyclicDependencyProjects subtree\r\n          } else if (project.cyclicDependencyProjects.has(dependency.name)) {\r\n            // DO NOT create a local link, because we are starting a new\r\n            // cyclicDependencyProjects subtree\r\n            startingCyclicSubtree = true;\r\n          } else if (dependency.kind !== PackageDependencyKind.LocalLink\r\n            && !semver.satisfies(matchedVersion, dependency.versionRange)) {\r\n            // DO NOT create a local link, because the local project's version isn't SemVer compatible.\r\n\r\n            // (Note that in order to make version bumping work as expected, we ignore SemVer for\r\n            // immediate dependencies of top-level projects, indicated by PackageDependencyKind.LocalLink.\r\n            // Is this wise?)\r\n\r\n            console.log(colors.yellow(`Rush will not locally link ${dependency.name} for ${localPackage.name}`\r\n              + ` because the requested version \"${dependency.versionRange}\" is incompatible`\r\n              + ` with the local version ${matchedVersion}`));\r\n          } else {\r\n            // Yes, it is compatible, so create a symlink to the Rush project.\r\n\r\n            // If the link is coming from our top-level Rush project, then record a\r\n            // build dependency in rush-link.json:\r\n            if (localPackage === localProjectPackage) {\r\n              let localLinks: string[] = rushLinkJson.localLinks[localPackage.name];\r\n              if (!localLinks) {\r\n                localLinks = [];\r\n                rushLinkJson.localLinks[localPackage.name] = localLinks;\r\n              }\r\n              localLinks.push(dependency.name);\r\n            }\r\n\r\n            // Is the dependency already resolved?\r\n            const resolution: IResolveOrCreateResult = localPackage.resolveOrCreate(dependency.name);\r\n\r\n            if (!resolution.found || resolution.found.version !== matchedVersion) {\r\n              // We did not find a suitable match, so place a new local package that\r\n              // symlinks to the Rush project\r\n              const newLocalFolderPath: string = path.join(\r\n                resolution.parentForCreate!.folderPath, 'node_modules', dependency.name);\r\n\r\n              const newLocalPackage: Package = Package.createLinkedPackage(\r\n                dependency.name,\r\n                matchedVersion,\r\n                // Since matchingRushProject does not have a parent, its dependencies are\r\n                // guaranteed to be already fully resolved inside its node_modules folder.\r\n                [],\r\n                newLocalFolderPath\r\n              );\r\n\r\n              newLocalPackage.symlinkTargetFolderPath = matchedRushPackage.projectFolder;\r\n\r\n              resolution.parentForCreate!.addChild(newLocalPackage);\r\n\r\n              // (There are no dependencies, so we do not need to push it onto the queue.)\r\n            }\r\n\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // We can't symlink to an Rush project, so instead we will symlink to a folder\r\n        // under the \"Common\" folder\r\n        const commonDependencyPackage: Package | undefined = commonPackage.resolve(dependency.name);\r\n        if (commonDependencyPackage) {\r\n          // This is the version that was chosen when \"npm install\" ran in the common folder\r\n          const effectiveDependencyVersion: string = commonDependencyPackage.version;\r\n\r\n          // Is the dependency already resolved?\r\n          let resolution: IResolveOrCreateResult;\r\n          if (!cyclicSubtreeRoot || !matchedRushPackage) {\r\n            // Perform normal module resolution.\r\n            resolution = localPackage.resolveOrCreate(dependency.name);\r\n          } else {\r\n            // We are inside a cyclicDependencyProjects subtree (i.e. cyclicSubtreeRoot != undefined),\r\n            // and the dependency is a local project (i.e. matchedRushPackage != undefined), so\r\n            // we use a special module resolution strategy that places everything under the\r\n            // cyclicSubtreeRoot.\r\n            resolution = localPackage.resolveOrCreate(dependency.name, cyclicSubtreeRoot);\r\n          }\r\n\r\n          if (!resolution.found || resolution.found.version !== effectiveDependencyVersion) {\r\n            // We did not find a suitable match, so place a new local package\r\n\r\n            const newLocalFolderPath: string = path.join(\r\n              resolution.parentForCreate!.folderPath, 'node_modules', commonDependencyPackage.name);\r\n\r\n            const newLocalPackage: Package = Package.createLinkedPackage(\r\n              commonDependencyPackage.name,\r\n              commonDependencyPackage.version,\r\n              commonDependencyPackage.dependencies,\r\n              newLocalFolderPath\r\n            );\r\n\r\n            const commonPackageFromLookup: Package | undefined =\r\n              commonPackageLookup.getPackage(newLocalPackage.nameAndVersion);\r\n            if (!commonPackageFromLookup) {\r\n              throw Error(`The ${localPackage.name}@${localPackage.version} package was not found`\r\n                + ` in the common folder`);\r\n            }\r\n            newLocalPackage.symlinkTargetFolderPath = commonPackageFromLookup.folderPath;\r\n\r\n            let newCyclicSubtreeRoot: Package | undefined = cyclicSubtreeRoot;\r\n            if (startingCyclicSubtree) {\r\n              // If we are starting a new subtree, then newLocalPackage will be its root\r\n              // NOTE: cyclicSubtreeRoot is guaranteed to be undefined here, since we never start\r\n              // a new tree inside an existing tree\r\n              newCyclicSubtreeRoot = newLocalPackage;\r\n            }\r\n\r\n            resolution.parentForCreate!.addChild(newLocalPackage);\r\n            queue.push({\r\n              commonPackage: commonDependencyPackage,\r\n              localPackage: newLocalPackage,\r\n              cyclicSubtreeRoot: newCyclicSubtreeRoot\r\n            });\r\n          }\r\n        } else {\r\n          if (dependency.kind !== PackageDependencyKind.Optional) {\r\n            throw Error(`The dependency \"${dependency.name}\" needed by \"${localPackage.name}\"`\r\n              + ` was not found the common folder -- do you need to run \"rush generate\"?`);\r\n          } else {\r\n            console.log(colors.yellow('Skipping optional dependency: ' + dependency.name));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // When debugging, you can uncomment this line to dump the data structure\r\n    // to the console:\r\n    // localProjectPackage.printTree();\r\n\r\n    LinkManager._createSymlinksForTopLevelProject(localProjectPackage);\r\n\r\n    // Also symlink the \".bin\" folder\r\n    if (localProjectPackage.children.length > 0) {\r\n      const commonBinFolder: string = path.join(this._rushConfiguration.commonTempFolder, 'node_modules', '.bin');\r\n      const projectBinFolder: string = path.join(localProjectPackage.folderPath, 'node_modules', '.bin');\r\n\r\n      if (fsx.existsSync(commonBinFolder)) {\r\n        LinkManager._createSymlink(commonBinFolder, projectBinFolder, SymlinkKind.Directory);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}