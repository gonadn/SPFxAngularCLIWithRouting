{"version":3,"sources":["cli/utilities/PublishUtilities.ts"],"names":[],"mappings":"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","file":"cli/utilities/PublishUtilities.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * This file contains a set of helper functions that are unit tested and used with the PublishAction,\r\n * which itself it a thin wrapper around these helpers.\r\n */\r\n\r\nimport { EOL } from 'os';\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\n\r\nimport IPackageJson from '../../utilities/IPackageJson';\r\nimport {\r\n  IChangeInfo,\r\n  ChangeType\r\n} from '../../data/ChangeManagement';\r\nimport RushConfigurationProject from '../../data/RushConfigurationProject';\r\nimport Utilities from '../../utilities/Utilities';\r\nimport { execSync } from 'child_process';\r\nimport PrereleaseToken from './PrereleaseToken';\r\nimport ChangeFiles from './ChangeFiles';\r\n\r\nexport interface IChangeInfoHash {\r\n  [key: string]: IChangeInfo;\r\n}\r\n\r\nexport default class PublishUtilities {\r\n  /**\r\n   * Finds change requests in the given folder.\r\n   * @param changesPath Path to the changes folder.\r\n   * @returns Dictionary of all change requests, keyed by package name.\r\n   */\r\n  public static findChangeRequests(\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    changeFiles: ChangeFiles,\r\n    includeCommitDetails?: boolean,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): IChangeInfoHash {\r\n\r\n    const allChanges: IChangeInfoHash = {};\r\n    console.log(`Finding changes in: ${changeFiles.getChangesPath()}`);\r\n\r\n    const files: string[] = changeFiles.getFiles();\r\n\r\n    // Add the minimum changes defined by the change descriptions.\r\n    files.forEach((fullPath: string) => {\r\n      const changeRequest: IChangeInfo = JSON.parse(fsx.readFileSync(fullPath, 'utf8'));\r\n\r\n      if (includeCommitDetails) {\r\n        PublishUtilities._updateCommitDetails(fullPath, changeRequest.changes);\r\n      }\r\n\r\n      for (const change of changeRequest.changes!) {\r\n        PublishUtilities._addChange(change, allChanges, allPackages, prereleaseToken, projectsToExclude);\r\n      }\r\n    });\r\n\r\n    // For each requested package change, ensure downstream dependencies are also updated.\r\n    for (const packageName in allChanges) {\r\n      if (allChanges.hasOwnProperty(packageName)) {\r\n        PublishUtilities._updateDownstreamDependencies(\r\n          allChanges[packageName],\r\n          allChanges,\r\n          allPackages,\r\n          prereleaseToken,\r\n          projectsToExclude\r\n        );\r\n      }\r\n    }\r\n\r\n    // Update orders so that downstreams are marked to come after upstreams.\r\n    for (const packageName in allChanges) {\r\n      if (allChanges.hasOwnProperty(packageName)) {\r\n        const change: IChangeInfo = allChanges[packageName];\r\n        const project: RushConfigurationProject = allPackages.get(packageName)!;\r\n        const pkg: IPackageJson = project.packageJson;\r\n        const deps: string[] = project.downstreamDependencyProjects;\r\n\r\n        // Write the new version expected for the change.\r\n        const skipVersionBump: boolean = PublishUtilities._shouldSkipVersionBump(project,\r\n          prereleaseToken, projectsToExclude);\r\n        if (skipVersionBump) {\r\n          change.newVersion = pkg.version;\r\n        } else {\r\n          change.newVersion = (change.changeType! >= ChangeType.patch) ?\r\n            semver.inc(pkg.version, PublishUtilities._getReleaseType(change.changeType!)) :\r\n            pkg.version;\r\n        }\r\n\r\n        if (deps) {\r\n          for (const depName of deps) {\r\n            const depChange: IChangeInfo = allChanges[depName];\r\n\r\n            if (depChange) {\r\n              depChange.order = Math.max(change.order! + 1, depChange.order!);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return allChanges;\r\n  }\r\n\r\n  /**\r\n   * Given the changes hash, flattens them into a sorted array based on their dependency order.\r\n   * @params allChanges - hash of change requests.\r\n   * @returns Sorted array of change requests.\r\n   */\r\n  public static sortChangeRequests(allChanges: IChangeInfoHash): IChangeInfo[] {\r\n    return Object\r\n      .keys(allChanges)\r\n      .map(key => allChanges[key])\r\n      .sort((a, b) => a.order! < b.order! ? -1 : 1);\r\n  }\r\n\r\n  /**\r\n   * Given a single change request, updates the package json file with updated versions on disk.\r\n   */\r\n  public static updatePackages(\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    shouldCommit: boolean,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): Map<string, IPackageJson> {\r\n    const updatedPackages: Map<string, IPackageJson> = new Map<string, IPackageJson>();\r\n\r\n    Object.keys(allChanges).forEach(packageName => {\r\n      const updatedPackage: IPackageJson = PublishUtilities._writePackageChanges(\r\n        allChanges[packageName],\r\n        allChanges,\r\n        allPackages,\r\n        shouldCommit,\r\n        prereleaseToken,\r\n        projectsToExclude);\r\n      updatedPackages.set(updatedPackage.name, updatedPackage);\r\n    });\r\n\r\n    return updatedPackages;\r\n  }\r\n\r\n  /**\r\n   * Returns the generated tagname to use for a published commit, given package name and version.\r\n   */\r\n  public static createTagname(packageName: string, version: string): string {\r\n    return packageName + '_v' + version;\r\n  }\r\n\r\n  public static isRangeDependency(version: string): boolean {\r\n    const LOOSE_PKG_REGEX: RegExp = />=?(?:\\d+\\.){2}\\d+(\\-[0-9A-Za-z-.]*)?\\s+<(?:\\d+\\.){2}\\d+/;\r\n\r\n    return LOOSE_PKG_REGEX.test(version);\r\n  }\r\n\r\n  public static getEnvArgs(): { [key: string]: string } {\r\n    const env: { [key: string]: string } = {};\r\n\r\n    // Copy existing process.env values (for nodist)\r\n    Object.keys(process.env).forEach((key: string) => {\r\n      env[key] = process.env[key];\r\n    });\r\n    return env;\r\n  }\r\n\r\n  public static execCommand(\r\n    shouldExecute: boolean,\r\n    command: string,\r\n    args: string[] = [],\r\n    workingDirectory: string = process.cwd(),\r\n    env?: { [key: string]: string }\r\n  ): void {\r\n\r\n    let relativeDirectory: string = path.relative(process.cwd(), workingDirectory);\r\n    const envArgs: { [key: string]: string } = PublishUtilities.getEnvArgs();\r\n\r\n    if (relativeDirectory) {\r\n      relativeDirectory = `(${relativeDirectory})`;\r\n    }\r\n\r\n    if (env) {\r\n      Object.keys(env).forEach((name: string) => envArgs[name] = env[name]);\r\n    }\r\n\r\n    console.log(\r\n      `${EOL}* ${shouldExecute ? 'EXECUTING' : 'DRYRUN'}: ${command} ${args.join(' ')} ${relativeDirectory}`\r\n    );\r\n\r\n    if (shouldExecute) {\r\n      Utilities.executeCommand(\r\n        command,\r\n        args,\r\n        workingDirectory,\r\n        false,\r\n        env);\r\n    }\r\n  }\r\n\r\n  public static getNewDependencyVersion(dependencies: { [key: string]: string; },\r\n    dependencyName: string,\r\n    newProjectVersion: string\r\n  ): string {\r\n    const currentDependencyVersion: string = dependencies[dependencyName];\r\n    let newDependencyVersion: string;\r\n\r\n    if (PublishUtilities.isRangeDependency(currentDependencyVersion)) {\r\n      newDependencyVersion = PublishUtilities._getNewRangeDependency(newProjectVersion);\r\n    } else if (currentDependencyVersion.lastIndexOf('~', 0) === 0) {\r\n      newDependencyVersion = '~' + newProjectVersion;\r\n    } else if (currentDependencyVersion.lastIndexOf('^', 0) === 0) {\r\n      newDependencyVersion = '^' + newProjectVersion;\r\n    } else {\r\n      newDependencyVersion = newProjectVersion;\r\n    }\r\n    return newDependencyVersion;\r\n  }\r\n\r\n  private static _getReleaseType(changeType: ChangeType): semver.ReleaseType {\r\n    switch (changeType) {\r\n      case ChangeType.major:\r\n        return 'major';\r\n      case ChangeType.minor:\r\n        return 'minor';\r\n      case ChangeType.patch:\r\n        return 'patch';\r\n      default:\r\n        throw new Error(`Wrong change type ${changeType}`);\r\n    }\r\n  }\r\n\r\n  private static _getNewRangeDependency(newVersion: string): string {\r\n    let upperLimit: string = newVersion;\r\n    if (semver.prerelease(newVersion)) {\r\n      // Remove the prerelease first, then bump major.\r\n      upperLimit = semver.inc(newVersion, 'patch');\r\n    }\r\n    upperLimit = semver.inc(upperLimit, 'major');\r\n\r\n    return `>=${newVersion} <${upperLimit}`;\r\n  }\r\n\r\n  private static _shouldSkipVersionBump(project: RushConfigurationProject,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): boolean {\r\n    // Suffix does not bump up the version.\r\n    // Excluded projects do not bump up version.\r\n    return prereleaseToken && prereleaseToken.isSuffix ||\r\n      projectsToExclude && projectsToExclude.has(project.packageName) ||\r\n      !project.shouldPublish;\r\n  }\r\n\r\n  private static _updateCommitDetails(filename: string, changes: IChangeInfo[] | undefined): void {\r\n    try {\r\n      const fileLog: string = execSync('git log -n 1 ' + filename, { cwd: path.dirname(filename) }).toString();\r\n      const author: string = fileLog.match(/Author: (.*)/)![1];\r\n      const commit: string = fileLog.match(/commit (.*)/)![1];\r\n\r\n      changes!.forEach(change => {\r\n        change.author = author;\r\n        change.commit = commit;\r\n      });\r\n    } catch (e) { /* no-op, best effort. */ }\r\n  }\r\n\r\n  private static _writePackageChanges(\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    shouldCommit: boolean,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): IPackageJson {\r\n\r\n    const project: RushConfigurationProject = allPackages.get(change.packageName)!;\r\n    const pkg: IPackageJson = project.packageJson;\r\n\r\n    const shouldSkipVersionBump: boolean = !project.shouldPublish ||\r\n      !!projectsToExclude && projectsToExclude.has(change.packageName);\r\n\r\n    const newVersion: string = shouldSkipVersionBump ? pkg.version :\r\n      PublishUtilities._getChangeInfoNewVersion(change, prereleaseToken);\r\n\r\n    if (!shouldSkipVersionBump) {\r\n      console.log(\r\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: ${ChangeType[change.changeType!]} update ` +\r\n        `for ${change.packageName} to ${newVersion}`\r\n      );\r\n    } else {\r\n      console.log(\r\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: update ` + `for ${change.packageName} at ${newVersion}`\r\n      );\r\n    }\r\n\r\n    const packagePath: string = path.join(project.projectFolder, 'package.json');\r\n\r\n    pkg.version = newVersion;\r\n\r\n    // Update the package's dependencies.\r\n    PublishUtilities._updateDependencies(pkg.name, pkg.dependencies, allChanges, allPackages,\r\n      prereleaseToken, projectsToExclude);\r\n    // Update the package's dev dependencies.\r\n    PublishUtilities._updateDependencies(pkg.name, pkg.devDependencies, allChanges, allPackages,\r\n      prereleaseToken, projectsToExclude);\r\n\r\n    change.changes!.forEach(subChange => {\r\n      if (subChange.comment) {\r\n        console.log(` - [${ChangeType[subChange.changeType!]}] ${subChange.comment}`);\r\n      }\r\n    });\r\n\r\n    if (shouldCommit) {\r\n      fsx.writeFileSync(packagePath, JSON.stringify(pkg, undefined, 2), { encoding: 'utf8' });\r\n    }\r\n    return pkg;\r\n  }\r\n\r\n  private static _isCyclicDependency(\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    packageName: string,\r\n    dependencyName: string\r\n  ): boolean {\r\n    const packageConfig: RushConfigurationProject | undefined = allPackages.get(packageName);\r\n    return !!packageConfig && packageConfig.cyclicDependencyProjects.has(dependencyName);\r\n  }\r\n\r\n  private static _updateDependencies(\r\n    packageName: string,\r\n    dependencies: { [key: string]: string; } | undefined,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    prereleaseToken: PrereleaseToken | undefined,\r\n    projectsToExclude?: Set<string>\r\n  ): void {\r\n\r\n    if (dependencies) {\r\n      Object.keys(dependencies).forEach(depName => {\r\n        if (!PublishUtilities._isCyclicDependency(allPackages, packageName, depName)) {\r\n          const depChange: IChangeInfo = allChanges[depName];\r\n          if (!depChange) {\r\n            return;\r\n          }\r\n          const depProject: RushConfigurationProject = allPackages.get(depName)!;\r\n\r\n          if (!depProject.shouldPublish || projectsToExclude && projectsToExclude.has(depName)) {\r\n            // No version change.\r\n            return;\r\n          } else if (depChange && prereleaseToken && prereleaseToken.hasValue) {\r\n            // TODO: treat prerelease version the same as non-prerelease version.\r\n            // For prelease, the newVersion needs to be appended with prerelease name.\r\n            // And dependency should specify the specific prerelease version.\r\n            dependencies[depName] = PublishUtilities._getChangeInfoNewVersion(depChange, prereleaseToken);\r\n          } else if (depChange && depChange.changeType! >= ChangeType.patch) {\r\n            PublishUtilities._updateDependencyVersion(\r\n              packageName,\r\n              dependencies,\r\n              depName,\r\n              depChange,\r\n              allChanges,\r\n              allPackages);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the new version from the ChangeInfo.\r\n   * The value of newVersion in ChangeInfo remains unchanged when the change type is dependency,\r\n   * However, for pre-release build, it won't pick up the updated pre-released dependencies. That is why\r\n   * this function should return a pre-released patch for that case.\r\n   */\r\n  private static _getChangeInfoNewVersion(\r\n    change: IChangeInfo,\r\n    prereleaseToken: PrereleaseToken | undefined\r\n  ): string {\r\n    let newVersion: string = change.newVersion!;\r\n    if (prereleaseToken && prereleaseToken.hasValue) {\r\n      if (prereleaseToken.isPrerelease && change.changeType === ChangeType.dependency) {\r\n        newVersion = semver.inc(newVersion, 'patch');\r\n      }\r\n      return `${newVersion}-${prereleaseToken.name}`;\r\n    } else {\r\n      return newVersion;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the given change to the allChanges map.\r\n   *\r\n   * @returns true if the change caused the dependency change type to increase.\r\n   */\r\n  private static _addChange(\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): boolean {\r\n    let hasChanged: boolean = false;\r\n    const packageName: string = change.packageName;\r\n    const project: RushConfigurationProject | undefined = allPackages.get(packageName);\r\n\r\n    if (!project) {\r\n      console.log(`The package ${packageName} was requested for publishing but ` +\r\n        `does not exist. Skip this change.`);\r\n      return false;\r\n    }\r\n\r\n    const pkg: IPackageJson = project.packageJson;\r\n    let currentChange: IChangeInfo;\r\n\r\n    // If the given change does not have a changeType, derive it from the \"type\" string.\r\n    if (change.changeType === undefined) {\r\n      change.changeType = ChangeType[change.type!];\r\n    }\r\n\r\n    if (!allChanges[packageName]) {\r\n      hasChanged = true;\r\n      currentChange = allChanges[packageName] = {\r\n        packageName,\r\n        changeType: change.changeType,\r\n        order: 0,\r\n        changes: [change]\r\n      };\r\n    } else {\r\n      currentChange = allChanges[packageName];\r\n\r\n      const oldChangeType: ChangeType = currentChange.changeType!;\r\n\r\n      currentChange.changeType = Math.max(currentChange.changeType!, change.changeType!);\r\n      currentChange.changes!.push(change);\r\n\r\n      hasChanged = hasChanged || (oldChangeType !== currentChange.changeType);\r\n    }\r\n    const skipVersionBump: boolean = PublishUtilities._shouldSkipVersionBump(project,\r\n      prereleaseToken, projectsToExclude);\r\n\r\n    if (skipVersionBump) {\r\n      currentChange.newVersion = pkg.version;\r\n      hasChanged = false;\r\n      currentChange.changeType = ChangeType.none;\r\n    } else {\r\n      currentChange.newVersion = change.changeType! >= ChangeType.patch ?\r\n        semver.inc(pkg.version, PublishUtilities._getReleaseType(currentChange.changeType!)) :\r\n        pkg.version;\r\n      currentChange.newRangeDependency = PublishUtilities._getNewRangeDependency(currentChange.newVersion);\r\n    }\r\n    return hasChanged;\r\n  }\r\n\r\n  private static _updateDownstreamDependencies(\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    prereleaseToken: PrereleaseToken | undefined,\r\n    projectsToExclude?: Set<string>\r\n  ): void {\r\n\r\n    const packageName: string = change.packageName;\r\n    const downstreamNames: string[] = allPackages.get(packageName)!.downstreamDependencyProjects;\r\n\r\n    // Iterate through all downstream dependencies for the package.\r\n    if (downstreamNames) {\r\n      if ((change.changeType! >= ChangeType.patch) ||\r\n        (prereleaseToken && prereleaseToken.hasValue)) {\r\n        for (const depName of downstreamNames) {\r\n          const pkg: IPackageJson = allPackages.get(depName)!.packageJson;\r\n\r\n          PublishUtilities._updateDownstreamDependency(pkg.name, pkg.dependencies, change, allChanges, allPackages,\r\n            prereleaseToken, projectsToExclude);\r\n          PublishUtilities._updateDownstreamDependency(pkg.name, pkg.devDependencies, change, allChanges, allPackages,\r\n            prereleaseToken, projectsToExclude);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _updateDownstreamDependency(\r\n    parentPackageName: string,\r\n    dependencies: { [packageName: string]: string } | undefined,\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    prereleaseToken: PrereleaseToken | undefined,\r\n    projectsToExclude?: Set<string>\r\n  ): void {\r\n\r\n    if (dependencies && dependencies[change.packageName]) {\r\n      const requiredVersion: string = dependencies[change.packageName];\r\n      const alwaysUpdate: boolean = !!prereleaseToken && prereleaseToken.hasValue &&\r\n        !allChanges.hasOwnProperty(parentPackageName);\r\n\r\n      // If the version range exists and has not yet been updated to this version, update it.\r\n      if (requiredVersion !== change.newRangeDependency || alwaysUpdate) {\r\n\r\n        // Either it already satisfies the new version, or doesn't.\r\n        // If not, the downstream dep needs to be republished.\r\n        const changeType: ChangeType = semver.satisfies(change.newVersion!, requiredVersion) ?\r\n          ChangeType.dependency :\r\n          ChangeType.patch;\r\n\r\n        const hasChanged: boolean = PublishUtilities._addChange({\r\n          packageName: parentPackageName,\r\n          changeType\r\n        }, allChanges, allPackages, prereleaseToken, projectsToExclude);\r\n\r\n        if (hasChanged || alwaysUpdate) {\r\n          // Only re-evaluate downstream dependencies if updating the parent package's dependency\r\n          // caused a version bump.\r\n          PublishUtilities._updateDownstreamDependencies(\r\n            allChanges[parentPackageName],\r\n            allChanges,\r\n            allPackages,\r\n            prereleaseToken,\r\n            projectsToExclude\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _updateDependencyVersion(\r\n    packageName: string,\r\n    dependencies: { [key: string]: string; },\r\n    dependencyName: string,\r\n    dependencyChange: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>\r\n  ): void {\r\n    const currentDependencyVersion: string = dependencies[dependencyName];\r\n\r\n    dependencies[dependencyName] = PublishUtilities.getNewDependencyVersion(\r\n      dependencies,\r\n      dependencyName,\r\n      dependencyChange.newVersion!\r\n    );\r\n\r\n    // Add dependency version update comment.\r\n    PublishUtilities._addChange(\r\n      {\r\n        packageName: packageName,\r\n        changeType: ChangeType.dependency,\r\n        comment:\r\n        `Updating dependency \"${dependencyName}\" from \\`${currentDependencyVersion}\\`` +\r\n        ` to \\`${dependencies[dependencyName]}\\``\r\n      },\r\n      allChanges,\r\n      allPackages\r\n    );\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}