"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CustomRushAction_1 = require("./CustomRushAction");
/**
 * Using the custom command line configuration, generates a set of
 * rush actions that are then registered to the command line.
 */
class CustomCommandFactory {
    static createCommands(parser, commandLineConfig) {
        const customActions = new Map();
        const documentationForBuild = 'The Rush build command assumes that the package.json file for each'
            + ' project contains scripts for "npm run clean" and "npm run test".  It invokes'
            + ' these commands to build each project.  Projects are built in parallel where'
            + ' possible, but always respecting the dependency graph for locally linked projects.'
            + ' The number of simultaneous processes will be based on the number of machine cores'
            + ' unless overridden by the --parallelism flag.';
        // always create a build and a rebuild command
        customActions.set('build', new CustomRushAction_1.CustomRushAction(parser, {
            actionVerb: 'build',
            summary: '(EXPERIMENTAL) Build all projects that haven\'t been built, or have changed since they were last '
                + 'built.',
            documentation: documentationForBuild
        }, true));
        customActions.set('rebuild', new CustomRushAction_1.CustomRushAction(parser, {
            actionVerb: 'rebuild',
            summary: 'Clean and rebuild the entire set of projects',
            documentation: documentationForBuild
        }, true));
        if (commandLineConfig) {
            // Register each custom command
            commandLineConfig.commands.forEach((command) => {
                if (customActions.get(command.name)) {
                    throw new Error(`Cannot define two custom actions with the same name: "${command.name}"`);
                }
                customActions.set(command.name, new CustomRushAction_1.CustomRushAction(parser, {
                    actionVerb: command.name,
                    summary: command.summary,
                    documentation: command.documentation || command.summary
                }, command.parallelized));
            });
            // Associate each custom option to a command
            commandLineConfig.options.forEach((customOption, longName) => {
                customOption.associatedCommands.forEach((associatedCommand) => {
                    const customAction = customActions.get(associatedCommand);
                    if (customAction) {
                        customAction.addCustomOption(longName, customOption);
                    }
                    else {
                        throw new Error(`Cannot find custom command "${associatedCommand}" associated with`
                            + ` custom option "${longName}".`);
                    }
                });
            });
        }
        return customActions;
    }
}
exports.CustomCommandFactory = CustomCommandFactory;

//# sourceMappingURL=CustomCommandFactory.js.map
