{"version":3,"sources":["cli/actions/ChangeAction.ts"],"names":[],"mappings":"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","file":"cli/actions/ChangeAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as child_process from 'child_process';\r\nimport * as colors from 'colors';\r\n\r\nimport inquirer = require('inquirer');\r\n\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport RushConfigurationProject from '../../data/RushConfigurationProject';\r\nimport {\r\n  IChangeFile,\r\n  IChangeInfo\r\n} from '../../data/ChangeManagement';\r\nimport VersionControl from '../../utilities/VersionControl';\r\nimport { ChangeFile } from '../../data/ChangeFile';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\nimport ChangeFiles from '../utilities/ChangeFiles';\r\nimport {\r\n  VersionPolicy,\r\n  IndividualVersionPolicy,\r\n  VersionPolicyDefinitionName\r\n} from '../../data/VersionPolicy';\r\n\r\nexport default class ChangeAction extends BaseRushAction {\r\n  private _parser: RushCommandLineParser;\r\n  private _sortedProjectList: string[];\r\n  private _changeFileData: Map<string, IChangeFile>;\r\n  private _changeComments: Map<string, string[]>;\r\n  private _verifyParameter: CommandLineFlagParameter;\r\n  private _targetBranchParameter: CommandLineStringParameter;\r\n  private _targetBranchName: string;\r\n\r\n  private _prompt: inquirer.PromptModule;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionVerb: 'change',\r\n      summary: 'Records changes made to projects, indicating how the package version number should be bumped ' +\r\n        'for the next publish.',\r\n      documentation: ['Asks a series of questions and then generates a <branchname>-<timstamp>.json file ' +\r\n        'in the common folder. The `publish` command will consume these files and perform the proper ' +\r\n        'version bumps. Note these changes will eventually be published in a changelog.md file in each package.',\r\n        '',\r\n        'The possible types of changes are: ',\r\n        '',\r\n        'MAJOR - these are breaking changes that are not backwards compatible. ' +\r\n        'Examples are: renaming a public class, adding/removing a non-optional ' +\r\n        'parameter from a public API, or renaming an variable or function that ' +\r\n        'is exported.',\r\n        '',\r\n        'MINOR - these are changes that are backwards compatible (but not ' +\r\n        'forwards compatible). Examples are: adding a new public API or adding an ' +\r\n        'optional parameter to a public API',\r\n        '',\r\n        'PATCH - these are changes that are backwards and forwards compatible. ' +\r\n        'Examples are: Modifying a private API or fixing a bug in the logic ' +\r\n        'of how an existing API works.',\r\n        ''].join(os.EOL)\r\n    });\r\n    this._parser = parser;\r\n  }\r\n\r\n  public onDefineParameters(): void {\r\n    this._verifyParameter = this.defineFlagParameter({\r\n      parameterLongName: '--verify',\r\n      parameterShortName: '-v',\r\n      description: 'Verify the change file has been generated and that it is a valid JSON file'\r\n    });\r\n    this._targetBranchParameter = this.defineStringParameter({\r\n      parameterLongName: '--target-branch',\r\n      parameterShortName: '-b',\r\n      key: 'BRANCH',\r\n      description: 'If this parameter is specified, compare current branch with the target branch to get changes. ' +\r\n        'If this parameter is not specified, the current branch is compared against the \"master\" branch.'\r\n    });\r\n  }\r\n\r\n  public run(): void {\r\n    console.log(`Target branch is ${this._targetBranch}`);\r\n    if (this._verifyParameter.value) {\r\n      return this._verify();\r\n    }\r\n    this._sortedProjectList = this._getChangedPackageNames()\r\n      .sort();\r\n\r\n    if (this._sortedProjectList.length === 0) {\r\n      console.log('No change file is needed.');\r\n      this._warnUncommittedChanges();\r\n      return;\r\n    }\r\n\r\n    this._prompt = inquirer.createPromptModule();\r\n    this._changeFileData = new Map<string, IChangeFile>();\r\n    this._changeComments = ChangeFiles.getChangeComments(this._getChangeFiles(),\r\n      this._sortedProjectList);\r\n\r\n    // We should consider making onExecute either be an async/await or have it return a promise\r\n    this._promptLoop()\r\n      .catch((error: Error) => {\r\n        console.error('There was an error creating the changefile:' + os.EOL + error.toString());\r\n      });\r\n  }\r\n\r\n  private _verify(): void {\r\n    const changedPackages: string[] = this._getChangedPackageNames();\r\n\r\n    if (changedPackages.length > 0) {\r\n      this._validateChangeFile(changedPackages);\r\n    } else {\r\n      console.log('No change is needed.');\r\n    }\r\n  }\r\n\r\n  private get _targetBranch(): string {\r\n    if (!this._targetBranchName) {\r\n      this._targetBranchName = this._targetBranchParameter.value ||\r\n        VersionControl.getRemoteMasterBranch(this.rushConfiguration.repositoryUrl);\r\n    }\r\n    return this._targetBranchName;\r\n  }\r\n\r\n  private _getChangedPackageNames(): string[] {\r\n    const changedFolders: Array<string | undefined> | undefined = VersionControl.getChangedFolders(this._targetBranch);\r\n    if (!changedFolders) {\r\n      return [];\r\n    }\r\n    return this.rushConfiguration.projects\r\n      .filter(project => project.shouldPublish)\r\n      .filter(project => this._hasProjectChanged(changedFolders, project))\r\n      .map(project => project.packageName) as string[];\r\n  }\r\n\r\n  private _validateChangeFile(changedPackages: string[]): void {\r\n    const files: string[] = this._getChangeFiles();\r\n    if (files.length === 0) {\r\n      throw new Error(`No change file is found. Run 'rush change' to generate a change file.`);\r\n    }\r\n    ChangeFiles.validate(files, changedPackages);\r\n  }\r\n\r\n  private _getChangeFiles(): string[] {\r\n    return VersionControl.getChangedFiles(`common/changes/`, this._targetBranch).map(relativePath => {\r\n      return path.join(this.rushConfiguration.rushJsonFolder, relativePath);\r\n    });\r\n  }\r\n\r\n  private _hasProjectChanged(changedFolders: Array<string | undefined>,\r\n    project: RushConfigurationProject): boolean {\r\n    let normalizedFolder: string = project.projectRelativeFolder;\r\n    if (normalizedFolder.charAt(normalizedFolder.length - 1) !== '/') {\r\n      normalizedFolder = normalizedFolder + '/';\r\n    }\r\n    const pathRegex: RegExp = new RegExp(`^${normalizedFolder}`, 'i');\r\n    for (const folder of changedFolders) {\r\n      if (folder && folder.match(pathRegex)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * The main loop which continually asks user for questions about changes until they don't\r\n   * have any more, at which point we collect their email and write the change file.\r\n   */\r\n  private _promptLoop(): Promise<void> {\r\n    // If there are still projects, ask about the next one\r\n    if (this._sortedProjectList.length) {\r\n      return this._askQuestions(this._sortedProjectList.pop()!)\r\n        .then((answers: IChangeInfo) => {\r\n          if (answers) {\r\n            // Save the info into the changefile\r\n            let changeFile: IChangeFile | undefined = this._changeFileData.get(answers.packageName);\r\n            if (!changeFile) {\r\n              changeFile = {\r\n                changes: [],\r\n                packageName: answers.packageName,\r\n                email: undefined\r\n              };\r\n              this._changeFileData.set(answers.packageName, changeFile!);\r\n            }\r\n            changeFile!.changes.push(answers);\r\n          }\r\n          // Continue to loop\r\n          return this._promptLoop();\r\n\r\n        });\r\n    } else {\r\n      this._warnUncommittedChanges();\r\n      // We are done, collect their e-mail\r\n      return this._detectOrAskForEmail().then((email: string) => {\r\n        this._changeFileData.forEach((changeFile: IChangeFile) => {\r\n          changeFile.email = email;\r\n        });\r\n        return this._writeChangeFiles();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asks all questions which are needed to generate changelist for a project.\r\n   */\r\n  private _askQuestions(packageName: string): Promise<IChangeInfo | undefined> {\r\n    console.log(`${os.EOL}${packageName}`);\r\n    const comments: string[] | undefined = this._changeComments.get(packageName);\r\n    if (comments && comments.length) {\r\n      console.log(`Found existing comments:`);\r\n      comments.forEach(comment => {\r\n        console.log(`    > ${comment}`);\r\n      });\r\n      return this._prompt({\r\n        name: 'appendComment',\r\n        type: 'list',\r\n        default: 'skip',\r\n        message: 'Append to existing comments or skip?',\r\n        choices: [\r\n          {\r\n            'name': 'Skip',\r\n            'value': 'skip'\r\n          },\r\n          {\r\n            'name': 'Append',\r\n            'value': 'append'\r\n          }\r\n        ]\r\n      })\r\n      .then(({ appendComment }: { appendComment: 'skip' | 'append' }) => {\r\n        if (appendComment === 'skip') {\r\n          return undefined;\r\n        } else {\r\n          return this._promptForComments(packageName);\r\n        }\r\n      });\r\n    } else {\r\n      return this._promptForComments(packageName);\r\n    }\r\n  }\r\n\r\n  private _promptForComments(packageName: string): Promise<IChangeInfo | undefined> {\r\n    const bumpOptions: { [type: string]: string } = this._getBumpOptions(packageName);\r\n    return this._prompt({\r\n      name: 'comment',\r\n      type: 'input',\r\n      message: `Describe changes, or ENTER if no changes:`\r\n    })\r\n    .then(({ comment }: { comment: string }) => {\r\n      if (Object.keys(bumpOptions).length === 0 || !comment) {\r\n        return {\r\n          comment: comment || '',\r\n          packageName: packageName,\r\n          type: 'none'\r\n        } as IChangeInfo;\r\n      } else {\r\n        return this._prompt({\r\n          choices: Object.keys(bumpOptions).map(option => {\r\n            return {\r\n              'value': option,\r\n              'name': bumpOptions[option]\r\n            };\r\n          }),\r\n          default: 'patch',\r\n          message: 'Select the type of change:',\r\n          name: 'bumpType',\r\n          type: 'list'\r\n        }).then(({ bumpType }: { bumpType: string }) => {\r\n          return {\r\n            packageName: packageName,\r\n            comment: comment,\r\n            type: bumpType\r\n          } as IChangeInfo;\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private _getBumpOptions(packageName: string): {[type: string]: string } {\r\n    const project: RushConfigurationProject | undefined = this.rushConfiguration.getProjectByName(packageName);\r\n    const versionPolicy: VersionPolicy | undefined = project!.versionPolicy;\r\n\r\n    let bumpOptions: { [type: string]: string } = {\r\n      'major': 'major - for changes that break compatibility, e.g. removing an API',\r\n      'minor': 'minor - for backwards compatible changes, e.g. adding a new API',\r\n      'patch': 'patch - for changes that do not affect compatibility, e.g. fixing a bug'\r\n    };\r\n\r\n    if (versionPolicy) {\r\n      if (versionPolicy.definitionName === VersionPolicyDefinitionName.lockStepVersion) {\r\n        // No need to ask for bump types if project is lockstep versioned.\r\n        bumpOptions = {};\r\n      } else if (versionPolicy.definitionName === VersionPolicyDefinitionName.individualVersion) {\r\n        const individualPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n        if (individualPolicy.lockedMajor !== undefined) {\r\n          // tslint:disable-next-line:no-string-literal\r\n          delete bumpOptions['major'];\r\n        }\r\n      }\r\n    }\r\n    return bumpOptions;\r\n  }\r\n\r\n  /**\r\n   * Will determine a user's email by first detecting it from their git config,\r\n   * or will ask for it if it is not found or the git config is wrong.\r\n   */\r\n  private _detectOrAskForEmail(): Promise<string> {\r\n    return this._detectAndConfirmEmail().then((email: string) => {\r\n\r\n      if (email) {\r\n        return Promise.resolve(email);\r\n      } else {\r\n        return this._promptForEmail();\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Detects the user's email address from their git configuration, prompts the user to approve the\r\n   * detected email. It returns undefined if it cannot be detected.\r\n   */\r\n  private _detectAndConfirmEmail(): Promise<string | undefined> {\r\n    let email: string | undefined;\r\n    try {\r\n      email = child_process.execSync('git config user.email')\r\n        .toString()\r\n        .replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n    } catch (err) {\r\n      console.log('There was an issue detecting your git email...');\r\n      email = undefined;\r\n    }\r\n\r\n    if (email) {\r\n      return this._prompt([\r\n        {\r\n          type: 'confirm',\r\n          name: 'isCorrectEmail',\r\n          default: 'Y',\r\n          message: `Is your email address ${email} ?`\r\n        }\r\n      ]).then(({ isCorrectEmail }: { isCorrectEmail: boolean }) => {\r\n        return isCorrectEmail ? email : undefined;\r\n      });\r\n    } else {\r\n      return Promise.resolve(undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asks the user for their e-mail address\r\n   */\r\n  private _promptForEmail(): Promise<string> {\r\n    return this._prompt([\r\n      {\r\n        type: 'input',\r\n        name: 'email',\r\n        message: 'What is your email address?',\r\n        validate: (input: string) => {\r\n          return true; // @todo should be an email\r\n        }\r\n      }\r\n    ])\r\n      .then((answers) => {\r\n        return answers.email;\r\n      });\r\n  }\r\n\r\n  private _warnUncommittedChanges(): void {\r\n    try {\r\n      if (VersionControl.hasUncommittedChanges()) {\r\n        console.log(os.EOL +\r\n          colors.yellow('Warning: You have uncommitted changes, which do not trigger a change entry.'));\r\n      }\r\n    } catch (error) {\r\n      console.log('Ignore the failure of checking uncommitted changes');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes changefile to the common/changes folder. Will prompt for overwrite if file already exists.\r\n   */\r\n  private _writeChangeFiles(): Promise<void> {\r\n    const promises: Promise<void>[] = [];\r\n    this._changeFileData.forEach((changeFile: IChangeFile) => {\r\n      promises.push(this._writeChangeFile(changeFile));\r\n    });\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      Promise.all(promises).then(() => {\r\n        resolve();\r\n      })\r\n      .catch(e => {\r\n        reject(e);\r\n      });\r\n    });\r\n  }\r\n\r\n  private _writeChangeFile(changeFileData: IChangeFile): Promise<void> {\r\n    const output: string = JSON.stringify(changeFileData, undefined, 2);\r\n    const changeFile: ChangeFile = new ChangeFile(changeFileData, this.rushConfiguration);\r\n    const filePath: string = changeFile.generatePath();\r\n\r\n    if (fsx.existsSync(filePath)) {\r\n      // prompt about overwrite\r\n      this._prompt([\r\n        {\r\n          name: 'overwrite',\r\n          type: 'confirm',\r\n          message: `Overwrite ${filePath} ?`\r\n        }\r\n      ]).then(({ overwrite }: { overwrite: string }) => {\r\n        if (overwrite) {\r\n          return this._writeFile(filePath, output);\r\n        } else {\r\n          console.log(`Not overwriting ${filePath}...`);\r\n          return Promise.resolve();\r\n        }\r\n      });\r\n    }\r\n    return this._writeFile(filePath, output);\r\n  }\r\n\r\n  /**\r\n   * Writes a file to disk, ensuring the directory structure up to that point exists\r\n   */\r\n  private _writeFile(fileName: string, output: string): Promise<void> {\r\n    return new Promise<void>((resolve: () => void, reject: (err: Error) => void) => {\r\n      // tslint:disable-next-line:no-any\r\n      fsx.mkdirs(path.dirname(fileName), (err: any) => {\r\n        if (err) {\r\n          reject(err);\r\n        }\r\n        fsx.writeFile(fileName, output, (error: NodeJS.ErrnoException) => {\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            console.log('Created file: ' + fileName);\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}