"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const RushConstants_1 = require("../../RushConstants");
const VersionMismatchFinder_1 = require("../../data/VersionMismatchFinder");
const BaseRushAction_1 = require("./BaseRushAction");
class CheckAction extends BaseRushAction_1.BaseRushAction {
    constructor(parser) {
        super({
            actionVerb: 'check',
            summary: 'Checks each project\'s package.json files and ensures that all dependencies are of the same ' +
                'version throughout the repository.',
            documentation: 'Checks each project\'s package.json files and ensures that all dependencies are of the ' +
                'same version throughout the repository.'
        });
        this._parser = parser;
    }
    onDefineParameters() {
        // abstract
    }
    run() {
        const pinnedVersions = {};
        this.rushConfiguration.pinnedVersions.forEach((version, dependency) => {
            pinnedVersions[dependency] = version;
        });
        this.rushConfiguration.projects.push({
            packageName: RushConstants_1.RushConstants.pinnedVersionsFilename,
            packageJson: { dependencies: pinnedVersions }
        });
        const mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(this.rushConfiguration.projects);
        // Iterate over the list. For any dependency with mismatching versions, print the projects
        mismatchFinder.getMismatches().forEach((dependency) => {
            console.log(colors.yellow(dependency));
            mismatchFinder.getVersionsOfMismatch(dependency).forEach((version) => {
                console.log(`  ${version}`);
                mismatchFinder.getConsumersOfMismatch(dependency, version).forEach((project) => {
                    console.log(`   - ${project}`);
                });
            });
            console.log();
        });
        if (mismatchFinder.numberOfMismatches) {
            console.log(colors.red(`Found ${mismatchFinder.numberOfMismatches} mis-matching dependencies!`));
            process.exit(1);
        }
        else {
            console.log(colors.green(`Found no mis-matching dependencies!`));
        }
    }
}
exports.default = CheckAction;

//# sourceMappingURL=CheckAction.js.map
