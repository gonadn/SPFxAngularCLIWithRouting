{"version":3,"sources":["cli/actions/VersionAction.ts"],"names":[],"mappings":"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","file":"cli/actions/VersionAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { BumpType } from '../../data/VersionPolicy';\r\nimport IPackageJson from '../../utilities/IPackageJson';\r\nimport RushConfiguration from '../../data/RushConfiguration';\r\nimport Utilities from '../../utilities/Utilities';\r\nimport VersionControl from '../../utilities/VersionControl';\r\nimport { VersionMismatchFinder } from '../../data/VersionMismatchFinder';\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\nimport GitPolicy from '../utilities/GitPolicy';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { VersionManager } from '../utilities/VersionManager';\r\nimport { Git } from '../utilities/Git';\r\n\r\nexport default class VersionAction extends BaseRushAction {\r\n  private _parser: RushCommandLineParser;\r\n  private _ensureVersionPolicy: CommandLineFlagParameter;\r\n  private _bumpVersion: CommandLineFlagParameter;\r\n  private _versionPolicy: CommandLineStringParameter;\r\n  private _bypassPolicy: CommandLineFlagParameter;\r\n  private _targetBranch: CommandLineStringParameter;\r\n  private _overwriteBump: CommandLineStringParameter;\r\n  private _prereleaseIdentifier: CommandLineStringParameter;\r\n\r\n  private _versionManager: VersionManager;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionVerb: 'version',\r\n      summary: '(EXPERIMENTAL) Manage package versions in the repo.',\r\n      documentation: '(EXPERIMENTAL) use this \"rush version\" command to ensure version policies and bump versions.'\r\n    });\r\n    this._parser = parser;\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._targetBranch = this.defineStringParameter({\r\n      parameterLongName: '--target-branch',\r\n      parameterShortName: '-b',\r\n      key: 'BRANCH',\r\n      description:\r\n      'If this flag is specified, changes will be committed and merged into the target branch.'\r\n    });\r\n    this._ensureVersionPolicy = this.defineFlagParameter({\r\n      parameterLongName: '--ensure-version-policy',\r\n      parameterShortName: '-e',\r\n      description: 'Updates package versions if needed to satisfy version policies.'\r\n    });\r\n    this._bumpVersion = this.defineFlagParameter({\r\n      parameterLongName: '--bump',\r\n      description: 'Bumps package version based on version policies.'\r\n    });\r\n    this._bypassPolicy = this.defineFlagParameter({\r\n      parameterLongName: '--bypass-policy',\r\n      description: 'Overrides \"gitPolicy\" enforcement (use honorably!)'\r\n    });\r\n    this._versionPolicy = this.defineStringParameter({\r\n      parameterLongName: '--version-policy',\r\n      parameterShortName: '-p',\r\n      description: 'The name of the version policy'\r\n    });\r\n    this._overwriteBump = this.defineStringParameter({\r\n      parameterLongName: '--override-bump',\r\n      description: 'Overrides the bump type in the version-policy.json for the specified version policy.' +\r\n        'Valid values include: prerelease, patch, preminor, minor, major. ' +\r\n        'This setting only works for lock-step version policy in bump action.'\r\n    });\r\n    this._prereleaseIdentifier = this.defineStringParameter({\r\n      parameterLongName: '--override-prerelease-id',\r\n      description: 'Overrides the prerelease identifier in the version value of version-policy.json ' +\r\n        'for the specified version policy. ' +\r\n        'This setting only works for lock-step version policy in bump action.'\r\n    });\r\n  }\r\n\r\n  protected run(): void {\r\n    if (!this._bypassPolicy.value) {\r\n      if (!GitPolicy.check(this.rushConfiguration)) {\r\n        process.exit(1);\r\n        return;\r\n      }\r\n    }\r\n    this._validateInput();\r\n\r\n    this._versionManager = new VersionManager(this.rushConfiguration, this._getUserEmail());\r\n    if (this._ensureVersionPolicy.value) {\r\n      const tempBranch: string = 'version/ensure-' + new Date().getTime();\r\n      this._versionManager.ensure(this._versionPolicy.value, true);\r\n\r\n      const updatedPackages: Map<string, IPackageJson> = this._versionManager.updatedProjects;\r\n      if (updatedPackages.size > 0) {\r\n        console.log(`${updatedPackages.size} packages are getting updated.`);\r\n        this._gitProcess(tempBranch);\r\n      }\r\n    } else if (this._bumpVersion.value) {\r\n      const tempBranch: string = 'version/bump-' + new Date().getTime();\r\n      this._versionManager.bump(this._versionPolicy.value,\r\n        BumpType[this._overwriteBump.value],\r\n        this._prereleaseIdentifier.value,\r\n        true);\r\n      this._gitProcess(tempBranch);\r\n    }\r\n  }\r\n\r\n  private _validateInput(): void {\r\n    if (this._bumpVersion.value && this._ensureVersionPolicy.value) {\r\n      throw new Error('Please choose --bump or --ensure-version-policy but not together.');\r\n    }\r\n\r\n    if (this._overwriteBump.value && !BumpType[this._overwriteBump.value]) {\r\n      throw new Error('The value of override-bump is not valid.  ' +\r\n      'Valid values include prerelease, patch, preminor, minor, and major');\r\n    }\r\n  }\r\n\r\n  private _validateResult(): void {\r\n    // Load the config from file to avoid using inconsistent in-memory data.\r\n    const rushConfig: RushConfiguration =\r\n      RushConfiguration.loadFromConfigurationFile(this.rushConfiguration.rushJsonFile);\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(rushConfig.projects);\r\n    if (mismatchFinder.numberOfMismatches) {\r\n      throw new Error('Unable to finish version bump because inconsistencies were encountered.' +\r\n        ' Run \\\"rush check\\\" to find more details.');\r\n    }\r\n  }\r\n\r\n  private _getUserEmail(): string {\r\n    return Utilities.executeCommandAndCaptureOutput('git',\r\n        ['config', 'user.email'], '.').trim();\r\n  }\r\n\r\n  private _gitProcess(tempBranch: string): void {\r\n    // Validate the result before commit.\r\n    this._validateResult();\r\n\r\n    const git: Git = new Git(this._targetBranch.value);\r\n\r\n    // Make changes in temp branch.\r\n    git.checkout(tempBranch, true);\r\n\r\n    // Stage, commit, and push the changes to remote temp branch.\r\n    // Need to commit the change log updates in its own commit\r\n    const changeLogUpdated: boolean = VersionControl.getUncommittedChanges().some((changePath) => {\r\n      return changePath.indexOf('CHANGELOG.json') > 0;\r\n    });\r\n\r\n    if (changeLogUpdated) {\r\n      git.addChanges('.', this.rushConfiguration.changesFolder);\r\n      git.addChanges('**/CHANGELOG.json');\r\n      git.addChanges('**/CHANGELOG.md');\r\n      git.commit('Deleting change files and updating change logs for package updates.');\r\n    }\r\n\r\n    // Commit the package.json and change files updates.\r\n    git.addChanges();\r\n    git.commit();\r\n    git.push(tempBranch);\r\n\r\n    // Now merge to target branch.\r\n    git.checkout(this._targetBranch.value);\r\n    git.pull();\r\n    git.merge(tempBranch);\r\n    git.push(this._targetBranch.value);\r\n    git.deleteBranch(tempBranch);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}