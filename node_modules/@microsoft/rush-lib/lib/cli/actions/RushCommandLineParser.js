"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const colors = require("colors");
const wordwrap = require("wordwrap");
const ts_command_line_1 = require("@microsoft/ts-command-line");
const RushConstants_1 = require("../../RushConstants");
const CommandLineConfiguration_1 = require("../../data/CommandLineConfiguration");
const RushConfiguration_1 = require("../../data/RushConfiguration");
const Utilities_1 = require("../../utilities/Utilities");
const ChangeAction_1 = require("./ChangeAction");
const CheckAction_1 = require("./CheckAction");
const GenerateAction_1 = require("./GenerateAction");
const InstallAction_1 = require("./InstallAction");
const LinkAction_1 = require("./LinkAction");
const PublishAction_1 = require("./PublishAction");
const UnlinkAction_1 = require("./UnlinkAction");
const ScanAction_1 = require("./ScanAction");
const VersionAction_1 = require("./VersionAction");
const CustomCommandFactory_1 = require("./CustomCommandFactory");
const Telemetry_1 = require("../utilities/Telemetry");
class RushCommandLineParser extends ts_command_line_1.CommandLineParser {
    constructor() {
        super({
            toolFilename: 'rush',
            toolDescription: 'Rush helps you to manage a collection of NPM'
                + ' projects.  Rush collects the dependencies for all projects to perform a minimal install,'
                + ' detects which projects can be locally linked, and performs a fast parallel'
                + ' build according to the detected dependency graph.  If you want to decompose'
                + ' your monolithic project into many small packages but are afraid of the dreaded'
                + ' NPM progress bar, Rush is for you.'
        });
        this._populateActions();
    }
    catchSyncErrors(promise) {
        promise.catch((error) => {
            this._exitAndReportError(error);
        });
    }
    exitWithError() {
        try {
            this.flushTelemetry();
        }
        finally {
            process.exit(1);
        }
    }
    get isDebug() {
        return this._debugParameter.value;
    }
    flushTelemetry() {
        if (this.telemetry) {
            this.telemetry.flush();
        }
    }
    onDefineParameters() {
        this._debugParameter = this.defineFlagParameter({
            parameterLongName: '--debug',
            parameterShortName: '-d',
            description: 'Show the full call stack if an error occurs while executing the tool'
        });
    }
    onExecute() {
        if (this._debugParameter.value) {
            // For debugging, don't catch any exceptions; show the full call stack
            this._execute();
        }
        else {
            try {
                this._execute();
            }
            catch (error) {
                this._exitAndReportError(error);
            }
        }
    }
    _execute() {
        if (this.rushConfig) {
            this.telemetry = new Telemetry_1.default(this.rushConfig);
        }
        super.onExecute();
        if (this.telemetry) {
            this.flushTelemetry();
        }
    }
    _populateActions() {
        try {
            let commandLineConfig = undefined;
            const rushJsonFilename = RushConfiguration_1.default.tryFindRushJsonLocation();
            if (rushJsonFilename) {
                this.rushConfig = RushConfiguration_1.default.loadFromConfigurationFile(rushJsonFilename);
                const commandLineConfigFile = path.join(this.rushConfig.commonRushConfigFolder, RushConstants_1.RushConstants.commandLineFilename);
                commandLineConfig = CommandLineConfiguration_1.CommandLineConfiguration.tryLoadFromFile(commandLineConfigFile);
            }
            this.addAction(new ChangeAction_1.default(this));
            this.addAction(new CheckAction_1.default(this));
            this.addAction(new GenerateAction_1.default(this));
            this.addAction(new InstallAction_1.default(this));
            this.addAction(new LinkAction_1.default(this));
            this.addAction(new PublishAction_1.default(this));
            this.addAction(new ScanAction_1.default(this));
            this.addAction(new UnlinkAction_1.default(this));
            this.addAction(new VersionAction_1.default(this));
            CustomCommandFactory_1.CustomCommandFactory.createCommands(this, commandLineConfig)
                .forEach((customAction) => {
                this.addAction(customAction);
            });
        }
        catch (error) {
            this._exitAndReportError(error);
        }
    }
    _exitAndReportError(error) {
        if (this._debugParameter.value) {
            // If catchSyncErrors() called this, then show a call stack similar to what NodeJS
            // would show for an uncaught error
            console.error(os.EOL + error.stack);
        }
        else {
            const prefix = 'ERROR: ';
            const wrap = wordwrap.soft(prefix.length, Utilities_1.default.getConsoleWidth());
            console.error(os.EOL + colors.red(prefix + wrap(error.message).trim()));
        }
        this.exitWithError();
    }
}
exports.default = RushCommandLineParser;

//# sourceMappingURL=RushCommandLineParser.js.map
