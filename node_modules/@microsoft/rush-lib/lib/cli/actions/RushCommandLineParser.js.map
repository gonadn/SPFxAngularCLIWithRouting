{"version":3,"sources":["cli/actions/RushCommandLineParser.ts"],"names":[],"mappings":"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","file":"cli/actions/RushCommandLineParser.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as colors from 'colors';\r\nimport * as wordwrap from 'wordwrap';\r\nimport { CommandLineParser, CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\n\r\nimport { RushConstants } from '../../RushConstants';\r\nimport { CommandLineConfiguration } from '../../data/CommandLineConfiguration';\r\nimport RushConfiguration from '../../data/RushConfiguration';\r\nimport Utilities from '../../utilities/Utilities';\r\nimport ChangeAction from './ChangeAction';\r\nimport CheckAction from './CheckAction';\r\nimport GenerateAction from './GenerateAction';\r\nimport InstallAction from './InstallAction';\r\nimport LinkAction from './LinkAction';\r\nimport PublishAction from './PublishAction';\r\nimport UnlinkAction from './UnlinkAction';\r\nimport ScanAction from './ScanAction';\r\nimport VersionAction from './VersionAction';\r\nimport { CustomCommandFactory } from './CustomCommandFactory';\r\nimport { CustomRushAction } from './CustomRushAction';\r\n\r\nimport Telemetry from '../utilities/Telemetry';\r\n\r\nexport default class RushCommandLineParser extends CommandLineParser {\r\n  public telemetry: Telemetry | undefined;\r\n  public rushConfig: RushConfiguration;\r\n\r\n  private _debugParameter: CommandLineFlagParameter;\r\n\r\n  constructor() {\r\n    super({\r\n      toolFilename: 'rush',\r\n      toolDescription: 'Rush helps you to manage a collection of NPM'\r\n      + ' projects.  Rush collects the dependencies for all projects to perform a minimal install,'\r\n      + ' detects which projects can be locally linked, and performs a fast parallel'\r\n      + ' build according to the detected dependency graph.  If you want to decompose'\r\n      + ' your monolithic project into many small packages but are afraid of the dreaded'\r\n      + ' NPM progress bar, Rush is for you.'\r\n    });\r\n    this._populateActions();\r\n  }\r\n\r\n  public catchSyncErrors(promise: Promise<void>): void {\r\n    promise.catch((error: Error) => {\r\n      this._exitAndReportError(error);\r\n    });\r\n  }\r\n\r\n  public exitWithError(): void {\r\n    try {\r\n      this.flushTelemetry();\r\n    } finally {\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n  public get isDebug(): boolean {\r\n    return this._debugParameter.value;\r\n  }\r\n\r\n  public flushTelemetry(): void {\r\n    if (this.telemetry) {\r\n      this.telemetry.flush();\r\n    }\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._debugParameter = this.defineFlagParameter({\r\n      parameterLongName: '--debug',\r\n      parameterShortName: '-d',\r\n      description: 'Show the full call stack if an error occurs while executing the tool'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): void {\r\n    if (this._debugParameter.value) {\r\n      // For debugging, don't catch any exceptions; show the full call stack\r\n      this._execute();\r\n    } else {\r\n      try {\r\n        this._execute();\r\n      } catch (error) {\r\n        this._exitAndReportError(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _execute(): void {\r\n    if (this.rushConfig) {\r\n      this.telemetry = new Telemetry(this.rushConfig);\r\n    }\r\n\r\n    super.onExecute();\r\n\r\n    if (this.telemetry) {\r\n      this.flushTelemetry();\r\n    }\r\n  }\r\n\r\n  private _populateActions(): void {\r\n    try {\r\n      let  commandLineConfig: CommandLineConfiguration | undefined = undefined;\r\n\r\n      const rushJsonFilename: string | undefined = RushConfiguration.tryFindRushJsonLocation();\r\n      if (rushJsonFilename) {\r\n        this.rushConfig = RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\r\n\r\n        const commandLineConfigFile: string = path.join(\r\n          this.rushConfig.commonRushConfigFolder, RushConstants.commandLineFilename);\r\n\r\n        commandLineConfig = CommandLineConfiguration.tryLoadFromFile(commandLineConfigFile);\r\n      }\r\n\r\n      this.addAction(new ChangeAction(this));\r\n      this.addAction(new CheckAction(this));\r\n      this.addAction(new GenerateAction(this));\r\n      this.addAction(new InstallAction(this));\r\n      this.addAction(new LinkAction(this));\r\n      this.addAction(new PublishAction(this));\r\n      this.addAction(new ScanAction(this));\r\n      this.addAction(new UnlinkAction(this));\r\n      this.addAction(new VersionAction(this));\r\n\r\n      CustomCommandFactory.createCommands(this, commandLineConfig)\r\n        .forEach((customAction: CustomRushAction) => {\r\n          this.addAction(customAction);\r\n        });\r\n\r\n    } catch (error) {\r\n      this._exitAndReportError(error);\r\n    }\r\n  }\r\n\r\n  private _exitAndReportError(error: Error): void {\r\n    if (this._debugParameter.value) {\r\n      // If catchSyncErrors() called this, then show a call stack similar to what NodeJS\r\n      // would show for an uncaught error\r\n      console.error(os.EOL + error.stack);\r\n    } else {\r\n      const prefix: string = 'ERROR: ';\r\n      const wrap: (textToWrap: string) => string = wordwrap.soft(prefix.length, Utilities.getConsoleWidth());\r\n      console.error(os.EOL + colors.red(prefix + wrap(error.message).trim()));\r\n    }\r\n    this.exitWithError();\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}