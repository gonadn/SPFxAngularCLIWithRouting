{"version":3,"sources":["cli/actions/InstallAction.ts"],"names":[],"mappings":"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","file":"cli/actions/InstallAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\n\r\nimport { Event } from '../../data/EventHooks';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\nimport GitPolicy from '../utilities/GitPolicy';\r\nimport InstallManager, { InstallType } from '../utilities/InstallManager';\r\nimport LinkManager from '../utilities/LinkManager';\r\nimport ShrinkwrapFile from '../utilities/ShrinkwrapFile';\r\nimport { ApprovedPackagesChecker } from '../utilities/ApprovedPackagesChecker';\r\nimport { BaseRushAction } from './BaseRushAction';\r\n\r\nexport default class InstallAction extends BaseRushAction {\r\n  private _parser: RushCommandLineParser;\r\n  private _cleanInstall: CommandLineFlagParameter;\r\n  private _cleanInstallFull: CommandLineFlagParameter;\r\n  private _bypassPolicy: CommandLineFlagParameter;\r\n  private _noLinkParameter: CommandLineFlagParameter;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionVerb: 'install',\r\n      summary: 'Install NPM packages in the Rush \"common\" folder, as specified by your shrinkwrap file.',\r\n      documentation: 'Always run \"rush install\" whenever you: (1) clone a repo, or (2) pull new changes from source'\r\n      + ' control, or (3) edit any package.json file.  The \"rush install\" command installs NPM packages into your'\r\n      + ' Rush \"common\" folder, using the exact versions specified in your npm-shrinkwrap.json file.'\r\n      + ' It also makes sure these versions satisfy your dependencies; if not, it will ask you to run'\r\n      + ' \"rush generate\". If there is nothing to do, then \"rush install\" won\\'t take any time.'\r\n      + ' Afterwards, it will run \"rush link\" to create symlinks for all your projects.'\r\n    });\r\n    this._parser = parser;\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._cleanInstall = this.defineFlagParameter({\r\n      parameterLongName: '--clean',\r\n      parameterShortName: '-c',\r\n      description: 'Deletes the common \"node_modules\" folder and NPM cache before installing.'\r\n        + ' Use this option if you suspect that your package folder has become corrupted.'\r\n        + ' This occurs sometimes due to bugs in the NPM tool, or if you upgraded your'\r\n        + ' Node.js engine.'\r\n    });\r\n    this._cleanInstallFull = this.defineFlagParameter({\r\n      parameterLongName: '--full-clean',\r\n      parameterShortName: '-C',\r\n      description: '(UNSAFE!) Similar to \"--clean\", but also deletes and reinstalls shared files'\r\n        + ' such as the NPM tool itself. This is a more aggressive fix that is NOT SAFE to run'\r\n        + ' regularly because it may cause other Rush or NPM processes to fail.'\r\n    });\r\n    this._bypassPolicy = this.defineFlagParameter({\r\n      parameterLongName: '--bypass-policy',\r\n      description: 'Overrides \"gitPolicy\" enforcement (use honorably!)'\r\n    });\r\n    this._noLinkParameter = this.defineFlagParameter({\r\n      parameterLongName: '--no-link',\r\n      description: 'Do not automatically run the \"rush link\" action after \"rush install\"'\r\n    });\r\n  }\r\n\r\n  protected run(): void {\r\n    if (!this._bypassPolicy.value) {\r\n      if (!GitPolicy.check(this.rushConfiguration)) {\r\n        process.exit(1);\r\n        return;\r\n      }\r\n\r\n      ApprovedPackagesChecker.rewriteConfigFiles(this.rushConfiguration);\r\n    }\r\n\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    this.eventHooksManager.handle(Event.preRushInstall);\r\n    try {\r\n      const installManager: InstallManager = new InstallManager(this.rushConfiguration);\r\n\r\n      installManager.ensureLocalNpmTool(this._cleanInstallFull.value);\r\n\r\n      const shrinkwrapFile: ShrinkwrapFile | undefined\r\n        = ShrinkwrapFile.loadFromFile(this.rushConfiguration.committedShrinkwrapFilename);\r\n\r\n      if (!shrinkwrapFile) {\r\n        console.log('');\r\n        console.log(colors.red('Unable to proceed: The NPM shrinkwrap file is missing.'));\r\n        console.log('');\r\n        console.log('You need to run \"rush generate\" first.');\r\n        process.exit(1);\r\n        return;\r\n      }\r\n\r\n      if (!installManager.createTempModulesAndCheckShrinkwrap(shrinkwrapFile)) {\r\n        console.log('');\r\n        console.log(colors.red('You need to run \"rush generate\" to update your NPM shrinkwrap file.'));\r\n        process.exit(1);\r\n        return;\r\n      }\r\n\r\n      let installType: InstallType = InstallType.Normal;\r\n      if (this._cleanInstallFull.value) {\r\n        installType = InstallType.UnsafePurge;\r\n      } else if (this._cleanInstall.value) {\r\n        installType = InstallType.ForceClean;\r\n      }\r\n\r\n      installManager.installCommonModules(installType);\r\n\r\n      stopwatch.stop();\r\n      console.log(colors.green(`Done. (${stopwatch.toString()})`));\r\n\r\n      this._collectTelemetry(stopwatch, true);\r\n    } catch (error) {\r\n      stopwatch.stop();\r\n      this._collectTelemetry(stopwatch, false);\r\n      throw error;\r\n    }\r\n\r\n    this.eventHooksManager.handle(Event.postRushInstall);\r\n\r\n    if (!this._noLinkParameter.value) {\r\n      const linkManager: LinkManager = new LinkManager(this.rushConfiguration);\r\n      this._parser.catchSyncErrors(linkManager.createSymlinksForProjects(false));\r\n    } else {\r\n      console.log(os.EOL + 'Next you should probably run: \"rush link\"');\r\n    }\r\n  }\r\n\r\n  private _collectTelemetry(stopwatch: Stopwatch, success: boolean): void {\r\n    if (this._parser.telemetry) {\r\n      this._parser.telemetry.log({\r\n        name: 'install',\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData: {\r\n          clean: (!!this._cleanInstall.value).toString(),\r\n          fullClean: (!!this._cleanInstallFull.value).toString()\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}