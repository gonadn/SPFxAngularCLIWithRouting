import { BaseRushAction } from './BaseRushAction';
import RushCommandLineParser from './RushCommandLineParser';
export default class ChangeAction extends BaseRushAction {
    private _parser;
    private _sortedProjectList;
    private _changeFileData;
    private _changeComments;
    private _verifyParameter;
    private _targetBranchParameter;
    private _targetBranchName;
    private _prompt;
    constructor(parser: RushCommandLineParser);
    onDefineParameters(): void;
    run(): void;
    private _verify();
    private readonly _targetBranch;
    private _getChangedPackageNames();
    private _validateChangeFile(changedPackages);
    private _getChangeFiles();
    private _hasProjectChanged(changedFolders, project);
    /**
     * The main loop which continually asks user for questions about changes until they don't
     * have any more, at which point we collect their email and write the change file.
     */
    private _promptLoop();
    /**
     * Asks all questions which are needed to generate changelist for a project.
     */
    private _askQuestions(packageName);
    private _promptForComments(packageName);
    private _getBumpOptions(packageName);
    /**
     * Will determine a user's email by first detecting it from their git config,
     * or will ask for it if it is not found or the git config is wrong.
     */
    private _detectOrAskForEmail();
    /**
     * Detects the user's email address from their git configuration, prompts the user to approve the
     * detected email. It returns undefined if it cannot be detected.
     */
    private _detectAndConfirmEmail();
    /**
     * Asks the user for their e-mail address
     */
    private _promptForEmail();
    private _warnUncommittedChanges();
    /**
     * Writes changefile to the common/changes folder. Will prompt for overwrite if file already exists.
     */
    private _writeChangeFiles();
    private _writeChangeFile(changeFileData);
    /**
     * Writes a file to disk, ensuring the directory structure up to that point exists
     */
    private _writeFile(fileName, output);
}
