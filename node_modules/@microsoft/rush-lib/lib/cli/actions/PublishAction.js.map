{"version":3,"sources":["cli/actions/PublishAction.ts"],"names":[],"mappings":"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","file":"cli/actions/PublishAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport { EOL } from 'os';\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport {\r\n  IChangeInfo,\r\n  ChangeType\r\n} from '../../data/ChangeManagement';\r\nimport RushConfigurationProject from '../../data/RushConfigurationProject';\r\nimport Npm from '../../utilities/Npm';\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\nimport PublishUtilities from '../utilities/PublishUtilities';\r\nimport ChangelogGenerator from '../utilities/ChangelogGenerator';\r\nimport GitPolicy from '../utilities/GitPolicy';\r\nimport PrereleaseToken from '../utilities/PrereleaseToken';\r\nimport ChangeManager from '../utilities/ChangeManager';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { Git } from '../utilities/Git';\r\n\r\nexport default class PublishAction extends BaseRushAction {\r\n  private _addCommitDetails: CommandLineFlagParameter;\r\n  private _apply: CommandLineFlagParameter;\r\n  private _includeAll: CommandLineFlagParameter;\r\n  private _npmAuthToken: CommandLineStringParameter;\r\n  private _npmTag: CommandLineStringParameter;\r\n  private _parser: RushCommandLineParser;\r\n  private _publish: CommandLineFlagParameter;\r\n  private _regenerateChangelogs: CommandLineFlagParameter;\r\n  private _registryUrl: CommandLineStringParameter;\r\n  private _targetBranch: CommandLineStringParameter;\r\n  private _prereleaseName: CommandLineStringParameter;\r\n  private _suffix: CommandLineStringParameter;\r\n  private _force: CommandLineFlagParameter;\r\n  private _prereleaseToken: PrereleaseToken;\r\n  private _versionPolicy: CommandLineStringParameter;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionVerb: 'publish',\r\n      summary: 'Reads and processes package publishing change requests generated by \"rush change\".',\r\n      documentation:\r\n      'Reads and processes package publishing change requests generated by \"rush change\". This will perform a ' +\r\n      'read-only operation by default, printing operations executed to the console. To commit ' +\r\n      'changes and publish packages, you must use the --commit flag and/or the --publish flag.'\r\n    });\r\n    this._parser = parser;\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._apply = this.defineFlagParameter({\r\n      parameterLongName: '--apply',\r\n      parameterShortName: '-a',\r\n      description: 'If this flag is specified, the change requests will be applied to package.json files.'\r\n    });\r\n    this._targetBranch = this.defineStringParameter({\r\n      parameterLongName: '--target-branch',\r\n      parameterShortName: '-b',\r\n      key: 'BRANCH',\r\n      description:\r\n      'If this flag is specified, applied changes and deleted change requests will be' +\r\n      'committed and merged into the target branch.'\r\n    });\r\n    this._publish = this.defineFlagParameter({\r\n      parameterLongName: '--publish',\r\n      parameterShortName: '-p',\r\n      description: 'If this flag is specified, applied changes will be published to npm.'\r\n    });\r\n    this._addCommitDetails = this.defineFlagParameter({\r\n      parameterLongName: '--add-commit-details',\r\n      parameterShortName: undefined,\r\n      description: 'Adds commit author and hash to the changelog.json files for each change.'\r\n    });\r\n    this._regenerateChangelogs = this.defineFlagParameter({\r\n      parameterLongName: '--regenerate-changelogs',\r\n      parameterShortName: undefined,\r\n      description: 'Regenerates all changelog files based on the current JSON content.'\r\n    });\r\n    this._registryUrl = this.defineStringParameter({\r\n      parameterLongName: '--registry',\r\n      parameterShortName: '-r',\r\n      key: 'REGISTRY',\r\n      description:\r\n      `Publishes to a specified NPM registry. If this is specified, it will prevent the current commit will not be ` +\r\n      'tagged.'\r\n    });\r\n    this._npmAuthToken = this.defineStringParameter({\r\n      parameterLongName: '--npm-auth-token',\r\n      parameterShortName: '-n',\r\n      key: 'TOKEN',\r\n      description:\r\n      'Provide the default scope npm auth token to be passed into npm publish for global package publishing.'\r\n    });\r\n    this._npmTag = this.defineStringParameter({\r\n      parameterLongName: '--tag',\r\n      parameterShortName: '-t',\r\n      key: 'TAG',\r\n      description:\r\n      `The tag option to pass to npm publish. By default npm will publish using the 'latest' tag, even if ` +\r\n      `the package is older than the current latest, so in publishing workflows for older releases, providing ` +\r\n      `a tag is important.`\r\n    });\r\n    this._includeAll = this.defineFlagParameter({\r\n      parameterLongName: '--include-all',\r\n      parameterShortName: undefined,\r\n      description: 'If this flag is specified, all packages with shouldPublish=true in rush.json ' +\r\n      'or with a specified version policy ' +\r\n      'will be published if their version is newer than published version.'\r\n    });\r\n    this._versionPolicy = this.defineStringParameter({\r\n      parameterLongName: '--version-policy',\r\n      parameterShortName: '-vp',\r\n      key: 'VERSIONPOLICY',\r\n      description: 'Version policy name. Only projects with this version policy will be published if used ' +\r\n      'with --include-all.'\r\n    });\r\n    this._prereleaseName = this.defineStringParameter({\r\n      parameterLongName: '--prerelease-name',\r\n      parameterShortName: '-pn',\r\n      key: 'NAME',\r\n      description: 'Bump up to a prerelease version with the provided prerelease name. Cannot be used with --suffix'\r\n    });\r\n    this._suffix = this.defineStringParameter({\r\n      parameterLongName: '--suffix',\r\n      key: 'SUFFIX',\r\n      description: 'Append a suffix to all changed versions. Cannot be used with --prerelease-name.'\r\n    });\r\n    this._force = this.defineFlagParameter({\r\n      parameterLongName: '--force',\r\n      parameterShortName: undefined,\r\n      description: 'If this flag is specified with --publish, packages will be published with --force on npm'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes the publish action, which will read change request files, apply changes to package.jsons,\r\n   */\r\n  protected run(): void {\r\n    if (!GitPolicy.check(this.rushConfiguration)) {\r\n      process.exit(1);\r\n      return;\r\n    }\r\n    const allPackages: Map<string, RushConfigurationProject> = this.rushConfiguration.projectsByName;\r\n\r\n    if (this._regenerateChangelogs.value) {\r\n      console.log('Regenerating changelogs');\r\n      ChangelogGenerator.regenerateChangelogs(allPackages);\r\n      return;\r\n    }\r\n\r\n    if (this._includeAll.value) {\r\n      this._publishAll(allPackages);\r\n    } else {\r\n      this._prereleaseToken = new PrereleaseToken(this._prereleaseName.value, this._suffix.value);\r\n      this._publishChanges(allPackages);\r\n    }\r\n\r\n    console.log(EOL + colors.green('Rush publish finished successfully.'));\r\n  }\r\n\r\n  private _publishChanges(allPackages: Map<string, RushConfigurationProject>): void {\r\n    const changeManager: ChangeManager = new ChangeManager(this.rushConfiguration);\r\n    changeManager.load(this.rushConfiguration.changesFolder,\r\n      this._prereleaseToken,\r\n      this._addCommitDetails.value);\r\n\r\n    if (changeManager.hasChanges()) {\r\n      const orderedChanges: IChangeInfo[] = changeManager.changes;\r\n      const git: Git = new Git(this._targetBranch.value);\r\n      const tempBranch: string = 'publish-' + new Date().getTime();\r\n\r\n      // Make changes in temp branch.\r\n      git.checkout(tempBranch, true);\r\n\r\n      // Make changes to package.json and change logs.\r\n      changeManager.apply(this._apply.value);\r\n      changeManager.updateChangelog(this._apply.value);\r\n\r\n      // Stage, commit, and push the changes to remote temp branch.\r\n      git.addChanges();\r\n      git.commit();\r\n      git.push(tempBranch);\r\n\r\n      // NPM publish the things that need publishing.\r\n      for (const change of orderedChanges) {\r\n        if (change.changeType && change.changeType > ChangeType.dependency) {\r\n          const project: RushConfigurationProject | undefined = allPackages.get(change.packageName);\r\n          if (project) {\r\n            this._npmPublish(change.packageName, project.projectFolder);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Create and push appropriate git tags.\r\n      this._gitAddTags(git, orderedChanges);\r\n      git.push(tempBranch);\r\n\r\n      // Now merge to target branch.\r\n      git.checkout(this._targetBranch.value);\r\n      git.pull();\r\n      git.merge(tempBranch);\r\n      git.push(this._targetBranch.value);\r\n      git.deleteBranch(tempBranch);\r\n    }\r\n  }\r\n\r\n  private _publishAll(allPackages: Map<string, RushConfigurationProject>): void {\r\n    console.log(`Rush publish starts with includeAll and version policy ${this._versionPolicy.value}`);\r\n\r\n    let updated: boolean = false;\r\n    const git: Git = new Git(this._targetBranch.value);\r\n\r\n    allPackages.forEach((packageConfig, packageName) => {\r\n      if (packageConfig.shouldPublish &&\r\n        (!this._versionPolicy.value || this._versionPolicy.value === packageConfig.versionPolicyName)\r\n      ) {\r\n        if (this._force.value || !this._packageExists(packageConfig)) {\r\n          this._npmPublish(packageName, packageConfig.projectFolder);\r\n          git.addTag(!!this._publish.value && !this._registryUrl.value, packageName, packageConfig.packageJson.version);\r\n          updated = true;\r\n        } else {\r\n          console.log(`Skip ${packageName}. Not updated.`);\r\n        }\r\n      }\r\n    });\r\n    if (updated) {\r\n      git.push(this._targetBranch.value);\r\n    }\r\n  }\r\n\r\n  private _gitAddTags(git: Git, orderedChanges: IChangeInfo[]): void {\r\n    for (const change of orderedChanges) {\r\n      if (\r\n        change.changeType &&\r\n        change.changeType > ChangeType.dependency &&\r\n        this.rushConfiguration.projectsByName.get(change.packageName)!.shouldPublish\r\n      ) {\r\n        git.addTag(!!this._publish.value && !this._registryUrl.value, change.packageName, change.newVersion!);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _npmPublish(packageName: string, packagePath: string): void {\r\n    const env: { [key: string]: string } = PublishUtilities.getEnvArgs();\r\n    const args: string[] = ['publish'];\r\n\r\n    if (this.rushConfiguration.projectsByName.get(packageName)!.shouldPublish) {\r\n      let registry: string = '//registry.npmjs.org/';\r\n      if (this._registryUrl.value) {\r\n        const registryUrl: string = this._registryUrl.value;\r\n        env['npm_config_registry'] = registryUrl; // tslint:disable-line:no-string-literal\r\n        registry = registryUrl.substring(registryUrl.indexOf('//'));\r\n      }\r\n\r\n      if (this._npmAuthToken.value) {\r\n        args.push(`--${registry}:_authToken=${this._npmAuthToken.value}`);\r\n      }\r\n\r\n      if (this._npmTag.value) {\r\n        args.push(`--tag`, this._npmTag.value);\r\n      }\r\n\r\n      if (this._force.value) {\r\n        args.push(`--force`);\r\n      }\r\n\r\n      PublishUtilities.execCommand(\r\n        !!this._publish.value,\r\n        this.rushConfiguration.npmToolFilename,\r\n        args,\r\n        packagePath,\r\n        env);\r\n    }\r\n  }\r\n\r\n  private _packageExists(packageConfig: RushConfigurationProject): boolean {\r\n    const env: { [key: string]: string } = PublishUtilities.getEnvArgs();\r\n    if (this._registryUrl.value) {\r\n      env['npm_config_registry'] = this._registryUrl.value; // tslint:disable-line:no-string-literal\r\n    }\r\n    const publishedVersions: string[] = Npm.publishedVersions(packageConfig.packageName,\r\n      packageConfig.projectFolder,\r\n      env);\r\n    return publishedVersions.indexOf(packageConfig.packageJson.version) >= 0;\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}