{"version":3,"sources":["cli/actions/GenerateAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AACjC,yBAAyB;AACzB,gCAAgC;AAGhC,yDAAkD;AAClD,yDAAsD;AACtD,gEAA0E;AAC1E,0DAAmD;AAEnD,kFAA+E;AAC/E,gEAAyD;AACzD,qDAAkD;AAElD,oBAAoC,SAAQ,+BAAc;IAMxD,YAAY,MAA6B;QACvC,KAAK,CAAC;YACJ,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,kFAAkF;YAC3F,aAAa,EAAE,gFAAgF;kBAC7F,8EAA8E;kBAC9E,iFAAiF;kBACjF,oFAAoF;kBACpF,8EAA8E;kBAC9E,yFAAyF;kBACzF,gFAAgF;SACnF,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC7C,iBAAiB,EAAE,QAAQ;YAC3B,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,sFAAsF;kBACjG,qFAAqF;kBACrF,6FAA6F;kBAC7F,mDAAmD;SACtD,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC9C,iBAAiB,EAAE,SAAS;YAC5B,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,gGAAgG;kBAC3G,oDAAoD;SACvD,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC/C,iBAAiB,EAAE,WAAW;YAC9B,WAAW,EAAE,uEAAuE;SACrF,CAAC,CAAC;IACL,CAAC;IAES,GAAG;QACX,MAAM,SAAS,GAAc,qBAAS,CAAC,KAAK,EAAE,CAAC;QAC/C,MAAM,MAAM,GAAY,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;QAElD,iDAAuB,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEnE,MAAM,cAAc,GAAmB,IAAI,wBAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAElF,IAAI,CAAC;YACH,MAAM,cAAc,GAChB,wBAAc,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;YAEpF,EAAE,CAAC,CAAC,cAAc;mBACb,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK;mBAC3B,cAAc,CAAC,mCAAmC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACxE,OAAO,CAAC,GAAG,EAAE,CAAC;gBACd,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,0EAA0E,CAAC,CAAC,CAAC;gBACvG,OAAO,CAAC,GAAG,EAAE,CAAC;gBACd,OAAO,CAAC,GAAG,CAAC,yEAAyE;oBACnF,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,yBAAyB,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBACtG,MAAM,CAAC;YACT,CAAC;QACH,CAAC;QAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACZ,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CAAC,oFAAoF,CAAC,CAAC;QACpG,CAAC;QAED,cAAc,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAEzC,cAAc,CAAC,iBAAiB,EAAE,CAAC;QAEnC,4CAA4C;QAC5C,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;YACvE,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;YACvF,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;QACrE,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAClE,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC;QAChE,CAAC;QAED,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACtB,GAAG,EAAE,CAAC,GAAG,oCAAoC;gBAC7C,kEAAkE,CAAC,CAAC,CAAC;YAEvE,4BAA4B;YAC5B,cAAc,CAAC,oBAAoB,CAAC,4BAAW,CAAC,MAAM,CAAC,CAAC;YAExD,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,qBAAqB;YACrB,cAAc,CAAC,oBAAoB,CAAC,4BAAW,CAAC,UAAU,CAAC,CAAC;YAE5D,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC;YACjE,MAAM,OAAO,GAAc,CAAC,YAAY,CAAC,CAAC;YAC1C,cAAc,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YACjD,mBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAC7D,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;YAEnD,kFAAkF;YAClF,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,EACnE,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;YAEtD,uFAAuF;YACvF,oFAAoF;YACpF,0FAA0F;YAC1F,oFAAoF;YACpF,iFAAiF;YACjF,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;gBACnE,GAAG,CAAC,aAAa,CAAC,cAAc,CAAC,+BAA+B,EAAE,EAAE,CAAC,CAAC;YACxE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,oFAAoF;gBACpF,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;QAED,SAAS,CAAC,IAAI,EAAE,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,yCAAyC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QAErG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;YACjC,MAAM,WAAW,GAAgB,IAAI,qBAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACzE,8FAA8F;YAC9F,yFAAyF;YACzF,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,2CAA2C,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;CACF;AAnID,iCAmIC","file":"cli/actions/GenerateAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as fsx from 'fs-extra';\r\nimport { CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\n\r\nimport Utilities from '../../utilities/Utilities';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport InstallManager, { InstallType } from '../utilities/InstallManager';\r\nimport LinkManager from '../utilities/LinkManager';\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\nimport { ApprovedPackagesChecker } from '../utilities/ApprovedPackagesChecker';\r\nimport ShrinkwrapFile from '../utilities/ShrinkwrapFile';\r\nimport { BaseRushAction } from './BaseRushAction';\r\n\r\nexport default class GenerateAction extends BaseRushAction {\r\n  private _parser: RushCommandLineParser;\r\n  private _lazyParameter: CommandLineFlagParameter;\r\n  private _noLinkParameter: CommandLineFlagParameter;\r\n  private _forceParameter: CommandLineFlagParameter;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionVerb: 'generate',\r\n      summary: 'Generate a new shrinkwrap file containing the latest semver-compatible versions.',\r\n      documentation: 'Run the \"rush generate\" command only if: (1) you are setting up a new repo, or'\r\n      + ' (2) you want to upgrade to the latest versions of your dependencies, or (3)'\r\n      + ' you modified a package.json file and \"rush install\" can\\'t find what it needs.'\r\n      + ' The \"rush generate\" command will do a clean install of your Rush \"common\" folder,'\r\n      + ' upgrading you to the latest semver-compatible versions of all dependencies.'\r\n      + ' Then, it will create a new shrinkwrap file, which you should commit to source control.'\r\n      + ' Afterwards, it will run \"rush link\" to create symlinks for all your projects.'\r\n    });\r\n    this._parser = parser;\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._lazyParameter = this.defineFlagParameter({\r\n      parameterLongName: '--lazy',\r\n      parameterShortName: '-l',\r\n      description: 'Use this to save time in situations where you need to run \"rush generate\" repeatedly'\r\n      + ' while editing package.json files.  It performs a much quicker incremental install,'\r\n      + ' but does not generate a shrinkwrap file; you will still need to run a full \"rush generate\"'\r\n      + ' (without --lazy) before committing your changes.'\r\n    });\r\n    this._forceParameter = this.defineFlagParameter({\r\n      parameterLongName: '--force',\r\n      parameterShortName: '-f',\r\n      description: 'Use this to bypass checking the shrinkwrap file, which forces rush generate to run even if all'\r\n      + ' dependencies already exist in the shrinkwrap file'\r\n    });\r\n    this._noLinkParameter = this.defineFlagParameter({\r\n      parameterLongName: '--no-link',\r\n      description: 'Do not automatically run the \"rush link\" action after \"rush generate\"'\r\n    });\r\n  }\r\n\r\n  protected run(): void {\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n    const isLazy: boolean = this._lazyParameter.value;\r\n\r\n    ApprovedPackagesChecker.rewriteConfigFiles(this.rushConfiguration);\r\n\r\n    const installManager: InstallManager = new InstallManager(this.rushConfiguration);\r\n\r\n    try {\r\n      const shrinkwrapFile: ShrinkwrapFile | undefined\r\n        = ShrinkwrapFile.loadFromFile(this.rushConfiguration.committedShrinkwrapFilename);\r\n\r\n      if (shrinkwrapFile\r\n        && !this._forceParameter.value\r\n        && installManager.createTempModulesAndCheckShrinkwrap(shrinkwrapFile)) {\r\n        console.log();\r\n        console.log(colors.yellow('Skipping generate, since all project dependencies are already satisfied.'));\r\n        console.log();\r\n        console.log(`If you want to force an upgrade to the latest compatible versions, use ` +\r\n          `${colors.yellow('rush generate --force')}. Otherwise, just run ${colors.green('rush install')}.)`);\r\n        return;\r\n      }\r\n    } catch (ex) {\r\n      console.log();\r\n      console.log('There was a problem reading the shrinkwrap file. Proceeeding with \"rush generate\".');\r\n    }\r\n\r\n    installManager.ensureLocalNpmTool(false);\r\n\r\n    installManager.createTempModules();\r\n\r\n    // Delete both copies of the shrinkwrap file\r\n    if (fsx.existsSync(this.rushConfiguration.committedShrinkwrapFilename)) {\r\n      console.log(os.EOL + 'Deleting ' + this.rushConfiguration.committedShrinkwrapFilename);\r\n      fsx.unlinkSync(this.rushConfiguration.committedShrinkwrapFilename);\r\n    }\r\n    if (fsx.existsSync(this.rushConfiguration.tempShrinkwrapFilename)) {\r\n      fsx.unlinkSync(this.rushConfiguration.tempShrinkwrapFilename);\r\n    }\r\n\r\n    if (isLazy) {\r\n      console.log(colors.green(\r\n        `${os.EOL}Rush is running in \"--lazy\" mode. ` +\r\n        `You will need to run a normal \"rush generate\" before committing.`));\r\n\r\n      // Do an incremental install\r\n      installManager.installCommonModules(InstallType.Normal);\r\n\r\n      console.log(os.EOL + colors.bold('(Skipping \"npm shrinkwrap\")') + os.EOL);\r\n    } else {\r\n      // Do a clean install\r\n      installManager.installCommonModules(InstallType.ForceClean);\r\n\r\n      console.log(os.EOL + colors.bold('Running \"npm shrinkwrap\"...'));\r\n      const npmArgs: string [] = ['shrinkwrap'];\r\n      installManager.pushConfigurationNpmArgs(npmArgs);\r\n      Utilities.executeCommand(this.rushConfiguration.npmToolFilename,\r\n        npmArgs, this.rushConfiguration.commonTempFolder);\r\n      console.log('\"npm shrinkwrap\" completed' + os.EOL);\r\n\r\n      // Copy (or delete) common\\temp\\npm-shrinkwrap.json --> common\\npm-shrinkwrap.json\r\n      installManager.syncFile(this.rushConfiguration.tempShrinkwrapFilename,\r\n        this.rushConfiguration.committedShrinkwrapFilename);\r\n\r\n      // The flag file is normally created by installCommonModules(), but \"rush install\" will\r\n      // compare its timestamp against the shrinkwrap file.  Since we just generated a new\r\n      // npm-shrinkwrap file, it's safe to bump the timestamp, which ensures that \"rush install\"\r\n      // won't do anything immediately after \"rush generate\".  This is a minor performance\r\n      // optimization, but it helps people to understand the semantics of the commands.\r\n      if (fsx.existsSync(installManager.commonNodeModulesMarkerFilename)) {\r\n        fsx.writeFileSync(installManager.commonNodeModulesMarkerFilename, '');\r\n      } else {\r\n        // Sanity check -- since we requested a clean install above, this should never occur\r\n        throw new Error('The install flag file is missing');\r\n      }\r\n    }\r\n\r\n    stopwatch.stop();\r\n    console.log(os.EOL + colors.green(`Rush generate finished successfully. (${stopwatch.toString()})`));\r\n\r\n    if (!this._noLinkParameter.value) {\r\n      const linkManager: LinkManager = new LinkManager(this.rushConfiguration);\r\n      // NOTE: Setting force=true here shouldn't be strictly necessary, since installCommonModules()\r\n      // above should have already deleted the marker file, but it doesn't hurt to be explicit.\r\n      this._parser.catchSyncErrors(linkManager.createSymlinksForProjects(true));\r\n    } else {\r\n      console.log(os.EOL + 'Next you should probably run: \"rush link\"');\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}