{"version":3,"sources":["cli/actions/CustomCommandFactory.ts"],"names":[],"mappings":";;AAOA,yDAAsD;AAEtD;;;GAGG;AACH;IACS,MAAM,CAAC,cAAc,CACxB,MAA6B,EAC7B,iBAAuD;QAEzD,MAAM,aAAa,GAAkC,IAAI,GAAG,EAA4B,CAAC;QAEzF,MAAM,qBAAqB,GAAW,oEAAoE;cACtG,+EAA+E;cAC/E,8EAA8E;cAC9E,oFAAoF;cACpF,oFAAoF;cACpF,+CAA+C,CAAC;QAEpD,8CAA8C;QAC9C,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,mCAAgB,CAAC,MAAM,EAAE;YACtD,UAAU,EAAE,OAAO;YACnB,OAAO,EAAE,mGAAmG;kBACxG,QAAQ;YACZ,aAAa,EAAE,qBAAqB;SACrC,EAAE,IAAI,CAAC,CAAC,CAAC;QAEV,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,mCAAgB,CAAC,MAAM,EAAE;YACxD,UAAU,EAAE,SAAS;YACrB,OAAO,EAAE,8CAA8C;YACvD,aAAa,EAAE,qBAAqB;SACrC,EAAE,IAAI,CAAC,CAAC,CAAC;QAEV,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtB,+BAA+B;YAC/B,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAuB;gBACzD,EAAE,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,IAAI,KAAK,CAAC,yDAAyD,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;gBAC5F,CAAC;gBACD,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,mCAAgB,CAAC,MAAM,EAAE;oBAC3D,UAAU,EAAE,OAAO,CAAC,IAAI;oBACxB,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,OAAO;iBACxD,EACD,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YAEH,4CAA4C;YAC5C,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,YAA0B,EAAE,QAAgB;gBAC7E,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,iBAAyB;oBAChE,MAAM,YAAY,GAAiC,aAAa,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBACxF,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBACjB,YAAY,CAAC,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;oBACvD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,IAAI,KAAK,CAAC,+BAA+B,iBAAiB,mBAAmB;8BAC/E,mBAAmB,QAAQ,IAAI,CAAC,CAAC;oBACvC,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;QAED,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;CACF;AA1DD,oDA0DC","file":"cli/actions/CustomCommandFactory.js","sourcesContent":["import {\r\n  CommandLineConfiguration,\r\n  ICustomCommand,\r\n  CustomOption\r\n} from '../../data/CommandLineConfiguration';\r\n\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\nimport { CustomRushAction } from './CustomRushAction';\r\n\r\n/**\r\n * Using the custom command line configuration, generates a set of\r\n * rush actions that are then registered to the command line.\r\n */\r\nexport class CustomCommandFactory {\r\n  public static createCommands(\r\n      parser: RushCommandLineParser,\r\n      commandLineConfig: CommandLineConfiguration | undefined\r\n    ): Map<string, CustomRushAction> {\r\n    const customActions: Map<string, CustomRushAction> = new Map<string, CustomRushAction>();\r\n\r\n    const documentationForBuild: string = 'The Rush build command assumes that the package.json file for each'\r\n      + ' project contains scripts for \"npm run clean\" and \"npm run test\".  It invokes'\r\n      + ' these commands to build each project.  Projects are built in parallel where'\r\n      + ' possible, but always respecting the dependency graph for locally linked projects.'\r\n      + ' The number of simultaneous processes will be based on the number of machine cores'\r\n      + ' unless overridden by the --parallelism flag.';\r\n\r\n    // always create a build and a rebuild command\r\n    customActions.set('build', new CustomRushAction(parser, {\r\n      actionVerb: 'build',\r\n      summary: '(EXPERIMENTAL) Build all projects that haven\\'t been built, or have changed since they were last '\r\n        + 'built.',\r\n      documentation: documentationForBuild\r\n    }, true));\r\n\r\n    customActions.set('rebuild', new CustomRushAction(parser, {\r\n      actionVerb: 'rebuild',\r\n      summary: 'Clean and rebuild the entire set of projects',\r\n      documentation: documentationForBuild\r\n    }, true));\r\n\r\n    if (commandLineConfig) {\r\n      // Register each custom command\r\n      commandLineConfig.commands.forEach((command: ICustomCommand) => {\r\n        if (customActions.get(command.name)) {\r\n          throw new Error(`Cannot define two custom actions with the same name: \"${command.name}\"`);\r\n        }\r\n        customActions.set(command.name, new CustomRushAction(parser, {\r\n          actionVerb: command.name,\r\n          summary: command.summary,\r\n          documentation: command.documentation || command.summary\r\n        },\r\n        command.parallelized));\r\n      });\r\n\r\n      // Associate each custom option to a command\r\n      commandLineConfig.options.forEach((customOption: CustomOption, longName: string) => {\r\n        customOption.associatedCommands.forEach((associatedCommand: string) => {\r\n          const customAction: CustomRushAction | undefined = customActions.get(associatedCommand);\r\n          if (customAction) {\r\n            customAction.addCustomOption(longName, customOption);\r\n          } else {\r\n            throw new Error(`Cannot find custom command \"${associatedCommand}\" associated with`\r\n              + ` custom option \"${longName}\".`);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    return customActions;\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}