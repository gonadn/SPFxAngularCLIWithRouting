"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
/**
 * @public
 */
class VersionControl {
    static getChangedFolders(targetBranch) {
        const branchName = targetBranch ? targetBranch : 'origin/master';
        const output = child_process.execSync(`git diff ${branchName}... --dirstat=files,0`)
            .toString();
        return output.split('\n').map(s => {
            if (s) {
                const delimiterIndex = s.indexOf('%');
                if (delimiterIndex > 0 && delimiterIndex + 1 < s.length) {
                    return s.substring(delimiterIndex + 1).trim();
                }
            }
            return undefined;
        });
    }
    static getChangedFiles(prefix, targetBranch) {
        const branchName = targetBranch ? targetBranch : 'origin/master';
        const output = child_process
            .execSync(`git diff ${branchName}... --name-only --no-renames --diff-filter=A`)
            .toString();
        const regex = prefix ? new RegExp(`^${prefix}`, 'i') : undefined;
        return output.split('\n').map(s => {
            if (s) {
                const trimmedLine = s.trim();
                if (regex && trimmedLine.match(regex)) {
                    return trimmedLine;
                }
            }
            return undefined;
        }).filter(s => {
            return s && s.length > 0;
        });
    }
    /**
     * Gets the remote master branch that maps to the provided repository url.
     * This method is used by 'Rush change' to find the default remote branch to compare against.
     * If repository url is not provided or if there is no match, returns the default remote
     * master branch 'origin/master'.
     * If there are more than one matches, returns the first remote's master branch.
     *
     * @param repositoryUrl - repository url
     */
    static getRemoteMasterBranch(repositoryUrl) {
        const defaultRemote = 'origin';
        const defaultMaster = 'origin/master';
        let useDefault = false;
        let matchingRemotes = [];
        if (!repositoryUrl) {
            useDefault = true;
        }
        else {
            const output = child_process
                .execSync(`git remote`)
                .toString();
            matchingRemotes = output.split('\n').filter(remoteName => {
                if (remoteName) {
                    const remoteUrl = child_process.execSync(`git remote get-url ${remoteName}`)
                        .toString()
                        .trim();
                    if (remoteName === defaultRemote && remoteUrl === repositoryUrl) {
                        useDefault = true;
                    }
                    return remoteUrl === repositoryUrl;
                }
                return false;
            });
        }
        if (useDefault) {
            return defaultMaster;
        }
        else if (matchingRemotes.length > 0) {
            if (matchingRemotes.length > 1) {
                console.log(`More than one remotes match the repository url. Use the first remote.`);
            }
            return `${matchingRemotes[0]}/master`;
        }
        // For backward-compatible
        return defaultMaster;
    }
    static hasUncommittedChanges() {
        return VersionControl.getUncommittedChanges().length > 0;
    }
    /**
     * The list of files changed but not commited
     */
    static getUncommittedChanges() {
        const changes = [];
        changes.push(...VersionControl._getUntrackedChanges());
        changes.push(...VersionControl._getDiffOnHEAD());
        return changes.filter(change => {
            return change.trim().length > 0;
        });
    }
    static _getUntrackedChanges() {
        const output = child_process
            .execSync(`git ls-files --exclude-standard --others`)
            .toString();
        return output.trim().split('\n');
    }
    static _getDiffOnHEAD() {
        const output = child_process
            .execSync(`git diff HEAD --name-only`)
            .toString();
        return output.trim().split('\n');
    }
}
exports.default = VersionControl;

//# sourceMappingURL=VersionControl.js.map
