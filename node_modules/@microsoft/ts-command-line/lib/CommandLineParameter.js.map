{"version":3,"sources":["CommandLineParameter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAiB3D;;;;;;;;GAQG;AACH;IAKE,YAAY,GAAW,EAAE,SAA+B;QACtD,IAAI,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,CAAC,IAAY,KAAK,IAAgB,CAAC,CAAC,CAAC,gCAAgC;QACrG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACtB,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,IAA4B;QAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;OAMG;IACH,IAAW,KAAK;QACd,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,IAAW,IAAI;QACb,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF;AApCD,oDAoCC;AAED;;;GAGG;AACH,gCAAwC,SAAQ,oBAA4B;CAAI;AAAhF,gEAAgF;AAEhF;;;GAGG;AACH,gCAAwC,SAAQ,oBAA4B;CAAI;AAAhF,gEAAgF;AAEhF;;;GAGG;AACH,oCAA4C,SAAQ,oBAA8B;CAAI;AAAtF,wEAAsF;AAEtF;;;GAGG;AACH,8BAAsC,SAAQ,oBAA6B;CAAI;AAA/E,4DAA+E;AAE/E;;;GAGG;AACH,iCAAyC,SAAQ,oBAA4B;CAAI;AAAjF,kEAAiF","file":"CommandLineParameter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IConverterFunction<T> {\r\n  (initial: any): T; /* tslint:disable-line:no-any */\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ICommandLineParserData {\r\n  action: string;\r\n  [key: string]: any; /* tslint:disable-line:no-any */\r\n}\r\n\r\n/**\r\n * The base class for the various command-line parameter types.\r\n *\r\n * @remarks\r\n *\r\n * The \"subclasses\" of this class are not actually constructed directly.  Instead,\r\n * they are used as shorthand for various parameterizations of CommandLineParameter<T>.\r\n * @public\r\n */\r\nexport class CommandLineParameter<T> {\r\n  private _converter: IConverterFunction<T>;\r\n  private _value: T;\r\n  private _keyData: string;\r\n\r\n  constructor(key: string, converter?: (data: string) => T) {\r\n    this._converter = converter || ((data: string) => data as any as T); /* tslint:disable-line:no-any */\r\n    this._keyData = key;\r\n  }\r\n\r\n  /**\r\n   * Called internally by CommandLineParameterProvider._processParsedData()\r\n   * @internal\r\n   */\r\n  public _setValue(data: ICommandLineParserData): void {\r\n    this._value = this._converter(data[this._keyData]);\r\n  }\r\n\r\n  /**\r\n   * After the command line has been parsed, this returns the value of the parameter.\r\n   * @remarks\r\n   * For example, for a CommandLineFlagParameter it will be a boolean indicating\r\n   * whether the switch was provided.  For a CommandLineStringListParameter it will\r\n   * be an array of strings.\r\n   */\r\n  public get value(): T {\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * An internal key used to retrieve the value from the parser's dictionary\r\n   * @internal\r\n   */\r\n  public get _key(): string {\r\n    return this._keyData;\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineOptionParameter}.\r\n * @public\r\n */\r\nexport class CommandLineOptionParameter extends CommandLineParameter<string> { }\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineStringParameter}.\r\n * @public\r\n */\r\nexport class CommandLineStringParameter extends CommandLineParameter<string> { }\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineStringListParameter}.\r\n * @public\r\n */\r\nexport class CommandLineStringListParameter extends CommandLineParameter<string[]> { }\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineFlagParameter}.\r\n * @public\r\n */\r\nexport class CommandLineFlagParameter extends CommandLineParameter<boolean> { }\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineIntegerParameter}.\r\n * @public\r\n */\r\nexport class CommandLineIntegerParameter extends CommandLineParameter<number> { }\r\n"],"sourceRoot":"..\\src"}