import * as argparse from 'argparse';
import { ICommandLineParserData } from './CommandLineParameter';
import CommandLineParameterProvider from './CommandLineParameterProvider';
/**
 * Options for the CommandLineAction constructor.
 * @public
 */
export interface ICommandLineActionOptions {
    /**
     * The name of the sub-command.  For example, if the tool is called "example",
     * then the verb "build" might be invoked as: "foo build -q --some-other-option"
     */
    actionVerb: string;
    /**
     * A quick summary that is shown on the main help page, which is displayed
     * by the command "foo --help"
     */
    summary: string;
    /**
     * A detailed description that is shown on the action help page, which is displayed
     * by the command "foo --help build", e.g. for actionVerb="build".
     */
    documentation: string;
}
/**
 * Represents a sub-command that is part of the CommandLineParser command line.
 * Applications should create subclasses of CommandLineAction corresponding to
 * each action that they want to expose.
 *
 * @public
 */
export declare abstract class CommandLineAction extends CommandLineParameterProvider {
    /**
     * The options that were passed to the constructor.
     */
    options: ICommandLineActionOptions;
    constructor(options: ICommandLineActionOptions);
    /**
     * This is called internally by CommandLineParser.addAction()
     * @internal
     */
    _buildParser(actionsSubParser: argparse.SubParser): void;
    /**
     * This is called internally by CommandLineParser.execute()
     * @internal
     */
    _processParsedData(data: ICommandLineParserData): void;
    /**
     * Invoked by CommandLineParser.onExecute().
     * @internal
     */
    _execute(): void;
    /**
     * Your subclass should implement this hook to perform the operation.
     */
    protected abstract onExecute(): void;
}
export default CommandLineAction;
