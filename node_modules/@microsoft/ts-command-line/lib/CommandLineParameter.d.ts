/**
 * @public
 */
export interface IConverterFunction<T> {
    (initial: any): T;
}
/**
 * @internal
 */
export interface ICommandLineParserData {
    action: string;
    [key: string]: any;
}
/**
 * The base class for the various command-line parameter types.
 *
 * @remarks
 *
 * The "subclasses" of this class are not actually constructed directly.  Instead,
 * they are used as shorthand for various parameterizations of CommandLineParameter<T>.
 * @public
 */
export declare class CommandLineParameter<T> {
    private _converter;
    private _value;
    private _keyData;
    constructor(key: string, converter?: (data: string) => T);
    /**
     * Called internally by CommandLineParameterProvider._processParsedData()
     * @internal
     */
    _setValue(data: ICommandLineParserData): void;
    /**
     * After the command line has been parsed, this returns the value of the parameter.
     * @remarks
     * For example, for a CommandLineFlagParameter it will be a boolean indicating
     * whether the switch was provided.  For a CommandLineStringListParameter it will
     * be an array of strings.
     */
    readonly value: T;
    /**
     * An internal key used to retrieve the value from the parser's dictionary
     * @internal
     */
    readonly _key: string;
}
/**
 * The data type returned by {@link CommandLineParameterProvider.defineOptionParameter}.
 * @public
 */
export declare class CommandLineOptionParameter extends CommandLineParameter<string> {
}
/**
 * The data type returned by {@link CommandLineParameterProvider.defineStringParameter}.
 * @public
 */
export declare class CommandLineStringParameter extends CommandLineParameter<string> {
}
/**
 * The data type returned by {@link CommandLineParameterProvider.defineStringListParameter}.
 * @public
 */
export declare class CommandLineStringListParameter extends CommandLineParameter<string[]> {
}
/**
 * The data type returned by {@link CommandLineParameterProvider.defineFlagParameter}.
 * @public
 */
export declare class CommandLineFlagParameter extends CommandLineParameter<boolean> {
}
/**
 * The data type returned by {@link CommandLineParameterProvider.defineIntegerParameter}.
 * @public
 */
export declare class CommandLineIntegerParameter extends CommandLineParameter<number> {
}
