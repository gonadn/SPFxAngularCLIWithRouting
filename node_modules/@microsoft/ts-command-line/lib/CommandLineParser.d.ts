import CommandLineAction from './CommandLineAction';
import CommandLineParameterProvider from './CommandLineParameterProvider';
/**
 * Options for the {@link CommandLineParser} constructor.
 * @public
 */
export interface ICommandListParserOptions {
    /**
     * The name of your tool when invoked from the command line
     */
    toolFilename: string;
    /**
     * General documentation that is included in the "--help" main page
     */
    toolDescription: string;
}
/**
 * The "argparse" library is a relatively advanced command-line parser with features such
 * as word-wrapping and intelligible error messages (that are lacking in other similar
 * libraries such as commander, yargs, and nomnom).  Unfortunately, its ruby-inspired API
 * is awkward to use.  The abstract base classes CommandLineParser and CommandLineAction
 * provide a wrapper for "argparse" that makes defining and consuming arguments quick
 * and simple, and enforces that appropriate documentation is provided for each parameter.
 *
 * @public
 */
declare abstract class CommandLineParser extends CommandLineParameterProvider {
    /**
     * Reports which CommandLineAction was selected on the command line.
     * @remarks
     * The value will be assigned before onExecute() is invoked.
     */
    protected selectedAction: CommandLineAction;
    private _actionsSubParser;
    private _options;
    private _actions;
    constructor(options: ICommandListParserOptions);
    /**
     * Defines a new action that can be used with the CommandLineParser instance.
     */
    addAction(command: CommandLineAction): void;
    /**
     * This is the main entry point to begin parsing command-line arguments
     * and executing the corresponding action.
     *
     * @param args   the command-line arguments to be parsed; if omitted, then
     *               the process.argv will be used
     */
    execute(args?: string[]): void;
    /**
     * This hook allows the subclass to perform additional operations before or after
     * the chosen action is executed.
     */
    protected onExecute(): void;
}
export default CommandLineParser;
