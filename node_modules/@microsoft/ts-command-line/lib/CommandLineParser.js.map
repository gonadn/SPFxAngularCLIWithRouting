{"version":3,"sources":["CommandLineParser.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,qCAAqC;AACrC,iCAAiC;AAIjC,iFAA0E;AAkB1E;;;;;;;;;GASG;AACH,uBAAiC,SAAQ,sCAA4B;IAYnE,YAAY,OAAkC;QAC5C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QAEnB,IAAI,CAAC,eAAe,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC;YACjD,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;YAChC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;YAC1C,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,kDAAkD;kBAClE,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,eAAe,CAAC;SACnD,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC;YAC1D,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,SAAS,CAAC,OAA0B;QACzC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;;;;;OAMG;IACI,OAAO,CAAC,IAAe;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,4BAA4B;YAC5B,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;YACjC,MAAM,CAAC;QACT,CAAC;QACD,MAAM,IAAI,GAA2B,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;QAEtE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAE9B,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;gBAC7B,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBAChC,KAAK,CAAC;YACR,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACzB,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED;;;OAGG;IACO,SAAS;QACjB,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;CACF;AAED,kBAAe,iBAAiB,CAAC","file":"CommandLineParser.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as argparse from 'argparse';\r\nimport * as colors from 'colors';\r\n\r\nimport CommandLineAction from './CommandLineAction';\r\nimport { ICommandLineParserData } from './CommandLineParameter';\r\nimport CommandLineParameterProvider from './CommandLineParameterProvider';\r\n\r\n/**\r\n * Options for the {@link CommandLineParser} constructor.\r\n * @public\r\n */\r\nexport interface ICommandListParserOptions {\r\n  /**\r\n   * The name of your tool when invoked from the command line\r\n   */\r\n  toolFilename: string;\r\n\r\n  /**\r\n   * General documentation that is included in the \"--help\" main page\r\n   */\r\n  toolDescription: string;\r\n}\r\n\r\n/**\r\n * The \"argparse\" library is a relatively advanced command-line parser with features such\r\n * as word-wrapping and intelligible error messages (that are lacking in other similar\r\n * libraries such as commander, yargs, and nomnom).  Unfortunately, its ruby-inspired API\r\n * is awkward to use.  The abstract base classes CommandLineParser and CommandLineAction\r\n * provide a wrapper for \"argparse\" that makes defining and consuming arguments quick\r\n * and simple, and enforces that appropriate documentation is provided for each parameter.\r\n *\r\n * @public\r\n */\r\nabstract class CommandLineParser extends CommandLineParameterProvider {\r\n  /**\r\n   * Reports which CommandLineAction was selected on the command line.\r\n   * @remarks\r\n   * The value will be assigned before onExecute() is invoked.\r\n   */\r\n  protected selectedAction: CommandLineAction;\r\n\r\n  private _actionsSubParser: argparse.SubParser;\r\n  private _options: ICommandListParserOptions;\r\n  private _actions: CommandLineAction[];\r\n\r\n  constructor(options: ICommandListParserOptions) {\r\n    super();\r\n\r\n    this._options = options;\r\n    this._actions = [];\r\n\r\n    this._argumentParser = new argparse.ArgumentParser({\r\n      addHelp: true,\r\n      prog: this._options.toolFilename,\r\n      description: this._options.toolDescription,\r\n      epilog: colors.bold('For detailed help about a specific command, use:'\r\n        + ` ${this._options.toolFilename} <command> -h`)\r\n    });\r\n\r\n    this._actionsSubParser = this._argumentParser.addSubparsers({\r\n      metavar: '<command>',\r\n      dest: 'action'\r\n    });\r\n\r\n    this.onDefineParameters();\r\n  }\r\n\r\n  /**\r\n   * Defines a new action that can be used with the CommandLineParser instance.\r\n   */\r\n  public addAction(command: CommandLineAction): void {\r\n    command._buildParser(this._actionsSubParser);\r\n    this._actions.push(command);\r\n  }\r\n\r\n  /**\r\n   * This is the main entry point to begin parsing command-line arguments\r\n   * and executing the corresponding action.\r\n   *\r\n   * @param args   the command-line arguments to be parsed; if omitted, then\r\n   *               the process.argv will be used\r\n   */\r\n  public execute(args?: string[]): void {\r\n    if (!args) {\r\n      // 0=node.exe, 1=script name\r\n      args = process.argv.slice(2);\r\n    }\r\n    if (args.length === 0) {\r\n      this._argumentParser.printHelp();\r\n      return;\r\n    }\r\n    const data: ICommandLineParserData = this._argumentParser.parseArgs();\r\n\r\n    this._processParsedData(data);\r\n\r\n    for (const action of this._actions) {\r\n      if (action.options.actionVerb === data.action) {\r\n        this.selectedAction = action;\r\n        action._processParsedData(data);\r\n        break;\r\n      }\r\n    }\r\n    if (!this.selectedAction) {\r\n      throw Error('Unrecognized action');\r\n    }\r\n\r\n    this.onExecute();\r\n  }\r\n\r\n  /**\r\n   * This hook allows the subclass to perform additional operations before or after\r\n   * the chosen action is executed.\r\n   */\r\n  protected onExecute(): void {\r\n    this.selectedAction._execute();\r\n  }\r\n}\r\n\r\nexport default CommandLineParser;\r\n"],"sourceRoot":"..\\src"}