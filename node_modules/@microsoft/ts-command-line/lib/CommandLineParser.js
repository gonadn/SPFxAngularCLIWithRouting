"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const argparse = require("argparse");
const colors = require("colors");
const CommandLineParameterProvider_1 = require("./CommandLineParameterProvider");
/**
 * The "argparse" library is a relatively advanced command-line parser with features such
 * as word-wrapping and intelligible error messages (that are lacking in other similar
 * libraries such as commander, yargs, and nomnom).  Unfortunately, its ruby-inspired API
 * is awkward to use.  The abstract base classes CommandLineParser and CommandLineAction
 * provide a wrapper for "argparse" that makes defining and consuming arguments quick
 * and simple, and enforces that appropriate documentation is provided for each parameter.
 *
 * @public
 */
class CommandLineParser extends CommandLineParameterProvider_1.default {
    constructor(options) {
        super();
        this._options = options;
        this._actions = [];
        this._argumentParser = new argparse.ArgumentParser({
            addHelp: true,
            prog: this._options.toolFilename,
            description: this._options.toolDescription,
            epilog: colors.bold('For detailed help about a specific command, use:'
                + ` ${this._options.toolFilename} <command> -h`)
        });
        this._actionsSubParser = this._argumentParser.addSubparsers({
            metavar: '<command>',
            dest: 'action'
        });
        this.onDefineParameters();
    }
    /**
     * Defines a new action that can be used with the CommandLineParser instance.
     */
    addAction(command) {
        command._buildParser(this._actionsSubParser);
        this._actions.push(command);
    }
    /**
     * This is the main entry point to begin parsing command-line arguments
     * and executing the corresponding action.
     *
     * @param args   the command-line arguments to be parsed; if omitted, then
     *               the process.argv will be used
     */
    execute(args) {
        if (!args) {
            // 0=node.exe, 1=script name
            args = process.argv.slice(2);
        }
        if (args.length === 0) {
            this._argumentParser.printHelp();
            return;
        }
        const data = this._argumentParser.parseArgs();
        this._processParsedData(data);
        for (const action of this._actions) {
            if (action.options.actionVerb === data.action) {
                this.selectedAction = action;
                action._processParsedData(data);
                break;
            }
        }
        if (!this.selectedAction) {
            throw Error('Unrecognized action');
        }
        this.onExecute();
    }
    /**
     * This hook allows the subclass to perform additional operations before or after
     * the chosen action is executed.
     */
    onExecute() {
        this.selectedAction._execute();
    }
}
exports.default = CommandLineParser;

//# sourceMappingURL=CommandLineParser.js.map
