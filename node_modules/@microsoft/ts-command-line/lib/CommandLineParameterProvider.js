"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const CommandLineParameter_1 = require("./CommandLineParameter");
/**
 * This is the common base class for CommandLineAction and CommandLineParser
 * that provides functionality for defining command-line parameters.
 *
 * @public
 */
class CommandLineParameterProvider {
    constructor() {
        this._parameters = [];
        this._keys = new Map();
    }
    /**
     * Defines a command-line switch whose boolean value is true if the switch is provided,
     * and false otherwise.
     *
     * @remarks
     * Example:  example-tool --debug
     */
    defineFlagParameter(definition) {
        return this._createParameter(definition, {
            action: 'storeTrue'
        });
    }
    /**
     * Defines a command-line parameter whose value is a single text string.
     *
     * @remarks
     * Example:  example-tool --message "Hello, world!"
     */
    defineStringParameter(definition) {
        return this._createParameter(definition, undefined, definition.key);
    }
    /**
     * Defines a command-line parameter whose value is one or more text strings.
     *
     * @remarks
     * Example:  example-tool --add file1.txt --add file2.txt --add file3.txt
     */
    defineStringListParameter(definition) {
        return this._createParameter(definition, {
            action: 'append'
        }, definition.key);
    }
    /**
     * Defines a command-line parameter whose value is an integer.
     *
     * @remarks
     * Example:  example-tool l --max-attempts 5
     */
    defineIntegerParameter(definition) {
        return this._createParameter(definition, {
            type: 'int'
        }, definition.key);
    }
    /**
     * Defines a command-line parameter whose value must be a string from a fixed set of
     * allowable choice (similar to an enum).
     *
     * @remarks
     * Example:  example-tool --log-level warn
     */
    defineOptionParameter(definition) {
        if (!definition.options) {
            throw new Error(`When defining an option parameter, the options array must be defined.`);
        }
        if (definition.defaultValue && definition.options.indexOf(definition.defaultValue) === -1) {
            throw new Error(`Could not find default value "${definition.defaultValue}" `
                + `in the array of available options: ${definition.options.toString()}`);
        }
        return this._createParameter(definition, {
            choices: definition.options,
            defaultValue: definition.defaultValue
        });
    }
    /** @internal */
    _processParsedData(data) {
        // Fill in the values for the parameters
        for (const parameter of this._parameters) {
            parameter._setValue(data);
        }
    }
    _getKey(parameterLongName, key = 'key_' + (CommandLineParameterProvider._keyCounter++).toString()) {
        const existingKey = this._keys.get(key);
        if (existingKey) {
            throw colors.red(`The parameter "${parameterLongName}" tried to define a key which was already ` +
                `defined by the "${existingKey}" parameter. Ensure that the keys values are unique.`);
        }
        this._keys.set(key, parameterLongName);
        return key;
    }
    _createParameter(definition, argparseOptions, key, 
        /* tslint:disable-next-line:no-any */
        converter) {
        const names = [];
        if (definition.parameterShortName) {
            names.push(definition.parameterShortName);
        }
        names.push(definition.parameterLongName);
        /* tslint:disable:no-any */
        const result = new CommandLineParameter_1.CommandLineParameter(this._getKey(definition.parameterLongName, key), converter);
        /* tslint:enable:no-any */
        this._parameters.push(result);
        const baseArgparseOptions = {
            help: definition.description,
            dest: result._key
        };
        Object.keys(argparseOptions || {}).forEach((keyVal) => {
            baseArgparseOptions[keyVal] = (argparseOptions || {})[keyVal];
        });
        this._argumentParser.addArgument(names, baseArgparseOptions);
        return result;
    }
}
CommandLineParameterProvider._keyCounter = 0;
exports.default = CommandLineParameterProvider;

//# sourceMappingURL=CommandLineParameterProvider.js.map
