{"version":3,"sources":["CommandLineParameterProvider.ts"],"names":[],"mappings":"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","file":"CommandLineParameterProvider.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as argparse from 'argparse';\r\nimport * as colors from 'colors';\r\nimport {\r\n  IBaseCommandLineDefinition,\r\n  ICommandLineFlagDefinition,\r\n  ICommandLineStringDefinition,\r\n  ICommandLineStringListDefinition,\r\n  ICommandLineIntegerDefinition,\r\n  ICommandLineOptionDefinition\r\n} from './CommandLineDefinition';\r\n\r\nimport {\r\n  CommandLineParameter,\r\n  ICommandLineParserData,\r\n  IConverterFunction,\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineStringListParameter,\r\n  CommandLineIntegerParameter,\r\n  CommandLineOptionParameter\r\n} from './CommandLineParameter';\r\n\r\n/**\r\n * This is the common base class for CommandLineAction and CommandLineParser\r\n * that provides functionality for defining command-line parameters.\r\n *\r\n * @public\r\n */\r\nabstract class CommandLineParameterProvider {\r\n  private static _keyCounter: number = 0;\r\n\r\n  /**\r\n   * NOTE: THIS IS INTERNAL.  IN THE FUTURE, WE MAY REPLACE \"argparse\" WITH A DIFFERENT ENGINE.\r\n   * @internal\r\n   */\r\n  protected _argumentParser: argparse.ArgumentParser;\r\n\r\n  /* tslint:disable-next-line:no-any */\r\n  private _parameters: CommandLineParameter<any>[];\r\n  private _keys: Map<string, string>;\r\n\r\n  constructor() {\r\n    this._parameters = [];\r\n    this._keys = new Map<string, string>();\r\n  }\r\n\r\n  /**\r\n   * The child class should implement this hook to define its command-line parameters,\r\n   * e.g. by calling defineFlagParameter().\r\n   */\r\n  protected abstract onDefineParameters(): void;\r\n\r\n  /**\r\n   * Defines a command-line switch whose boolean value is true if the switch is provided,\r\n   * and false otherwise.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --debug\r\n   */\r\n  protected defineFlagParameter(definition: ICommandLineFlagDefinition): CommandLineFlagParameter {\r\n    return this._createParameter(definition, {\r\n      action: 'storeTrue'\r\n    }) as CommandLineFlagParameter;\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value is a single text string.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --message \"Hello, world!\"\r\n   */\r\n  protected defineStringParameter(definition: ICommandLineStringDefinition): CommandLineStringParameter {\r\n    return this._createParameter(definition, undefined, definition.key) as CommandLineStringParameter;\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value is one or more text strings.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --add file1.txt --add file2.txt --add file3.txt\r\n   */\r\n  protected defineStringListParameter(definition: ICommandLineStringListDefinition): CommandLineStringListParameter {\r\n    return this._createParameter(definition, {\r\n      action: 'append'\r\n    }, definition.key) as CommandLineStringListParameter;\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value is an integer.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool l --max-attempts 5\r\n   */\r\n  protected defineIntegerParameter(definition: ICommandLineIntegerDefinition): CommandLineIntegerParameter {\r\n    return this._createParameter(definition, {\r\n      type: 'int'\r\n    }, definition.key) as CommandLineIntegerParameter;\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value must be a string from a fixed set of\r\n   * allowable choice (similar to an enum).\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --log-level warn\r\n   */\r\n  protected defineOptionParameter(definition: ICommandLineOptionDefinition): CommandLineOptionParameter {\r\n    if (!definition.options) {\r\n      throw new Error(`When defining an option parameter, the options array must be defined.`);\r\n    }\r\n    if (definition.defaultValue && definition.options.indexOf(definition.defaultValue) === -1) {\r\n      throw new Error(`Could not find default value \"${definition.defaultValue}\" `\r\n        + `in the array of available options: ${definition.options.toString()}`);\r\n    }\r\n    return this._createParameter(definition, {\r\n      choices: definition.options,\r\n      defaultValue: definition.defaultValue\r\n    }) as CommandLineOptionParameter;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _processParsedData(data: ICommandLineParserData): void {\r\n    // Fill in the values for the parameters\r\n    for (const parameter of this._parameters) {\r\n      parameter._setValue(data);\r\n    }\r\n  }\r\n\r\n  private _getKey(\r\n    parameterLongName: string,\r\n    key: string = 'key_' + (CommandLineParameterProvider._keyCounter++).toString()): string {\r\n\r\n    const existingKey: string | undefined = this._keys.get(key);\r\n    if (existingKey) {\r\n      throw colors.red(`The parameter \"${parameterLongName}\" tried to define a key which was already ` +\r\n        `defined by the \"${existingKey}\" parameter. Ensure that the keys values are unique.`);\r\n    }\r\n\r\n    this._keys.set(key, parameterLongName);\r\n    return key;\r\n  }\r\n\r\n  private _createParameter(definition: IBaseCommandLineDefinition,\r\n                           argparseOptions?: argparse.ArgumentOptions,\r\n                           key?: string,\r\n                           /* tslint:disable-next-line:no-any */\r\n                           converter?: IConverterFunction<any>): CommandLineParameter<any> {\r\n    const names: string[] = [];\r\n    if (definition.parameterShortName) {\r\n      names.push(definition.parameterShortName);\r\n    }\r\n    names.push(definition.parameterLongName);\r\n\r\n    /* tslint:disable:no-any */\r\n    const result: CommandLineParameter<any> =\r\n      new CommandLineParameter<any>(this._getKey(definition.parameterLongName, key), converter);\r\n    /* tslint:enable:no-any */\r\n\r\n    this._parameters.push(result);\r\n\r\n    const baseArgparseOptions: argparse.ArgumentOptions = {\r\n      help: definition.description,\r\n      dest: result._key\r\n    };\r\n\r\n    Object.keys(argparseOptions || {}).forEach((keyVal: string) => {\r\n      baseArgparseOptions[keyVal] = (argparseOptions || {})[keyVal];\r\n    });\r\n\r\n    this._argumentParser.addArgument(names, baseArgparseOptions);\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default CommandLineParameterProvider;\r\n"],"sourceRoot":"..\\src"}