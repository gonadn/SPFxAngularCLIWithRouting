{"version":3,"sources":["CommandLineAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAI3D,iFAA0E;AA0B1E;;;;;;GAMG;AACH,uBAAwC,SAAQ,sCAA4B;IAM1E,YAAY,OAAkC;QAC5C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,gBAAoC;QACtD,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;YACzE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;YAC1B,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACI,kBAAkB,CAAC,IAA4B;QACpD,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CAMF;AA5CD,8CA4CC;AAED,kBAAe,iBAAiB,CAAC","file":"CommandLineAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as argparse from 'argparse';\r\nimport { ICommandLineParserData } from './CommandLineParameter';\r\nimport CommandLineParameterProvider from './CommandLineParameterProvider';\r\n\r\n/**\r\n * Options for the CommandLineAction constructor.\r\n * @public\r\n */\r\nexport interface ICommandLineActionOptions {\r\n  /**\r\n   * The name of the sub-command.  For example, if the tool is called \"example\",\r\n   * then the verb \"build\" might be invoked as: \"foo build -q --some-other-option\"\r\n   */\r\n  actionVerb: string;\r\n\r\n  /**\r\n   * A quick summary that is shown on the main help page, which is displayed\r\n   * by the command \"foo --help\"\r\n   */\r\n  summary: string;\r\n\r\n  /**\r\n   * A detailed description that is shown on the action help page, which is displayed\r\n   * by the command \"foo --help build\", e.g. for actionVerb=\"build\".\r\n   */\r\n  documentation: string;\r\n}\r\n\r\n/**\r\n * Represents a sub-command that is part of the CommandLineParser command line.\r\n * Applications should create subclasses of CommandLineAction corresponding to\r\n * each action that they want to expose.\r\n *\r\n * @public\r\n */\r\nexport abstract class CommandLineAction extends CommandLineParameterProvider {\r\n  /**\r\n   * The options that were passed to the constructor.\r\n   */\r\n  public options: ICommandLineActionOptions;\r\n\r\n  constructor(options: ICommandLineActionOptions) {\r\n    super();\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * This is called internally by CommandLineParser.addAction()\r\n   * @internal\r\n   */\r\n  public _buildParser(actionsSubParser: argparse.SubParser): void {\r\n    this._argumentParser = actionsSubParser.addParser(this.options.actionVerb, {\r\n      help: this.options.summary,\r\n      description: this.options.documentation\r\n    });\r\n\r\n    this.onDefineParameters();\r\n  }\r\n\r\n  /**\r\n   * This is called internally by CommandLineParser.execute()\r\n   * @internal\r\n   */\r\n  public _processParsedData(data: ICommandLineParserData): void {\r\n    super._processParsedData(data);\r\n  }\r\n\r\n  /**\r\n   * Invoked by CommandLineParser.onExecute().\r\n   * @internal\r\n   */\r\n  public _execute(): void {\r\n    this.onExecute();\r\n  }\r\n\r\n  /**\r\n   * Your subclass should implement this hook to perform the operation.\r\n   */\r\n  protected abstract onExecute(): void;\r\n}\r\n\r\nexport default CommandLineAction;\r\n"],"sourceRoot":"..\\src"}