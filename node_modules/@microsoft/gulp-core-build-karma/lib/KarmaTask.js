"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
const os = require("os");
const fs = require("fs");
const path = require("path");
class KarmaTask extends gulp_core_build_1.GulpTask {
    constructor() {
        super('karma', {
            configPath: './karma.config.js',
            testMatch: /.+\.test\.js?$/,
            failBuildOnErrors: false
        });
    }
    get resources() {
        if (!this._resources) {
            this._resources = {
                bindPolyfillPath: require.resolve('phantomjs-polyfill/bind-polyfill.js'),
                istanbulInstrumenterLoaderPath: require.resolve('istanbul-instrumenter-loader'),
                plugins: [
                    require('karma-webpack'),
                    require('karma-mocha'),
                    require('karma-coverage'),
                    require('karma-mocha-clean-reporter'),
                    require('karma-phantomjs-launcher'),
                    require('karma-sinon-chai')
                ]
            };
        }
        return this._resources;
    }
    loadSchema() {
        return require('./karma.schema.json');
    }
    getCleanMatch(buildConfig, taskConfig = this.taskConfig) {
        return [
            path.join(buildConfig.tempFolder, 'tests.js')
        ];
    }
    isEnabled(buildConfig) {
        return (super.isEnabled(buildConfig) &&
            !buildConfig.jestEnabled &&
            this.taskConfig.configPath !== null // tslint:disable-line:no-null-keyword
        );
    }
    executeTask(gulp, completeCallback) {
        const { configPath } = this.taskConfig;
        if (configPath && !this.fileExists(configPath)) {
            const shouldInitKarma = (process.argv.indexOf('--initkarma') > -1);
            if (!shouldInitKarma) {
                this.logWarning(`No karma config has been provided. ` +
                    `Run again using --initkarma to create a default config, or call ` +
                    `karma.setConfig({ configPath: null }) in your gulpfile.`);
            }
            else {
                this.copyFile(path.resolve(__dirname, '../karma.config.js'));
                // install dev dependencies?
                // phantomjs-polyfill?
                //
                // install typings for mocha/chai/sinon?
            }
            completeCallback();
        }
        else {
            // Normalize the match expression if one was specified
            const { testMatch } = this.taskConfig;
            if (testMatch) {
                let normalizedMatch;
                if (typeof testMatch === 'string') {
                    try {
                        normalizedMatch = new RegExp(testMatch);
                    }
                    catch (error) {
                        completeCallback('There was an issue parsing your testMatch regular expression: ' + error.toString());
                        return;
                    }
                }
                else if (testMatch instanceof RegExp) {
                    normalizedMatch = testMatch;
                }
                else {
                    completeCallback('The testMatch regular expression is invalid');
                    return;
                }
                // tslint:disable:max-line-length
                const testsJsFileContents = [
                    `var context = require.context('${path.posix.join('..', this.buildConfig.libFolder)}', true, ${normalizedMatch.toString()});`,
                    `context.keys().forEach(context);`,
                    `module.exports = context;`
                ].join(os.EOL);
                // tslint:enable:max-line-length
                const tempFolder = path.join(this.buildConfig.rootPath, this.buildConfig.tempFolder);
                if (!fs.existsSync(tempFolder)) {
                    fs.mkdirSync(tempFolder);
                }
                fs.writeFileSync(path.join(tempFolder, 'tests.js'), testsJsFileContents);
            }
            const karma = require('karma'); // tslint:disable-line
            const server = karma.Server;
            const singleRun = (process.argv.indexOf('--debug') === -1);
            const matchIndex = (process.argv.indexOf('--match'));
            const matchString = (matchIndex === -1) ? '' : process.argv[matchIndex + 1];
            new server({
                client: {
                    mocha: {
                        grep: matchString
                    }
                },
                configFile: this.resolvePath(configPath),
                singleRun: singleRun
            }, (exitCode) => {
                if (exitCode) {
                    const message = 'Error(s) occured during karma.';
                    if (this.buildConfig.production || this.taskConfig.failBuildOnErrors) {
                        completeCallback(message);
                    }
                    else {
                        this.logWarning(message);
                        completeCallback();
                    }
                }
                else {
                    completeCallback();
                }
            }).start();
        }
    }
}
exports.KarmaTask = KarmaTask;

//# sourceMappingURL=KarmaTask.js.map
