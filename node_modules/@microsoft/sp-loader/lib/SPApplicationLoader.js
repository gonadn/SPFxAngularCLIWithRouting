"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var SPComponentLoaderProxy_1 = require("./SPComponentLoaderProxy");
var ManifestStore_1 = require("./stores/ManifestStore");
var componentConstants = require("./utilities/componentConstants");
var SPLoader_resx_1 = require("./SPLoader.resx");
var TIMEOUT_IN_MILLISECONDS = 10000;
var startQosScenarioName = 'SPComponentLoader.start';
var platformFailedToLoadFailure = 'PlatformFailedToLoad';
var applicationManagerStartFailure = 'ApplicationManager.Start';
var missingPlatformManifestFailure = 'MissingPlatformManifest';
var timeoutExpectedFailure = 'Timeout';
var startLogSource = sp_telemetry_1._LogSource.create('SPApplicationLoader.start');
var SPApplicationLoader = (function () {
    function SPApplicationLoader() {
    }
    SPApplicationLoader.startApplication = function (preloadedData) {
        sp_core_library_1.Validate.isNonemptyString(preloadedData.clientSideApplicationId, 'preloadedData.clientSideApplicationId');
        var qosMonitor = new sp_telemetry_1._QosMonitor(startQosScenarioName);
        setTimeout(function () {
            if (!qosMonitor.hasEnded) {
                qosMonitor.writeExpectedFailure(timeoutExpectedFailure);
            }
        }, TIMEOUT_IN_MILLISECONDS);
        return SPApplicationLoader._startApplication(preloadedData, qosMonitor);
    };
    SPApplicationLoader._startApplication = function (preloadedData, qosMonitor) {
        var _this = this;
        function error(message, failureId) {
            var err = new Error(message);
            sp_telemetry_1._TraceLogger.logError(startLogSource, err);
            qosMonitor.writeUnexpectedFailure(failureId, err);
            throw err;
        }
        return Promise.resolve().then(function () {
            var platformManifest = _this._getPlatformManifest(error);
            return _this._loadPlatform(platformManifest, error).then(function (spApplicationBase) {
                if (spApplicationBase && spApplicationBase._ApplicationManager) {
                    var applicationManager = new spApplicationBase._ApplicationManager();
                    return applicationManager.startApplication(preloadedData).then(function (result) {
                        qosMonitor.writeSuccess();
                        return result;
                    }).catch(function (e) {
                        var err = new Error(sp_core_library_1.Text.format(SPLoader_resx_1.default.applicationFailedToInitializeError, e));
                        sp_telemetry_1._TraceLogger.logError(startLogSource, err);
                        qosMonitor.writeExpectedFailure(applicationManagerStartFailure, err);
                        throw err;
                    });
                }
                else {
                    return error(sp_core_library_1.Text.format(SPLoader_resx_1.default.platformFailedToLoadError, componentConstants.spApplicationBaseComponentId, componentConstants.spApplicationBaseName), platformFailedToLoadFailure);
                }
            }).catch(function (err) {
                return error(sp_core_library_1.Text.format(SPLoader_resx_1.default.platformFailedToLoadError, componentConstants.spApplicationBaseComponentId, componentConstants.spApplicationBaseName), platformFailedToLoadFailure);
            });
        });
    };
    SPApplicationLoader._getPlatformManifest = function (error) {
        var componentId = componentConstants.spApplicationBaseComponentId;
        var manifest = ManifestStore_1.default.instance.tryGetManifest(componentId);
        if (!manifest) {
            return error(sp_core_library_1.Text.format(SPLoader_resx_1.default.manifestNotFoundByIdError, componentId), missingPlatformManifestFailure);
        }
        return manifest;
    };
    SPApplicationLoader._loadPlatform = function (manifest, error) {
        return SPComponentLoaderProxy_1.default.loadComponent(manifest)
            .catch(function (e) {
            return error(sp_core_library_1.Text.format(SPLoader_resx_1.default.platformFailedToLoadWithMessageError, manifest.id, manifest.loaderConfig.entryModuleId, e.message), platformFailedToLoadFailure);
        });
    };
    return SPApplicationLoader;
}());
exports.default = SPApplicationLoader;
