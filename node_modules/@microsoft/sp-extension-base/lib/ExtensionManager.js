"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_loader_1 = require("@microsoft/sp-loader");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var BaseExtension_1 = require("./BaseExtension");
var ExtensionStrings_resx_1 = require("./ExtensionStrings.resx");
var ExtensionManager = (function () {
    function ExtensionManager(serviceScope, expectedType) {
        this._serviceScope = serviceScope;
        this._extensionPromises = [];
        this._expectedType = expectedType;
    }
    ExtensionManager.prototype.createExtension = function (componentId, propertiesJson, contextCreator) {
        var _this = this;
        var qosMonitor = new sp_telemetry_1._QosMonitor('Extension.Create');
        var manifest = sp_loader_1.SPComponentLoader.tryGetManifestById(componentId);
        if (!manifest) {
            var manifestError = new Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.manifestNotFound, componentId));
            qosMonitor.writeUnexpectedFailure('ManifestNotFound', manifestError, { componentId: componentId });
            return Promise.reject(manifestError);
        }
        var instanceId = sp_core_library_1.Guid.newGuid().toString();
        var loggingTag = "Extension." + manifest.id + "." + instanceId;
        var context = contextCreator({
            manifest: manifest,
            parentServiceScope: this._serviceScope,
            instanceId: instanceId,
            loggingTag: loggingTag
        });
        var perfLogKeyCreate = loggingTag + '.Extension.Create';
        var perfLogKeyScriptLoad = loggingTag + '.Extension.ScriptLoad';
        sp_telemetry_1._PerformanceLogger.startMarkForComponent(perfLogKeyCreate);
        var error = undefined;
        var extraData = this._createQosExtraData(manifest.alias, manifest.isInternal, manifest.id);
        try {
            sp_telemetry_1._PerformanceLogger.startMarkForComponent(perfLogKeyScriptLoad);
            var modulePromise = sp_loader_1.SPComponentLoader.loadComponent(manifest);
            modulePromise.then(function () {
                sp_telemetry_1._PerformanceLogger.endMarkForComponent(perfLogKeyScriptLoad);
                sp_telemetry_1._PerformanceLogger.logPerformanceMetricToConsole(perfLogKeyScriptLoad, 'Extension.ScriptLoad', manifest.id, manifest.alias);
            });
            var createPromise = modulePromise.then(function (component) {
                var extensionClass = component.default;
                var extension = new extensionClass();
                if (!(extension instanceof BaseExtension_1.default)) {
                    error = new Error(ExtensionStrings_resx_1.default.expectingBaseExtension);
                    qosMonitor.writeExpectedFailure('DoesNotExtendBaseExtension', error, extraData);
                    throw error;
                }
                if (!(extension instanceof _this._expectedType)) {
                    error = Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.wrongExtensionType, _this._expectedType));
                    qosMonitor.writeExpectedFailure('WrongExtensionType', error, extraData);
                    throw error;
                }
                return extension._init(context, propertiesJson).then(function () {
                    return extension;
                }).catch(function (e) {
                    error = new Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.extensionInitFailure, componentId));
                    qosMonitor.writeExpectedFailure('ExtensionInitFailure', error, extraData);
                    throw error;
                });
            }, function (e) {
                if (!error) {
                    error = new Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.extensionLoadFailure, componentId));
                    qosMonitor.writeExpectedFailure('ExtensionLoadFailure', error, extraData);
                }
                throw error;
            }).then(function (extension) {
                qosMonitor.writeSuccess(extraData);
                return extension;
            });
            createPromise.then(function (moduleLibrary) {
                sp_telemetry_1._PerformanceLogger.endMarkForComponent(perfLogKeyCreate);
                sp_telemetry_1._PerformanceLogger.logPerformanceMetricToConsole(perfLogKeyScriptLoad, 'Extension.Create', manifest.id, manifest.alias);
            });
            this._extensionPromises.push(createPromise);
            return createPromise;
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure('UnhandledCreateError', e, extraData);
            return Promise.reject(e);
        }
    };
    ExtensionManager.prototype.waitForInitialization = function () {
        return Promise.all(this._extensionPromises);
    };
    ExtensionManager.prototype.dispose = function () {
        var promisesToDispose = this._extensionPromises;
        this._extensionPromises = [];
        for (var _i = 0, promisesToDispose_1 = promisesToDispose; _i < promisesToDispose_1.length; _i++) {
            var promise = promisesToDispose_1[_i];
            promise.then(function (extension) {
                try {
                    extension.dispose();
                }
                catch (e) {
                    var manifest = extension.manifest;
                    sp_telemetry_1._TraceLogger.logError(ExtensionManager._logSource, new Error("Failed to dispose extension \"" + manifest.alias + "\"\n              + \" with id=" + manifest.id + ": " + e.message));
                }
            });
        }
    };
    ExtensionManager.prototype._createQosExtraData = function (alias, isInternal, manifestId) {
        var unexpectedFailureExtraData = {
            alias: alias,
            isInternal: isInternal,
            manifestId: manifestId
        };
        return unexpectedFailureExtraData;
    };
    ExtensionManager._logSource = sp_telemetry_1._LogSource.create('ExtensionManager');
    return ExtensionManager;
}());
exports.default = ExtensionManager;
