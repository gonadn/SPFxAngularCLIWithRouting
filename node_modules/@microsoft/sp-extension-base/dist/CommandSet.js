var CommandSet = (function () {
    function CommandSet(serverURL) {
        this._serverURL = serverURL;
        this._listName = 'TABTestFieldCustomizerList';
        this._commandItems = [];
    }
    CommandSet.prototype.TestName = function () {
        return 'CommandSet Test';
    };
    CommandSet.prototype.TestOwner = function () {
        return 'dagaeta';
    };
    CommandSet.prototype.TestIncludeScripts = function () {
        return [
            '<ProductScriptsLocation>msajaxbundle.debug.js',
            '<ProductScriptsLocation>sp.runtime.debug.js',
            '<ProductScriptsLocation>sp.debug.js',
            '<TestLocation>/TabTaskLib.debug.js',
            '<AzureTaskLibLocation>/sp-tab-tasklib.js'
        ];
    };
    CommandSet.prototype.TestSetup = function () {
        TAB.Log.Comment('CommandSet test start');
        SPTaskLib.ExtensionUtil.loadList(this._listName);
    };
    CommandSet.prototype.TestRun = function () {
        var customListPagePath = "/Lists/" + this._listName + "/AllItems.aspx";
        var customActionParams = '{"1516565a-1785-4cb4-b339-79f104f88d22":' +
            '{"location":"ClientSideExtension.ListViewCommandSet.CommandBar"}}';
        var azurePath = TAB.Settings.Get('AzurePath');
        var moduleLoader = azurePath + "/listview-host-assembly_en-us.js";
        var spQueryParams = {
            loadSPFX: true,
            customActions: customActionParams,
            debugManifestsFile: SPTaskLib.PageUtil.GetDebugManifestsUrl(),
            moduleloader: moduleLoader
        };
        var pageUrl = SPTaskLib.PageUtil.CreatePageUrl(customListPagePath, spQueryParams);
        TAB.AddTask(TAB.LoadPage(pageUrl));
        var listPageReady = TAB.MakeWaiter(function () {
            return TAB.GetElements(TAB.Win, TAB.searchBy.className, 'CommandBarItem-link').length > 0;
        });
        SPTaskLib.PageUtil.AddTaskClearSecurityDialog(listPageReady);
        TAB.AddTask(TAB.MakeTask(function () {
            TAB.Log.Comment('Validating CommandSet items are set by the ' +
                'CommandSet extension (should be \'Command One\' and \'Command Two\').');
        }), TAB.MakeWaiter(function () {
            var commandLinks = [];
            var queriedElements = TAB.GetElements(TAB.Win, TAB.searchBy.className, 'CommandBarItem-link');
            Array.prototype.forEach.call(queriedElements, (function (value) {
                if (value.innerText.trim() === 'Command One' || value.innerText.trim() === 'Command Two') {
                    commandLinks.push(value);
                }
            }));
            return commandLinks.length === 2;
        }));
        TAB.AddTask(TAB.MakeTask(function () {
            var commandItems = TAB.GetElements(TAB.Win, TAB.searchBy.className, 'CommandBarItem-link');
            var commandItemOne = undefined;
            var commandItemTwo = undefined;
            for (var _i = 0, commandItems_1 = commandItems; _i < commandItems_1.length; _i++) {
                var commandItem = commandItems_1[_i];
                if (commandItem.innerText.trim() === 'Command One') {
                    commandItemOne = commandItem;
                }
                else if (commandItem.innerText.trim() === 'Command Two') {
                    commandItemTwo = commandItem;
                }
            }
            if (!commandItemOne || !commandItemTwo) {
                TAB.Log.AddTaskFail('Command Item titles are incorrect.');
            }
            if (commandItemOne) {
                SPTaskLib.ExtensionUtil.testCommandItem(commandItemOne, 'CommandOneDiv');
            }
            if (commandItemTwo) {
                SPTaskLib.ExtensionUtil.testCommandItem(commandItemTwo, 'CommandTwoDiv');
            }
        }));
        TAB.Log.AddTaskPass('Test complete');
    };
    return CommandSet;
}());
TabTest = CommandSet;
