{"version":3,"sources":["codeGenerator.ts"],"names":[],"mappings":"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","file":"codeGenerator.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nimport { EOL } from 'os';\r\nimport * as uglify from 'uglify-js';\r\n\r\nimport {\r\n  ISetWebpackPublicPathOptions\r\n} from './SetPublicPathPlugin';\r\n\r\nexport const registryVariableName: string = 'window.__setWebpackPublicPathLoaderSrcRegistry__';\r\n\r\nexport interface IInternalOptions extends ISetWebpackPublicPathOptions {\r\n  webpackPublicPathVariable?: string;\r\n  regexName?: string;\r\n  linePrefix?: string;\r\n}\r\n\r\nconst varName: string = 'publicPath';\r\n\r\nexport function getSetPublicPathCode(options: IInternalOptions, emitWarning: (warning: string) => void): string {\r\n  if (!options.webpackPublicPathVariable) {\r\n    throw '\"webpackPublicPathVariable\" option must be defined.';\r\n  }\r\n\r\n  let lines: string[] = [];\r\n  if (options.regexName) {\r\n    // Double-escape backslashes to make them show up as single backslashes in regexps.\r\n    const escapedRegex: string = options.regexName.replace(/\\\\/, '\\\\\\\\');\r\n\r\n    lines = [\r\n      `var scripts = document.getElementsByTagName('script');`\r\n    ];\r\n\r\n    const regexInitializationSnippet: string = `new RegExp('${escapeSingleQuotes(escapedRegex)}', 'i')`;\r\n    const regexVarName: string | undefined = options.regexVariable;\r\n    if (options.regexVariable) {\r\n      lines.push(...[\r\n        `var regex = (typeof ${regexVarName} !== 'undefined') ? ${regexVarName} : ${regexInitializationSnippet};`\r\n      ]);\r\n    } else {\r\n      lines.push(...[\r\n        `var regex = ${regexInitializationSnippet};`\r\n      ]);\r\n    }\r\n\r\n    lines.push(...[\r\n      `var ${varName};`,\r\n      '',\r\n      'if (scripts && scripts.length) {',\r\n      '  for (var i = 0; i < scripts.length; i++) {',\r\n      '    if (!scripts[i]) continue;',\r\n      `    var path = scripts[i].getAttribute('src');`,\r\n      '    if (path && path.match(regex)) {',\r\n      `      ${varName} = path.substring(0, path.lastIndexOf('/') + 1);`,\r\n      '      break;',\r\n      '    }',\r\n      '  }',\r\n      '}',\r\n      '',\r\n      `if (!${varName}) {`,\r\n      `  for (var global in ${registryVariableName}) {`,\r\n      '    if (global && global.match(regex)) {',\r\n      `      ${varName} = global.substring(0, global.lastIndexOf('/') + 1);`,\r\n      '      break;',\r\n      '    }',\r\n      '  }',\r\n      '}'\r\n    ]);\r\n\r\n    if (options.getPostProcessScript) {\r\n      lines.push(...[\r\n        '',\r\n        `if (${varName}) {`,\r\n        `  ${options.getPostProcessScript(varName)};`,\r\n        '}',\r\n        ''\r\n      ]);\r\n    }\r\n  } else {\r\n    if (options.publicPath) {\r\n      lines.push(...[\r\n        `var ${varName} = '${appendSlashAndEscapeSingleQuotes(options.publicPath)}';`,\r\n        ''\r\n      ]);\r\n    } else if (options.systemJs) {\r\n      lines.push(...[\r\n        `var ${varName} = window.System ? window.System.baseURL || '' : '';`,\r\n        `if (${varName} !== '' && ${varName}.substr(-1) !== '/') ${varName} += '/';`,\r\n        ''\r\n      ]);\r\n    } else {\r\n      emitWarning(`Neither 'publicPath' nor 'systemJs' is defined, so the public path will not be modified`);\r\n\r\n      return '';\r\n    }\r\n\r\n    if (options.urlPrefix && options.urlPrefix !== '') {\r\n      lines.push(...[\r\n        `${varName} += '${appendSlashAndEscapeSingleQuotes(options.urlPrefix)}';`,\r\n        ''\r\n      ]);\r\n    }\r\n\r\n    if (options.getPostProcessScript) {\r\n      lines.push(...[\r\n        `if (${varName}) {`,\r\n        `  ${options.getPostProcessScript(varName)};`,\r\n        '}',\r\n        ''\r\n      ]);\r\n    }\r\n  }\r\n\r\n  lines.push(\r\n    `${options.webpackPublicPathVariable} = ${varName};`\r\n  );\r\n\r\n  return joinLines(lines, options.linePrefix);\r\n}\r\n\r\n/**\r\n * /**\r\n * This function returns a block of JavaScript that maintains a global register of script tags.\r\n *\r\n * @param debug - If true, the code returned code is not minified. Defaults to false.\r\n *\r\n * @public\r\n */\r\nexport function getGlobalRegisterCode(debug: boolean = false): string {\r\n  const lines: string[] = [\r\n    '(function(){',\r\n    `if (!${registryVariableName}) ${registryVariableName}={};`,\r\n    `var scripts = document.getElementsByTagName('script');`,\r\n    'if (scripts && scripts.length) {',\r\n    '  for (var i = 0; i < scripts.length; i++) {',\r\n    '    if (!scripts[i]) continue;',\r\n    `    var path = scripts[i].getAttribute('src');`,\r\n    `    if (path) ${registryVariableName}[path]=true;`,\r\n    '  }',\r\n    '}',\r\n    '})();'\r\n  ];\r\n\r\n  const joinedScript: string = joinLines(lines);\r\n\r\n  if (debug) {\r\n    return `${EOL}${joinedScript}`;\r\n  } else {\r\n    const minifyOutput: uglify.MinifyOutput = uglify.minify(\r\n      joinedScript,\r\n      {\r\n        compress: {\r\n          dead_code: true\r\n        }\r\n      }\r\n    );\r\n\r\n    return `${EOL}${minifyOutput.code}`;\r\n  }\r\n}\r\n\r\nfunction joinLines(lines: string[], linePrefix?: string): string {\r\n  return lines.map((line: string) => {\r\n    if (!!line) {\r\n      return `${linePrefix || ''}${line}`;\r\n    } else {\r\n      return line;\r\n    }\r\n  }).join(EOL).replace(new RegExp(`${EOL}${EOL}+`, 'g'), `${EOL}${EOL}`);\r\n}\r\n\r\nfunction escapeSingleQuotes(str: string): string | undefined {\r\n  if (str) {\r\n    return str.replace('\\'', '\\\\\\'');\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction appendSlashAndEscapeSingleQuotes(str: string): string | undefined {\r\n  if (str && str.substr(-1) !== '/') {\r\n    str = str + '/';\r\n  }\r\n\r\n  return escapeSingleQuotes(str);\r\n}\r\n"],"sourceRoot":"..\\src"}