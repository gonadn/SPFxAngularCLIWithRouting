"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const lodash_1 = require("lodash");
const codeGenerator_1 = require("./codeGenerator");
/**
 * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments,
 *  optionally appended to the SystemJs baseURL property.
 *
 * @public
 */
class SetPublicPathPlugin {
    constructor(options) {
        this.options = options;
    }
    apply(compiler) {
        compiler.plugin('compilation', (compilation, params) => {
            compilation.mainTemplate.plugin('startup', (source, chunk, hash) => {
                let assetOrChunkFound = chunk.chunks.length > 0;
                if (!assetOrChunkFound) {
                    chunk.forEachModule((innerModule) => {
                        if (innerModule.assets && Object.keys(innerModule.assets).length > 0) {
                            assetOrChunkFound = true;
                        }
                    });
                }
                if (assetOrChunkFound) {
                    const moduleOptions = lodash_1.cloneDeep(this.options);
                    // If this module has ownership over any chunks or assets, inject the public path code
                    moduleOptions.webpackPublicPathVariable = `${compilation.mainTemplate.requireFn}.p`;
                    moduleOptions.linePrefix = '  ';
                    if (this.options.scriptName) {
                        moduleOptions.regexName = this.options.scriptName.name;
                        if (this.options.scriptName.isTokenized) {
                            moduleOptions.regexName = moduleOptions.regexName.replace(/\[name\]/g, lodash_1.escapeRegExp(chunk.name))
                                .replace(/\[hash\]/g, chunk.renderedHash);
                        }
                    }
                    return [
                        '// Set the webpack public path',
                        '(function () {',
                        codeGenerator_1.getSetPublicPathCode(moduleOptions, console.error),
                        '})();',
                        '',
                        source
                    ].join(os_1.EOL);
                }
                else {
                    return source;
                }
            });
        });
    }
}
exports.SetPublicPathPlugin = SetPublicPathPlugin;

//# sourceMappingURL=SetPublicPathPlugin.js.map
