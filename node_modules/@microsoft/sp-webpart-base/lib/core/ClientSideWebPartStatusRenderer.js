'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ReactDOM = require("react-dom");
var React = require("react");
var decorators_1 = require("@microsoft/decorators");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var PlaceholderSpinner_1 = require("../components/placeHolder/PlaceholderSpinner");
var Strings_resx_1 = require("./loc/Strings.resx");
var ErrorMessage_1 = require("./ErrorMessage");
var FriendlyErrorMessage_1 = require("./FriendlyErrorMessage");
var ClassicPageUtils_1 = require("./classicPages/ClassicPageUtils");
var ClientSideWebPartStatusRenderer = (function () {
    function ClientSideWebPartStatusRenderer() {
        this._errorId = 'cswp-error';
        this._logSource = sp_telemetry_1._LogSource.create('ClientSideWebPartStatusRenderer');
        this._activeIndicatorCache = new Map();
    }
    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage, timeout) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!timeout || (timeout && isNaN(timeout))) {
            timeout = 1500; 
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.loadingTimer) {
            window.clearTimeout(cacheEntry.loadingTimer);
        }
        this._renderSpinner(domElement, loadingMessage, false);
        cacheEntry.loadingTimer =
            window.setTimeout(function () { _this._renderSpinner(domElement, loadingMessage, true); }, timeout);
    };
    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (this._activeIndicatorCache.has(domElement)) {
            var cacheEntry = this._getCacheEntry(domElement);
            sp_telemetry_1._TraceLogger.logVerbose(this._logSource, Strings_resx_1.default.ClearLoadingIndicator);
            if (cacheEntry.loadingTimer) {
                window.clearTimeout(cacheEntry.loadingTimer);
            }
            if (cacheEntry.placeholder) {
                cacheEntry.placeholder.clearPlaceholder();
                ReactDOM.unmountComponentAtNode(domElement);
            }
            this._activeIndicatorCache.delete(domElement);
        }
    };
    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        sp_core_library_1.Validate.isNotNullOrUndefined(error, 'error');
        var errorText = '';
        if (error instanceof sp_core_library_1.SPError) {
            errorText = error.toStringForUI();
        }
        else {
            var vanillaError = error;
            var stack = vanillaError.stack;
            var newLineSeparator = '\r\n';
            var callStack = stack ? sp_core_library_1.Text.format(Strings_resx_1.default.WebpartErrorCallStackText, newLineSeparator, stack) : '';
            errorText = sp_core_library_1.Text.format(Strings_resx_1.default.WebpartErrorErrorText, newLineSeparator, "" + (vanillaError.message || error), callStack);
        }
        var cacheEntry = this._getCacheEntry(domElement);
        cacheEntry.isErrorBeingRendered = true;
        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
        if (divErr) {
            divErr.style.display = 'block';
        }
        else {
            if (!this._errorHtml) {
                var errorComponent = void 0;
                if (!DEBUG) {
                    errorComponent = FriendlyErrorMessage_1.default;
                }
                else {
                    errorComponent = ErrorMessage_1.default;
                }
                var el = React.createElement(errorComponent, { errorMessage: errorText });
                divErr = document.createElement('div');
                divErr.setAttribute('data-sp-id', this._errorId);
                divErr.setAttribute('data-automation-id', 'webPartError');
                domElement.appendChild(divErr);
                ReactDOM.render(el, divErr);
                ClassicPageUtils_1.default.disableAutomaticPostbacks(domElement, sp_core_library_1.Environment.type);
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
        sp_core_library_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._activeIndicatorCache.get(domElement);
        if (cacheEntry && cacheEntry.isErrorBeingRendered) {
            cacheEntry.isErrorBeingRendered = false;
            var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
            if (divErr) {
                divErr.style.display = 'none';
                divErr.removeAttribute('data-automation-id');
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype._renderSpinner = function (domElement, loadingMessage, showSpinner) {
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.isErrorBeingRendered) {
            return;
        }
        sp_telemetry_1._TraceLogger.logVerbose(this._logSource, Strings_resx_1.default.DisplayLoadingIndicator);
        if (!cacheEntry.placeholder) {
            var el = React.createElement(PlaceholderSpinner_1.default, { hideSpinner: !showSpinner, label: sp_core_library_1.Text.format(Strings_resx_1.default.LoadingStatus, loadingMessage) });
            cacheEntry.placeholder = ReactDOM.render(el, domElement);
        }
        else {
            cacheEntry.placeholder.showSpinner(showSpinner);
        }
    };
    ClientSideWebPartStatusRenderer.prototype._getCacheEntry = function (domElement) {
        if (this._activeIndicatorCache.has(domElement)) {
            return this._activeIndicatorCache.get(domElement);
        }
        var cacheEntry = {
            loadingTimer: undefined,
            placeholder: undefined,
            isErrorBeingRendered: false
        };
        this._activeIndicatorCache.set(domElement, cacheEntry);
        return cacheEntry;
    };
    ClientSideWebPartStatusRenderer = tslib_1.__decorate([
        decorators_1.sealed
    ], ClientSideWebPartStatusRenderer);
    return ClientSideWebPartStatusRenderer;
}());
exports.default = ClientSideWebPartStatusRenderer;
