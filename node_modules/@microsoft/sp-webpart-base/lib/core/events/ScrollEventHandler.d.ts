/**
 * @internal
 */
export interface IScrollEventHandler {
    (event: Event, clientRect: ClientRect): void;
}
/**
 * Common scroll event handler to optimize multiple individual handlers and cost of calculating ClientRect.
 * It also optimizes calculating scrollable parents.
 * It also notifies on window resize besides scroll event
 *
 * @internal
 */
export default class ScrollEventHandler {
    /**
     * Singleton instance of the ScrollEventHandler
     */
    private static _instance;
    /**
     * This attribute managed the number of scroll event handlers that are registered to
     * a scrollable parent. When the number of events becomes zero, the event handler is
     * unregistered.
     */
    private static readonly _eventTrackerAttribute;
    private static readonly SCROLL;
    private static readonly RESIZE;
    private static readonly CACHE_EXPIRED;
    /**
     * This is a throttled version of the lazy event handler. This is used to make sure
     * we do not call the scroll event handler too often.
     */
    private _lazyHandler;
    private _isListeningWindow;
    private _eventListeners;
    private _scrollableParents;
    private _cachedClientRect;
    private _cachedClientRectAge;
    /**
    * Traverses up the DOM tree for the element with the data-is-scrollable=true attribute,
    * or return the window object.
    */
    private static _findScrollableParent(startingElement);
    static readonly instance: ScrollEventHandler;
    /**
     * Reset scroll event handler
     */
    reset(): void;
    /**
     * Register an element to receive notification on scroll event
     *
     * @param element - Element for which scroll event is desired
     * @param callbackFunction - Callback function for handling event
     * @param scrollableParent - Optional scrollable Parent if already known
     */
    register(element: HTMLElement, callbackFunction: IScrollEventHandler, scrollableParent?: HTMLElement): void;
    /**
     * Unregister a loaded web part which should not be tracked any more.
     */
    unregister(element: HTMLElement, callbackFunction: IScrollEventHandler): void;
    /**
     * Private Contructor of singleton class
     */
    private constructor();
    /**
     * Event handler which is called upon scroll and resize events.
     */
    private _scrollEventHandler(event);
    /**
    * Returns all scrollable parents between element and the body of the document.
    * It is often one but in case of Classic pages there might be intermediate parents.
    */
    private _findScrollableParents(startingElement);
    /**
    * Start listening to scroll and resize events. It is safe to call this API multiple times on a DOM
    * element, it does not lead to multiple attached events.
    */
    private _listenEvents(parent);
    /**
     * Add Listener to scroll and resize events for given element or window
     */
    private _addEventListerer(element);
    /**
    * Stop listening to scroll and resize events.
    */
    private _unlistenEvents(parent);
    /**
     * Remove Listeners from scroll and resize events for given element or window
     */
    private _removeEventListener(element);
    /**
     * It keeps track of how many lazily loaded children are registered to a scrollable parent.
     * This record keeping is required to deregister event handler from the parent when There
     * are no children listening to events.
     */
    private _updateRegisteredChildren(scrollableParent, count);
    private readonly _optimizeScrollableParent;
    private readonly _cacheExpired;
}
