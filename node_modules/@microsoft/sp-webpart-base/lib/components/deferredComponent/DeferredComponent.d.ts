/// <reference types="react" />
/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Abstract React component for deferred component code.
 */
import * as React from 'react';
/**
 * Deferred component props.
 * @internal
 */
export interface IDeferredComponentProps<ComponentProps> {
    /**
     * An array of callbacks invoked after the _internalLoad Promise is resolved. Rendering is asynchronous so there
     * is no gurantee that is complete.
     */
    onAfterLoad?: Function[];
    /**
     * The props of the deferred React component.
     */
    deferredProps?: ComponentProps;
    /**
     * Number of milliseconds to delay invoking the loader when the component will mount. Default is 0. If a negative
     * value is specified then loading must be manually invoked.
     */
    duration?: number;
}
/**
 * Deferred component state
 * @internal
 */
export interface IDeferredComponentState<ComponentProps> {
    /**
     * The deferred React ComponentClass.
     */
    component: React.ComponentClass<ComponentProps>;
}
/**
 * DeferredComponent is a generic React component to define the pattern of React components loaded after
 * the initial code download.
 *
 * @param ComponentProps - The type of the props used to render the deferred component.
 *
 * Example:
 * class DeferredComponent extends Deferred<IComponentProps> {
 *   protected _require(): Promise<React.ComponentClass<IComponentProps>> {
 *     // code to lazy load e.g. require.ensure(...) or import(...)
 *   }
 * }
 *
 * @internal
 */
export default abstract class DeferredComponent<IProps> extends React.Component<IDeferredComponentProps<IProps>, Partial<IDeferredComponentState<IProps>>> {
    private _loadPromise;
    /**
     * Construct a new instance of the DeferredComponent component.
     *
     * @param props - DeferredComponent props
     */
    constructor(props: IDeferredComponentProps<IProps>);
    /**
     * @returns Whether or not the code should load. Value should not change during the lifecycle of an instance.
     */
    private readonly _shouldLoad;
    /**
     * Start component loading when the component mounts.
     */
    componentWillMount(): void;
    /**
     * Render, if loaded, the deferred React component. If not loaded, skip rendering.
     *
     * @returns - The React component or false.
     */
    render(): React.ReactElement<IProps> | false;
    /**
     * Invokes _internalLoad to download the deferred code. After the download is complete,
     * re-render with a new instance of the deferred component and invoke any onAfterLoad callbacks.
     *
     * @returns - A Promise yielding the deferred React ComponentClass
     */
    load(): Promise<React.ComponentClass<IProps>>;
    /**
     * Abstract method to define the logic for loading the deferred React component.
     *
     * @returns - A promise yielding the deferred React ComponentClass.
     */
    protected abstract _internalLoad(): Promise<React.ComponentClass<IProps>>;
}
