"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _Animations = (function () {
    function _Animations() {
        this._pendingElements = [];
    }
    Object.defineProperty(_Animations, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new _Animations();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    _Animations.prototype.init = function () {
        var _this = this;
        this._ensureScrollRevealLoaded().then(function () {
            _this._tryConfigureAndRevealPending();
        });
    };
    _Animations.prototype.reveal = function (elem) {
        var _this = this;
        requestAnimationFrame(function () { return _this._reveal(elem); });
    };
    _Animations.prototype.setScrollableParent = function (elem) {
        this._scrollableParent = elem;
        this._tryConfigureAndRevealPending();
    };
    _Animations.prototype.clear = function () {
        this._scrollableParent = undefined;
        this._scrollReveal = undefined;
    };
    _Animations.prototype._reveal = function (elem) {
        if (!elem) {
            return;
        }
        if (!!this._scrollReveal) {
            var height = elem.clientHeight;
            var viewFactor = Math.min(0.25, 100 / height);
            this._scrollReveal.reveal(elem, { viewFactor: viewFactor });
        }
        else {
            this._pendingElements.push(elem);
        }
    };
    _Animations.prototype._tryConfigureAndRevealPending = function () {
        var _this = this;
        if (!!this._scrollRevealLibrary && !!this._scrollableParent && !this._scrollReveal) {
            this._scrollReveal =
                this._scrollRevealLibrary({
                    scale: 1,
                    origin: 'bottom',
                    duration: 750,
                    distance: '20px',
                    easing: 'cubic-bezier(0.33, 0.0, 0.0, 1)',
                    container: this._scrollableParent
                });
            this._pendingElements.forEach(function (elem) {
                _this.reveal(elem);
            });
            this._pendingElements = [];
        }
    };
    _Animations.prototype._ensureScrollRevealLoaded = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (!_this._scrollRevealLibrary) {
                require.ensure([], function (require) {
                    _this._scrollRevealLibrary = require('scrollReveal');
                    resolve(_this._scrollRevealLibrary);
                });
            }
            else {
                resolve(_this._scrollRevealLibrary);
            }
        });
    };
    return _Animations;
}());
exports.default = _Animations;
