import '@microsoft/microsoft-graph-client/lib/graph-js-sdk-web';
import { Options } from '@microsoft/microsoft-graph-client/lib/src/common';
import { GraphRequest } from '@microsoft/microsoft-graph-client/lib/src/GraphRequest';
import { ServiceKey, ServiceScope } from '@microsoft/sp-core-library';
/**
 * MSGraphClient is used to perform REST calls against Microsoft Graph.
 *
 * @remarks The Microsoft Graph JavaScript client library is a lightweight wrapper around the
 * Microsoft Graph API. This class allows developers to start making REST calls to MSGraph without
 * needing to initialize the the MSGraph client library. If a custom configuration is desired,
 * the MSGraphClient api function needs to be provided with that custom configuration for
 * every request.
 *
 * Find out more about the MSGraphSDK here:
 * https://github.com/microsoftgraph/msgraph-sdk-javascript
 * @beta
 */
export default class MSGraphClient {
    /**
     * The service key for MSGraphClient.
     */
    static readonly serviceKey: ServiceKey<MSGraphClient>;
    private static _instance;
    private _getOAuth2TokenPromise;
    private _originalConfig;
    /**
     *
     * @internal
     */
    constructor(serviceScope: ServiceScope);
    /**
     * All calls to Microsoft Graph are chained together starting with the api function.
     *
     * @remarks Path supports the following formats:
     *
     * me
     *
     * /me
     *
     * https://graph.microsoft.com/v1.0/me
     *
     * https://graph.microsoft.com/beta/me
     *
     * me/events?$filter=startswith(subject, 'ship')
     *
     * The authProvider and baseUrl option should not be used, as they have already been
     * provided by the framework. See the official documentation here:
     * https://github.com/microsoftgraph/msgraph-sdk-javascript
     *
     * @param path - The path for the request to MSGraph.
     * @param config - Sets the configuration for this request.
     */
    api(path: string, config?: Options): GraphRequest;
    private _configureGraphSDK(tokenProvider);
    private _getOAuthToken(tokenProvider);
}
