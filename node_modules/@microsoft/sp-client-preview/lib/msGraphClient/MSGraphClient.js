"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@microsoft/microsoft-graph-client/lib/graph-js-sdk-web");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_http_1 = require("@microsoft/sp-http");
var MSGraphClient = (function () {
    function MSGraphClient(serviceScope) {
        var _this = this;
        serviceScope.whenFinished(function () {
            if (!MSGraphClient._instance) {
                _this._configureGraphSDK(serviceScope.consume(sp_http_1.AadTokenProvider.serviceKey));
            }
        });
    }
    MSGraphClient.prototype.api = function (path, config) {
        if (!MSGraphClient._instance) {
            throw new Error('This instance of the MSGraphClient has not been initialized.');
        }
        sp_core_library_1.Validate.isNonemptyString(path, 'path');
        MSGraphClient._instance.config = sp_lodash_subset_1.clone(this._originalConfig);
        if (config) {
            for (var key in config) {
                if (config[key]) {
                    MSGraphClient._instance.config[key] = config[key];
                }
            }
        }
        return MSGraphClient._instance.api(path);
    };
    MSGraphClient.prototype._configureGraphSDK = function (tokenProvider) {
        var _this = this;
        if (!window.MicrosoftGraph.Client) {
            throw new Error('MSGraphClient cannot be constructed due to an unknown failure');
        }
        var graphClientModule = window.MicrosoftGraph.Client;
        window.MicrosoftGraph = undefined;
        MSGraphClient._instance = graphClientModule.init({
            authProvider: function (done) {
                _this._getOAuthToken(tokenProvider).then(function (token) {
                    done(undefined , token);
                }).catch(function (e) {
                    done(e, '');
                });
            },
            baseUrl: sp_http_1._GraphConstants.PROD_OAUTH_TOKEN_URL
        });
        this._originalConfig = MSGraphClient._instance.config;
    };
    MSGraphClient.prototype._getOAuthToken = function (tokenProvider) {
        if (!this._getOAuth2TokenPromise) {
            this._getOAuth2TokenPromise = new Promise(function (resolve, reject) {
                var qosMonitor = new sp_telemetry_1._QosMonitor('MSGraphClient.FetchGraphToken');
                return tokenProvider.getToken(sp_http_1._GraphConstants.PROD_OAUTH_TOKEN_URL)
                    .then(function (response) {
                    qosMonitor.writeSuccess();
                    resolve(response);
                }).catch(function (error) {
                    qosMonitor.writeUnexpectedFailure('FetchGraphToken', error);
                    reject(error);
                });
            });
        }
        return this._getOAuth2TokenPromise;
    };
    MSGraphClient.serviceKey = sp_core_library_1.ServiceKey.create('sp-http:MSGraphClient', MSGraphClient);
    return MSGraphClient;
}());
exports.default = MSGraphClient;
