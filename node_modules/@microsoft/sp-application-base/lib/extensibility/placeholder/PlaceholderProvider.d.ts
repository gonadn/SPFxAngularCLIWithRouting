import { ServiceScope, Event, EventArgs } from '@microsoft/sp-core-library';
import PlaceholderContent from './PlaceholderContent';
import PlaceholderName from './PlaceholderName';
/**
 * Options for the {@link PlaceholderProvider.tryCreateContent} method.
 *
 * @public
 */
export interface IPlaceholderCreateContentOptions {
    /**
     * An optional callback that will be invoked when the PlaceholderContent object
     * is disposed.
     *
     * @remarks
     * To avoid a resource leak, use this callback to free any resources that were allocated
     * when the placeholder content was rendered.  For example, if ReactDOM.render() was
     * used to mount a React component, then the onDispose handler might call
     * ReactDOM.unmountComponentAtNode() to unmount it.
     */
    onDispose?: (placeholderContent: PlaceholderContent) => void;
}
/**
 * Allows third-party components to discover and use SharePoint placeholders.  Placeholders
 * enable third-party components to render custom content into designated regions on the page.
 *
 * @remarks
 * Placeholders are designated regions on the page, identified by one of the predefined
 * {@link PlaceholderName} constants.  Different applications and pages might support different
 * placeholder names.  Placeholders can appear and disappear as the user interacts with the page,
 * for example via in-place navigation.  Third-party components should not assume that a given placeholder
 * will always be available.
 *
 * Use {@link PlaceholderProvider.tryCreateContent} to test whether a placeholder is
 * available and add content to it.   Use the {@link PlaceholderProvider.changedEvent} event
 * to discover when new placeholders appear.
 *
 * @public
 */
export default class PlaceholderProvider {
    private _sequence;
    private _placeholderManager;
    /**
     * List of available placeholders. It is set to undefined if the placeholders are not initialized
     */
    private _placeholders;
    /**
     * @internal
     */
    constructor(serviceScope: ServiceScope, sequence: number);
    /**
     * Tests whether the page contains the specified placeholder.  If so, a new PlaceholderContent
     * object is created, which allows the caller to render custom content inside the placeholder.
     *
     * @param name - The requested placeholder
     * @param options - Additional options, for example to detect when the placeholder is disposed.
     * @returns A new PlaceholderContent object, or undefined if the requested placeholder does not exist.
     *
     * @remarks
     *
     * The host application makes no guarantees about the availability of a given placeholder.
     * In situations where an expected placeholder is not available, the third-party extension
     * must handle it gracefully, e.g. by not rendering anything, or by choosing an alternative
     * placeholder.
     */
    tryCreateContent(name: PlaceholderName, options?: IPlaceholderCreateContentOptions): PlaceholderContent | undefined;
    /**
     * Returns the names of the currently available placeholders.
     */
    readonly placeholderNames: ReadonlyArray<PlaceholderName>;
    /**
     * This event is raised when the list of currently available placeholders is changed.
     *
     * @remarks
     * The application can change its list of available placeholders at any time. This means that the existing
     * placeholders may get disposed or new placeholders may be added. Use this event to discover new
     * placeholders when they appear.
     */
    readonly changedEvent: Event<EventArgs>;
    /**
     * This function is called by each member function to check whether this._placeholderManager.definitions
     * has been initialized yet.  This is a temporary solution until proper event notifications are wired up.
     */
    private _tryInitialize();
}
