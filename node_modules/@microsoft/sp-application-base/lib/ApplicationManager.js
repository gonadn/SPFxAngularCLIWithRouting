"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_http_1 = require("@microsoft/sp-http");
var sp_loader_1 = require("@microsoft/sp-loader");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var loadThemedStyles = require("@microsoft/load-themed-styles");
var SPApplicationBase_resx_1 = require("./SPApplicationBase.resx");
var SuiteNavManager_1 = require("./suiteNav/SuiteNavManager");
var SPPageChrome_1 = require("./pageChrome/SPPageChrome");
var ApplicationCustomizerLoader_1 = require("./extensibility/ApplicationCustomizerLoader");
var Navigator_1 = require("./navigator/Navigator");
var startQosScenarioName = 'ApplicationManager.start';
var applicationFailedToLoadFailure = 'ApplicationFailedToLoad';
var shellStartFailure = 'SPShell.Start';
var ApplicationManager = (function () {
    function ApplicationManager() {
    }
    ApplicationManager._isChromelessApplication = function (applicationId) {
        return sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.ClassicSharePoint ||
            applicationId === 'b1ab4aaa-f779-405c-8683-d3a750b5d18d';
    };
    ApplicationManager.prototype.startApplication = function (preloadedData) {
        var _this = this;
        sp_core_library_1.Validate.isNonemptyString(preloadedData.clientSideApplicationId, 'preloadedData.clientSideApplicationId');
        var qosMonitor = new sp_telemetry_1._QosMonitor(startQosScenarioName);
        function error(message, failureId) {
            var err = new Error(message);
            sp_telemetry_1._TraceLogger.logError(ApplicationManager._logSource, err);
            qosMonitor.writeUnexpectedFailure(failureId, err);
            throw err;
        }
        return Promise.resolve().then(function () {
            var applicationId = preloadedData.clientSideApplicationId;
            return _this._loadApplication(applicationId, error).then(function (application) {
                _this._initializePreloadedData(preloadedData);
                sp_telemetry_1._PerformanceLogger.markApplicationStart();
                return _this._initializeApplication(application.default, preloadedData).then(function (result) {
                    qosMonitor.writeSuccess();
                    return result;
                }).catch(function (e) {
                    return error(sp_core_library_1.Text.format(SPApplicationBase_resx_1.default.applicationFailedToInitializeError, e), shellStartFailure);
                });
            });
        });
    };
    ApplicationManager.prototype._loadApplication = function (applicationId, error) {
        return sp_loader_1.SPComponentLoader.loadComponentById(applicationId)
            .catch(function (e) {
            return error(sp_core_library_1.Text.format(SPApplicationBase_resx_1.default.applicationFailedToLoadWithMessageError, applicationId, e.message), applicationFailedToLoadFailure);
        });
    };
    ApplicationManager.prototype._isChromelessApplication = function () {
        return ApplicationManager._isChromelessApplication(this._preloadedData.clientSideApplicationId);
    };
    ApplicationManager.prototype._initializeApplication = function (application, preloadedData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (application['__type'] !== 'BaseApplication') {
                reject(new Error('The application is not a subclass of BaseApplication'));
                return;
            }
            var qosMonitor = new sp_telemetry_1._QosMonitor('ClientApplication');
            var applicationManifest = sp_loader_1.SPComponentLoader.tryGetManifestById(preloadedData.clientSideApplicationId);
            var qosApplicationData = {
                alias: application.alias || applicationManifest.alias,
                isInternal: applicationManifest.isInternal,
                manifestId: applicationManifest.id
            };
            try {
                if (!_this._isChromelessApplication()) {
                    _this._spPageChrome = SPPageChrome_1.default.getInstance(_this._rootServiceScope);
                    _this._suiteNav = new SuiteNavManager_1.default(_this._spPageChrome.suiteNavDiv, _this._rootServiceScope);
                }
                _this._application = application;
                _this._application._load({
                    manifest: applicationManifest,
                    parentServiceScope: _this._rootServiceScope,
                    instanceId: applicationManifest.id,
                    loggingTag: "Application." + applicationManifest.id,
                    preloadedData: _this._preloadedData,
                    suiteNavManager: _this._suiteNav
                });
                if (!_this._isChromelessApplication()) {
                    _this._renderApplication();
                }
                Navigator_1.default.raiseNavigatedEvent();
                qosMonitor.writeSuccess(qosApplicationData);
                resolve(_this._application);
            }
            catch (e) {
                qosMonitor.writeUnexpectedFailure('GeneralError', e, qosApplicationData);
                reject(e);
            }
        });
    };
    ApplicationManager.prototype._renderApplication = function () {
        if (!this._application.suiteNavConfiguration().isSuiteNavDisabled()) {
            this._suiteNav.loadSuiteNav(this._application.suiteNavConfiguration());
        }
        loadThemedStyles.flush();
        this._application._render(this._spPageChrome.appDiv);
    };
    ApplicationManager.prototype._initializeServiceScope = function (preloadedData) {
        this._rootServiceScope = sp_core_library_1.ServiceScope.startNewRoot();
        this._rootServiceScope.provide(sp_telemetry_1._logSourceServiceKey, ApplicationManager._logSource);
        this._pageManager = this._rootServiceScope
            .createDefaultAndProvide(sp_page_context_1.PageManager.serviceKey);
        this._pageContext = this._rootServiceScope
            .createDefaultAndProvide(sp_page_context_1.PageContext.serviceKey);
        this._httpClient = this._rootServiceScope.createAndProvide(sp_http_1.HttpClient.serviceKey, sp_http_1.HttpClient);
        this._spHttpClient = this._rootServiceScope.createAndProvide(sp_http_1.SPHttpClient.serviceKey, sp_http_1.SPHttpClient);
        if (DATACENTER && sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local) {
            this._graphContext = this._rootServiceScope.createAndProvide(sp_http_1._GraphHttpClientContext.serviceKey, sp_http_1._GraphHttpClientContext);
            this._oauth2TokenProvider = this._rootServiceScope.createAndProvide(sp_http_1.AadTokenProvider.serviceKey, sp_http_1.AadTokenProvider);
        }
        this._rootServiceScope.finish();
    };
    ApplicationManager.prototype._initializePreloadedData = function (preloadedData) {
        sp_telemetry_1._TraceLogger.logVerbose(ApplicationManager._logSource, 'Starting application');
        this._initializeServiceScope(preloadedData);
        var INVALID_PAGE_ITEM_ID = -1;
        if (preloadedData.spPageContextInfo.pageItemId === INVALID_PAGE_ITEM_ID &&
            preloadedData.item &&
            preloadedData.item.ID !== INVALID_PAGE_ITEM_ID) {
            preloadedData.spPageContextInfo.pageItemId = preloadedData.item.ID;
        }
        this._pageManager.navigateToPage(preloadedData.spPageContextInfo.webServerRelativeUrl, 
        sp_page_context_1.SharePointPageContextDataProvider._createPageContextData(preloadedData.spPageContextInfo), 
        preloadedData.spPageContextInfo);
        if (DATACENTER && this._graphContext) {
            this._graphContext.initialize(this._pageManager.pageContext.web.serverRelativeUrl);
        }
        if (DATACENTER && this._oauth2TokenProvider) {
            this._oauth2TokenProvider._initialize(this._pageManager.pageContext.legacyPageContext.aadInstanceUrl, this._pageManager.pageContext.legacyPageContext.aadTenantId);
        }
        this._initializeDigestCache(this._rootServiceScope, preloadedData);
        this._preloadedData = preloadedData;
        this._preloadedData.spPageContextInfo = undefined; 
        return this._loadApplicationCustomizers();
    };
    ApplicationManager.prototype._initializeDigestCache = function (serviceScope, preloadedData) {
        sp_core_library_1.Validate.isNotNullOrUndefined(preloadedData, 'preloadedData');
        sp_core_library_1.Validate.isNotNullOrUndefined(preloadedData.contextWebInfo, 'preloadedData.contextWebInfo');
        sp_core_library_1.Validate.isNotNullOrUndefined(preloadedData.spPageContextInfo, 'preloadedData.spPageContextInfo');
        serviceScope.whenFinished(function () {
            var digestCache = serviceScope.consume(sp_http_1.DigestCache.serviceKey);
            sp_telemetry_1._TraceLogger.logVerbose(ApplicationManager._logSource, 'ApplicationManager: Added preloaded FormDigestValue to cache');
            if (preloadedData.contextWebInfo && preloadedData.spPageContextInfo) {
                var expirationTimestamp = (1000 * preloadedData.contextWebInfo.FormDigestTimeoutSeconds) -
                    ApplicationManager.PRELOAD_DIGEST_EXPIRATION_SLOP_MS;
                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webServerRelativeUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webAbsoluteUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
            }
        });
    };
    ApplicationManager.prototype._loadApplicationCustomizers = function () {
        if (this._preloadedData.clientSideApplicationId !== ApplicationManager.classicPagesComponentId &&
            this._preloadedData.clientSideApplicationId !== ApplicationManager.workbenchComponentId) {
            this._applicationCustomizerLoader =
                new ApplicationCustomizerLoader_1.default(this._rootServiceScope, this._pageContext, this._spHttpClient, this._preloadedData.customActions);
            return this._applicationCustomizerLoader.loadExtensions();
        }
        else {
            sp_telemetry_1._TraceLogger.logVerbose(ApplicationManager._logSource, 'Application Customizer is not supported for classic pages and workbench.');
            return Promise.resolve();
        }
    };
    ApplicationManager.classicPagesComponentId = 'eb4b666b-5c29-4dad-9a99-23613f21a2b7';
    ApplicationManager.workbenchComponentId = '8be81a5c-af38-4bb2-af97-afa3b64dfbed';
    ApplicationManager.PRELOAD_DIGEST_EXPIRATION_SLOP_MS = 30000; 
    ApplicationManager._logSource = sp_telemetry_1._LogSource.create('ApplicationManager');
    return ApplicationManager;
}());
exports.default = ApplicationManager;
