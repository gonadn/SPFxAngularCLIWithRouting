import { IBrowserCompatibility } from '@microsoft/sp-core-library';
import { _IPreloadedData } from '@microsoft/sp-loader';
import { BaseComponent } from '@microsoft/sp-component-base';
import ISuiteNavManagerConfiguration from './suiteNav/ISuiteNavManagerConfiguration';
import BaseApplicationContext, { IApplicationContextParameters } from './BaseApplicationContext';
/**
 * This is the system base class for client-side applications.  It manages the overall
 * life cycle of your application, and is the first entry point for your code to start
 * executing when the page loads.  The two main events are onLoad() which occurs first,
 * and onRender() which occurs after the application manager has initialized the environment
 * and completed rendering the page chrome.
 * @alpha
 */
export default class BaseApplication extends BaseComponent {
    /**
     * Event name for page navigation.
     * @internal
     */
    static _navigatedEventName: string;
    /**
     * Event name for layout changes.
     * @internal
     */
    static _layoutChangedEventName: string;
    /**
     * Overrides the IClientSideComponentManifest.alias value provided in the manifest.
     */
    readonly alias: string;
    /**
     * {@inheritdoc @microsoft/sp-component-base:BaseComponent.context}
     */
    protected readonly context: BaseApplicationContext;
    private _navigator;
    private _domElement;
    constructor();
    /**
     * Returns the DOM element where the application is expected to render its content.
     * The domElement will be undefined until the onRender() event occurs.
     * IMPORTANT: The application should not access DOM elements outside of this subtree,
     * as they are system-defined and may change over time.
     *
     * Throws an error if the domElement is undefined.
     */
    protected domElement: HTMLDivElement;
    /**
     * RESERVED FOR INTERNAL USAGE. This method is invoked automatically by the application manager.
     * The application code should not call it directly.
     *
     * @internal
     */
    _load(contextParameters: IApplicationContextParameters): void;
    /**
     * RESERVED FOR INTERNAL USAGE. This method is invoked automatically by the application manager
     * to render the application.
     * The application code should not call it directly.
     *
     * @internal
     */
    _render(domElement: HTMLDivElement | undefined): void;
    /**
     * RESERVED FOR INTERNAL USAGE.
     * Internal API to dispose the application.
     * See onDispose for more details
     */
    dispose(): void;
    /**
     * Returns browser compatibility information for the application.
     *
     * @remarks
     * The SharePoint Framework tracks browser compatibility for the application and the framework.
     * Taken together, this information will determine the experience for the end user.
     *
     * Implement this method to report the level of support that your application provides for the current web browser.
     * Since the User Agent field is impersonated by various browsers, itâ€™s recommended for the implementation to test
     * individual API features rather than trying to identify specific releases of browsers.
     */
    getBrowserCompatibility(): IBrowserCompatibility;
    /**
     * This virtual function returns the default configuration and can be configured by applications
     * when required.
     */
    suiteNavConfiguration(): ISuiteNavManagerConfiguration;
    /**
     * This life cycle event occurs immediately after the application manager has loaded the application,
     * before the DOM is constructed.  Applications can use this event to load scripts
     * or start asynchronous operations that need to occur early in the lifecycle.
     * Inside the onLoad() event, applications may also modify the rendering of various
     * page chrome elements, for example by calling this.context.suiteNav.setComponentVisibility(false).
     */
    protected onLoad(): void;
    /**
     * This lifecycle event occurs after the application manager has constructed the DOM for the page chrome.
     * At this time, the domElement property will be initialized, and the application can begin
     * rendering its own DOM elements.
     */
    protected onRender(): void;
    /**
     * This API is called at the end of the application lifecycle. It should be used to dispose any local
     * resources (i.e. DOM elements) that the application is holding onto.
     *
     * This API is expected to be called in scenarios like cross-application navigation
     * i.e. the host is transitioning from one application to another and disposes the application that is being
     * transitioned out.
     */
    protected onDispose(): void;
    /**
     * RESERVED FOR INTERNAL USAGE.
     * The application code should not call it directly.
     *
     * @internal
     */
    protected _loadTheme(): void;
    protected _navigate(url: string): Promise<_IPreloadedData>;
    protected _navigateToPreloadedData(preloadedData: _IPreloadedData): void;
    /**
     * Raises an event for a layout change.
     */
    protected raiseLayoutChangedEvent(): void;
    private _shouldDisableSuiteNav();
}
