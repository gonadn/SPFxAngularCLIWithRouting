import { _IPreloadedData } from '@microsoft/sp-loader';
/**
 * Application manager. Includes logic to load SPFX client-side applications.
 * @internal
 */
export default class ApplicationManager {
    private static classicPagesComponentId;
    private static workbenchComponentId;
    private static PRELOAD_DIGEST_EXPIRATION_SLOP_MS;
    private static _logSource;
    private _rootServiceScope;
    private _spPageChrome;
    private _application;
    private _suiteNav;
    private _pageContext;
    private _httpClient;
    private _spHttpClient;
    private _preloadedData;
    private _pageManager;
    private _applicationCustomizerLoader;
    private _graphContext;
    private _oauth2TokenProvider;
    /**
     * Returns true if the current application is a chromeless application.
     *
     * @internalremarks
     * PageChrome, SuiteNav and application render do not apply to chromeless applications, like
     * Classic pages and ListView application, and should not be called.
     * This is a temporary fix to prevent page chrome DOM and styles from getting inserted into
     * the list view host application. (@todo VSO#374608) tracks fixing this in a better
     * designed way.
     *
     * @internal
     */
    static _isChromelessApplication(applicationId: string): boolean;
    /**
     * Loads an application and starts its execution.
     *
     * @param preloadedData - Application preloaded data. Must include the application id.
     */
    startApplication<TApplication>(preloadedData: _IPreloadedData): Promise<TApplication>;
    /**
     * Loads the application, defined by the application id passed as input.
     * Rejects the promise if the application can't be loaded.
     */
    private _loadApplication<TApplication>(applicationId, error);
    private _isChromelessApplication();
    /**
     * Initializes the application.
     * It sets up the PageChrome and SuiteNav if necessary, initializes the application context
     * and renders the application if necessary.
     *
     * @param application Application to initialize.
     * @param preloadedData Preloaded data to use for the application.
     */
    private _initializeApplication(application, preloadedData);
    private _renderApplication();
    private _initializeServiceScope(preloadedData);
    private _initializePreloadedData(preloadedData);
    private _initializeDigestCache(serviceScope, preloadedData);
    private _loadApplicationCustomizers();
}
