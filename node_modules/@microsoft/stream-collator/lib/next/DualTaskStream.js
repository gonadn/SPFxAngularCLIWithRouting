"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore next */
const colors = require("colors");
const stream = require("stream");
const PersistentStream_1 = require("./PersistentStream");
/**
 * This is a special type of stream class which has two substreams (stderr and stdout), which you can write to.
 * The DualTaskStream will merge these two streams into a single readable stream.
 * Everything written to stderr is written in red, unless it is a Warning, in which case it appears in yellow.
 */
class DualTaskStream extends stream.Readable {
    /**
     * @param {boolean} quietMode is true if things written to stdout (and warnings) should be ignored
     */
    constructor(quietMode = false) {
        super();
        this._quietMode = quietMode;
        this.stdout = new PersistentStream_1.default();
        this.stderr = new PersistentStream_1.default();
        this.stdout.on('finish', () => {
            this._stdoutClosed = true;
        });
        this.stderr.on('finish', () => {
            this._stderrClosed = true;
        });
        this.stdout.on('data', (data, encoding) => {
            if (!this._quietMode) {
                this.push(data);
            }
        });
        this.stderr.on('data', (data, encoding) => {
            const text = data.toString();
            if (text.indexOf('Warning - ') === 0) {
                this.stdout.write(colors.yellow(text));
            }
            else {
                this.push(colors.red(text));
            }
        });
    }
    _read() {
        // No-op
    }
    /**
     * Closes both substreams and closes the readable stream
     */
    end() {
        if (!this._stdoutClosed) {
            this.stdout.end();
        }
        if (!this._stderrClosed) {
            this.stderr.end();
        }
        // End the stream
        if (!this._closed) {
            this._closed = true;
            this.push(null); // tslint:disable-line:no-null-keyword
        }
    }
}
exports.default = DualTaskStream;

//# sourceMappingURL=DualTaskStream.js.map
