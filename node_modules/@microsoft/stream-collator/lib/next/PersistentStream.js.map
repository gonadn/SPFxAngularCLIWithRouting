{"version":3,"sources":["next/PersistentStream.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,0BAA0B;AAE1B,iCAAiC;AAEjC;;GAEG;AACH,sBAAsC,SAAQ,MAAM,CAAC,SAAS;IAG5D,YAAY,IAA8B;QACxC,KAAK,CAAC,IAAI,CAAC,CAAC;QAHN,YAAO,GAAa,EAAE,CAAC;IAI/B,CAAC;IAEM,UAAU,CAAC,KAAsB,EAAE,QAAgB,EAAE,IAA2C;QACrG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACpC,CAAC;IAEM,OAAO;QACZ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;CACF;AAfD,mCAeC","file":"next/PersistentStream.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* istanbul ignore next */\r\n\r\nimport * as stream from 'stream';\r\n\r\n/**\r\n * A special type of stream which keeps track of everything written to it, which can be read with the readAll() function\r\n */\r\nexport default class PersistentStream extends stream.Transform {\r\n  private _buffer: string[] = [];\r\n\r\n  constructor(opts?: stream.TransformOptions) {\r\n    super(opts);\r\n  }\r\n\r\n  public _transform(chunk: Buffer | String, encoding: string, done: (err?: Object, data?: Object) => void): void {\r\n    this._buffer.push(chunk.toString());\r\n    done(undefined, chunk.toString());\r\n  }\r\n\r\n  public readAll(): string {\r\n    return this._buffer.join('');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}