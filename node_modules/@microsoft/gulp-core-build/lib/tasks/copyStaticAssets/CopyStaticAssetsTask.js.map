{"version":3,"sources":["tasks/copyStaticAssets/CopyStaticAssetsTask.ts"],"names":[],"mappings":"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","file":"tasks/copyStaticAssets/CopyStaticAssetsTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as Gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport globEscape = require('glob-escape');\r\nimport { GulpTask } from '../GulpTask';\r\n\r\n/**\r\n * Configuration for CopyStaticAssetsTask\r\n * @public\r\n */\r\nexport interface ICopyStaticAssetsTaskConfig {\r\n  includeExtensions?: string[];\r\n  excludeExtensions?: string[];\r\n  includeFiles?: string[];\r\n  excludeFiles?: string[];\r\n}\r\n\r\n/**\r\n * Copies files from the /src folder into the /lib folder, if they have certain file extensions\r\n * or file paths.\r\n *\r\n * @internalremarks\r\n *\r\n * Example:\r\n *  IN:\r\n *    setConfig({\r\n *      includeExtensions: ['template.html'],\r\n *      excludeExtensions: ['png'],\r\n *      includeFiles: ['/assets/goodAsset.png'],\r\n *      excludeFiles: ['/assets/badAsset.gif']\r\n *    })\r\n *\r\n *  OUT:\r\n *    copies all files that match our standard webpack file-loader extensions\r\n *      ('jpg', 'png', 'woff', 'eot', 'ttf', 'svg', 'gif'), with the following extensions, in the following order of\r\n *    precedence (from lowest to highest):\r\n *      1. including additional extensions (i.e. 'template.html')\r\n *      2. excluding specific extensions (i.e. 'png')\r\n *      3. including specific globs (i.e. '/assets/goodAsset.png')\r\n *      4. excluding specific globs (i.e. '/assets/badAsset.gif')\r\n *\r\n * @public\r\n */\r\nexport class CopyStaticAssetsTask extends GulpTask<ICopyStaticAssetsTaskConfig> {\r\n  constructor() {\r\n    super(\r\n      'copy-static-assets',\r\n      {\r\n        includeExtensions: [],\r\n        excludeExtensions: [],\r\n        includeFiles: [],\r\n        excludeFiles: []\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./copy-static-assets.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream {\r\n    const rootPath: string = path.join(this.buildConfig.rootPath, this.buildConfig.srcFolder || 'src');\r\n    const libPath: string = path.join(this.buildConfig.rootPath, this.buildConfig.libFolder || 'lib');\r\n\r\n    const globPatterns: string[] = [];\r\n\r\n    const allExtensions: string[] = (this.taskConfig.includeExtensions || []).concat(['json', 'html', 'css', 'md']);\r\n\r\n    for (let ext of allExtensions) {\r\n      if (this.taskConfig.excludeExtensions) {\r\n        if (this.taskConfig.excludeExtensions.indexOf(ext) !== -1) {\r\n          break; // Skipping this extension. It's been excluded\r\n        }\r\n      }\r\n\r\n      if (!ext.match(/^\\./)) {\r\n        ext = `.${ext}`;\r\n      }\r\n\r\n      globPatterns.push(path.join(rootPath, '**', `*${globEscape(ext)}`));\r\n    }\r\n\r\n    for (const file of this.taskConfig.includeFiles || []) {\r\n      if (this.taskConfig.excludeFiles) {\r\n        if (this.taskConfig.excludeFiles.indexOf(file) !== -1) {\r\n          break; // Skipping this file. It's been excluded\r\n        }\r\n      }\r\n\r\n      globPatterns.push(path.join(rootPath, file));\r\n    }\r\n\r\n    for (const file of this.taskConfig.excludeFiles || []) {\r\n      globPatterns.push(`!${path.join(rootPath, file)}`);\r\n    }\r\n\r\n    return gulp.src(globPatterns, { base: rootPath })\r\n               .pipe(gulp.dest(libPath))\r\n               .on('finish', () => completeCallback());\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}