{"version":3,"sources":["tasks/JestTask.ts"],"names":[],"mappings":"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","file":"tasks/JestTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport { GulpTask} from './GulpTask';\r\nimport { IBuildConfig } from '../IBuildConfig';\r\nimport * as Gulp from 'gulp';\r\nimport * as Jest from 'jest-cli';\r\nimport * as globby from 'globby';\r\n\r\n/**\r\n * Configuration for JestTask\r\n * @alpha\r\n */\r\nexport interface IJestConfig {\r\n  /**\r\n   * Indicate whether this task is enabled. The default value is false.\r\n   */\r\n  isEnabled?: boolean;\r\n\r\n  /**\r\n   * Same as Jest CLI option collectCoverageFrom\r\n   */\r\n  collectCoverageFrom?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option coverage\r\n   */\r\n  coverage?: boolean;\r\n\r\n  /**\r\n   * Same as Jest CLI option coverageReporters\r\n   */\r\n  coverageReporters?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option testPathIgnorePatterns\r\n   */\r\n  testPathIgnorePatterns?: string[];\r\n}\r\n\r\nconst DEFAULT_JEST_CONFIG_FILE_NAME: string = 'jest.config.json';\r\n\r\n/**\r\n * Indicates if jest is enabled\r\n * @internal\r\n * @param rootFolder - package root folder\r\n */\r\nexport function _isJestEnabled(rootFolder: string): boolean {\r\n  const taskConfigFile: string = path.join(rootFolder, 'config', 'jest.json');\r\n  if (!fsx.existsSync(taskConfigFile)) {\r\n    return false;\r\n  }\r\n  const taskConfig: {} = require(taskConfigFile);\r\n  // tslint:disable-next-line:no-string-literal\r\n  return !!taskConfig['isEnabled'];\r\n}\r\n\r\n/**\r\n * This task takes in a map of dest: [sources], and copies items from one place to another.\r\n * @alpha\r\n */\r\nexport class JestTask extends GulpTask<IJestConfig> {\r\n\r\n  constructor() {\r\n    super('jest',\r\n    {\r\n      collectCoverageFrom: ['lib/**/*.js?(x)', '!lib/**/test/**'],\r\n      coverage: true,\r\n      coverageReporters: ['json', 'html'],\r\n      testPathIgnorePatterns: ['<rootDir>/(src|lib-amd|lib-es6|coverage|build|docs|node_modules)/']\r\n    });\r\n  }\r\n\r\n  public isEnabled(buildConfig: IBuildConfig): boolean {\r\n    return super.isEnabled(buildConfig) && !!this.taskConfig.isEnabled;\r\n  }\r\n\r\n  /**\r\n   * Loads the z-schema object for this task\r\n   */\r\n  public loadSchema(): Object {\r\n    return require('./jest.schema.json');\r\n  }\r\n\r\n  public executeTask(\r\n    gulp: typeof Gulp,\r\n    completeCallback: (error?: string | Error) => void\r\n  ): void {\r\n    const configFileFullPath: string = path.join(this.buildConfig.rootPath,\r\n      'config', 'jest', DEFAULT_JEST_CONFIG_FILE_NAME);\r\n\r\n    this._copySnapshots(this.buildConfig.srcFolder, this.buildConfig.libFolder);\r\n\r\n    Jest.runCLI(\r\n      {\r\n        ci: this.buildConfig.production,\r\n        config: configFileFullPath,\r\n        collectCoverageFrom: this.taskConfig.collectCoverageFrom,\r\n        coverage: this.taskConfig.coverage,\r\n        coverageReporters: this.taskConfig.coverageReporters,\r\n        coverageDirectory: path.join(this.buildConfig.tempFolder, 'coverage'),\r\n        maxWorkers: 1,\r\n        moduleDirectories: ['node_modules', this.buildConfig.libFolder],\r\n        reporters: [path.join(__dirname, 'JestReporter.js')],\r\n        rootDir: this.buildConfig.rootPath,\r\n        runInBand: true,\r\n        testMatch: ['**/*.test.js?(x)'],\r\n        testPathIgnorePatterns: this.taskConfig.testPathIgnorePatterns,\r\n        updateSnapshot: !this.buildConfig.production\r\n      },\r\n      [this.buildConfig.rootPath],\r\n      (result) => {\r\n        if (result.numFailedTests || result.numFailedTestSuites) {\r\n          completeCallback(new Error('Jest tests failed'));\r\n        } else {\r\n          if (!this.buildConfig.production) {\r\n            this._copySnapshots(this.buildConfig.libFolder, this.buildConfig.srcFolder);\r\n          }\r\n          completeCallback();\r\n        }\r\n      });\r\n  }\r\n\r\n  private _copySnapshots(srcRoot: string, destRoot: string): void {\r\n    const pattern: string = path.join(srcRoot, '**/__snapshots__/*.snap');\r\n    globby.sync(pattern).forEach(sourceFile => {\r\n      const destination: string = sourceFile.replace(srcRoot, destRoot);\r\n      fsx.copySync(sourceFile, destination);\r\n    });\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}