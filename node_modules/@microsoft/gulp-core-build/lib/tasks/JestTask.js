"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
const path = require("path");
const fsx = require("fs-extra");
const GulpTask_1 = require("./GulpTask");
const Jest = require("jest-cli");
const globby = require("globby");
const DEFAULT_JEST_CONFIG_FILE_NAME = 'jest.config.json';
/**
 * Indicates if jest is enabled
 * @internal
 * @param rootFolder - package root folder
 */
function _isJestEnabled(rootFolder) {
    const taskConfigFile = path.join(rootFolder, 'config', 'jest.json');
    if (!fsx.existsSync(taskConfigFile)) {
        return false;
    }
    const taskConfig = require(taskConfigFile);
    // tslint:disable-next-line:no-string-literal
    return !!taskConfig['isEnabled'];
}
exports._isJestEnabled = _isJestEnabled;
/**
 * This task takes in a map of dest: [sources], and copies items from one place to another.
 * @alpha
 */
class JestTask extends GulpTask_1.GulpTask {
    constructor() {
        super('jest', {
            collectCoverageFrom: ['lib/**/*.js?(x)', '!lib/**/test/**'],
            coverage: true,
            coverageReporters: ['json', 'html'],
            testPathIgnorePatterns: ['<rootDir>/(src|lib-amd|lib-es6|coverage|build|docs|node_modules)/']
        });
    }
    isEnabled(buildConfig) {
        return super.isEnabled(buildConfig) && !!this.taskConfig.isEnabled;
    }
    /**
     * Loads the z-schema object for this task
     */
    loadSchema() {
        return require('./jest.schema.json');
    }
    executeTask(gulp, completeCallback) {
        const configFileFullPath = path.join(this.buildConfig.rootPath, 'config', 'jest', DEFAULT_JEST_CONFIG_FILE_NAME);
        this._copySnapshots(this.buildConfig.srcFolder, this.buildConfig.libFolder);
        Jest.runCLI({
            ci: this.buildConfig.production,
            config: configFileFullPath,
            collectCoverageFrom: this.taskConfig.collectCoverageFrom,
            coverage: this.taskConfig.coverage,
            coverageReporters: this.taskConfig.coverageReporters,
            coverageDirectory: path.join(this.buildConfig.tempFolder, 'coverage'),
            maxWorkers: 1,
            moduleDirectories: ['node_modules', this.buildConfig.libFolder],
            reporters: [path.join(__dirname, 'JestReporter.js')],
            rootDir: this.buildConfig.rootPath,
            runInBand: true,
            testMatch: ['**/*.test.js?(x)'],
            testPathIgnorePatterns: this.taskConfig.testPathIgnorePatterns,
            updateSnapshot: !this.buildConfig.production
        }, [this.buildConfig.rootPath], (result) => {
            if (result.numFailedTests || result.numFailedTestSuites) {
                completeCallback(new Error('Jest tests failed'));
            }
            else {
                if (!this.buildConfig.production) {
                    this._copySnapshots(this.buildConfig.libFolder, this.buildConfig.srcFolder);
                }
                completeCallback();
            }
        });
    }
    _copySnapshots(srcRoot, destRoot) {
        const pattern = path.join(srcRoot, '**/__snapshots__/*.snap');
        globby.sync(pattern).forEach(sourceFile => {
            const destination = sourceFile.replace(srcRoot, destRoot);
            fsx.copySync(sourceFile, destination);
        });
    }
}
exports.JestTask = JestTask;

//# sourceMappingURL=JestTask.js.map
