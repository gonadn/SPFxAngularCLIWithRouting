"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const index_1 = require("../index");
const mockBuildConfig_1 = require("./mockBuildConfig");
/* tslint:disable:no-unused-expression */
// disable the exit watching
global['dontWatchExit'] = true; // tslint:disable-line:no-string-literal
describe('serial', () => {
    it('can run a set of tasks in serial', (done) => {
        const execution = [];
        const tasks = createTasks('task', 3, command => execution.push(command));
        index_1.serial(tasks).execute(mockBuildConfig_1.mockBuildConfig).then(() => {
            chai_1.expect(execution).to.deep.equal([
                'executing task 0',
                'complete task 0',
                'executing task 1',
                'complete task 1',
                'executing task 2',
                'complete task 2'
            ]);
            done();
        }).catch(error => done(error));
    });
});
describe('parallel', () => {
    it('can run a set of tasks in parallel', (done) => {
        const execution = [];
        const tasks = createTasks('task', 3, command => execution.push(command));
        index_1.parallel(tasks).execute(mockBuildConfig_1.mockBuildConfig).then(() => {
            chai_1.expect(execution).to.deep.equal([
                'executing task 0',
                'executing task 1',
                'executing task 2',
                'complete task 0',
                'complete task 1',
                'complete task 2'
            ]);
            done();
        }).catch(error => done(error));
    });
    it('can mix in serial sets of tasks', (done) => {
        const execution = [];
        const serial1Tasks = index_1.serial(createTasks('serial set 1 -', 2, command => execution.push(command)));
        const parallelTasks = index_1.parallel(createTasks('parallel', 2, command => execution.push(command)));
        const serial2Tasks = index_1.serial(createTasks('serial set 2 -', 2, command => execution.push(command)));
        index_1.serial([
            serial1Tasks,
            parallelTasks,
            serial2Tasks
        ]).execute(mockBuildConfig_1.mockBuildConfig)
            .then(() => {
            chai_1.expect(execution).to.deep.equal([
                'executing serial set 1 - 0',
                'complete serial set 1 - 0',
                'executing serial set 1 - 1',
                'complete serial set 1 - 1',
                'executing parallel 0',
                'executing parallel 1',
                'complete parallel 0',
                'complete parallel 1',
                'executing serial set 2 - 0',
                'complete serial set 2 - 0',
                'executing serial set 2 - 1',
                'complete serial set 2 - 1'
            ]);
            done();
        })
            .catch(error => done(error));
    });
    it('stops running serial tasks on failure', (done) => {
        const execution = [];
        const tasks = createTasks('task', 1, command => execution.push(command));
        tasks.push(createTask('fail task', command => execution.push(command), true));
        tasks.push(createTask('should not run task', command => execution.push(command), false));
        index_1.serial(tasks).execute(mockBuildConfig_1.mockBuildConfig).then(() => {
            done('The task returned success unexpectedly.');
        }).catch((error) => {
            chai_1.expect(error).to.equal('Failure', 'Make sure the proper error is propagate');
            chai_1.expect(execution).to.deep.equal([
                'executing task 0',
                'complete task 0',
                'executing fail task',
                'complete fail task'
            ]);
            done();
        });
    });
    it('can read the current config', (done) => {
        const config = index_1.getConfig();
        chai_1.expect(config).to.be.not.null;
        done();
    });
    it('can set the config', (done) => {
        const distFolder = 'testFolder';
        const newConfig = {
            distFolder: distFolder
        };
        index_1.setConfig(newConfig);
        chai_1.expect(index_1.getConfig().distFolder).to.eq(distFolder);
        done();
    });
});
function createTasks(name, count, executionCallback) {
    return Array.apply(undefined, Array(count))
        .map((item, index) => createTask(name + ' ' + index, executionCallback));
}
function createTask(name, executionCallback, shouldFail) {
    return {
        execute: (buildConfig) => new Promise((done, error) => {
            executionCallback(`executing ${name}`);
            setTimeout(() => {
                executionCallback(`complete ${name}`);
                if (shouldFail) {
                    error('Failure');
                }
                else {
                    done();
                }
            }, 10);
        })
    };
}

//# sourceMappingURL=index.test.js.map
