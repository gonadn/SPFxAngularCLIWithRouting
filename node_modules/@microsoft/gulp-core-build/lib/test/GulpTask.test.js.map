{"version":3,"sources":["test/GulpTask.test.ts"],"names":[],"mappings":"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","file":"test/GulpTask.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { assert, expect } from 'chai';\r\nimport gutil = require('gulp-util');\r\nimport * as Gulp  from 'gulp';\r\nimport { Readable } from 'stream';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  serial,\r\n  parallel,\r\n  GulpTask\r\n} from '../index';\r\nimport { mockBuildConfig } from './mockBuildConfig';\r\n\r\ninterface IConfig {\r\n}\r\n\r\nlet testArray: string[] = [];\r\n\r\nclass PromiseTask extends GulpTask<IConfig> {\r\n  constructor() {\r\n    super('promise', {});\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      testArray.push(this.name);\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n\r\nclass StreamTask extends GulpTask<IConfig> {\r\n  constructor() {\r\n    super('stream', {});\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp): any { // tslint:disable-line:no-any\r\n    const stream: Readable = new Readable({ objectMode: true });\r\n\r\n    // Add no opt function to make it compat with through\r\n    stream['_read'] = () => { // tslint:disable-line:no-string-literal\r\n      // Do Nothing\r\n    };\r\n\r\n    setTimeout(() => {\r\n\r\n      const file: gutil.File = new gutil.File({\r\n        path: 'test.js',\r\n        contents: new Buffer('test')\r\n      });\r\n\r\n      stream.push(file);\r\n\r\n      testArray.push(this.name);\r\n\r\n      stream.emit('end');\r\n    }, 100);\r\n\r\n    return stream;\r\n  }\r\n}\r\n\r\nclass SyncTask extends GulpTask<IConfig> {\r\n  constructor() {\r\n    super('sync', {});\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp): void {\r\n    testArray.push(this.name);\r\n  }\r\n}\r\n\r\nclass SyncWithReturnTask extends GulpTask<IConfig> {\r\n  constructor() {\r\n    super('sync-with-return', {});\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp): void {\r\n    testArray.push(this.name);\r\n  }\r\n}\r\n\r\nclass CallbackTask extends GulpTask<IConfig> {\r\n  constructor() {\r\n    super('schema-task', {});\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, callback: (error?: string | Error) => void): void {\r\n    testArray.push(this.name);\r\n    callback();\r\n  }\r\n}\r\n\r\ninterface ISimpleConfig {\r\n  shouldDoThings: boolean;\r\n}\r\n\r\nclass SchemaTask extends GulpTask<ISimpleConfig> {\r\n  public name: string = '';\r\n\r\n  constructor() {\r\n    super(\r\n      'schema-task',\r\n      {\r\n        shouldDoThings: false\r\n      }\r\n    );\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, callback: (error?: string | Error) => void): void {\r\n    callback();\r\n  }\r\n\r\n  protected _getConfigFilePath(): string {\r\n    return path.join(__dirname, 'schema-task.config.json');\r\n  }\r\n}\r\n\r\nconst tasks: GulpTask<IConfig>[] = [\r\n];\r\n\r\ntasks.push(new PromiseTask());\r\ntasks.push(new StreamTask());\r\ntasks.push(new SyncTask());\r\ntasks.push(new SyncWithReturnTask());\r\ntasks.push(new CallbackTask());\r\n\r\ndescribe('GulpTask', () => {\r\n  for (const task of tasks) {\r\n    it(`${task.name} serial`, (done) => {\r\n      testArray = [];\r\n      task.setConfig({ addToMe: testArray });\r\n      serial(task).execute(mockBuildConfig).then(() => {\r\n        expect(testArray).to.deep.equal([task.name]);\r\n        done();\r\n      }).catch(done);\r\n    });\r\n\r\n    it(`${task.name} parallel`, (done) => {\r\n      testArray = [];\r\n      task.setConfig({ addToMe: testArray });\r\n      parallel(task).execute(mockBuildConfig).then(() => {\r\n        expect(testArray).to.deep.equal([task.name]);\r\n        done();\r\n      }).catch(done);\r\n    });\r\n  }\r\n\r\n  it(`all tasks serial`, (done) => {\r\n    testArray = [];\r\n    for (const task of tasks) {\r\n      task.setConfig({ addToMe: testArray });\r\n    }\r\n    serial(tasks).execute(mockBuildConfig).then(() => {\r\n      for (const task of tasks) {\r\n        expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);\r\n      }\r\n      done();\r\n    }).catch(done);\r\n  });\r\n\r\n  it(`all tasks parallel`, (done) => {\r\n    testArray = [];\r\n    for (const task of tasks) {\r\n      task.setConfig({ addToMe: testArray });\r\n    }\r\n    parallel(tasks).execute(mockBuildConfig).then(() => {\r\n      for (const task of tasks) {\r\n        expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);\r\n      }\r\n      done();\r\n    }).catch(done);\r\n  });\r\n\r\n  it(`reads schema file if loadSchema is implemented`, (done) => {\r\n    const schemaTask: SchemaTask = new SchemaTask();\r\n    assert.isFalse(schemaTask.taskConfig.shouldDoThings);\r\n    schemaTask.onRegister();\r\n    assert.isTrue(schemaTask.taskConfig.shouldDoThings);\r\n    done();\r\n  });\r\n\r\n  it(`throws validation error is config does not conform to schema file`, (done) => {\r\n    const schemaTask: SchemaTask = new SchemaTask();\r\n\r\n    // tslint:disable-next-line:no-any\r\n    (schemaTask as any)._getConfigFilePath = (): string => {\r\n      return path.join(__dirname, 'other-schema-task.config.json');\r\n    };\r\n\r\n    assert.isFalse(schemaTask.taskConfig.shouldDoThings);\r\n    assert.throws(schemaTask.onRegister);\r\n    done();\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}