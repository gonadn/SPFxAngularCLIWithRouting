{"version":3,"sources":["test/index.test.ts"],"names":[],"mappings":"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","file":"test/index.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { expect } from 'chai';\r\n\r\nimport {\r\n  serial,\r\n  parallel,\r\n  getConfig,\r\n  setConfig,\r\n  IExecutable,\r\n  IBuildConfig\r\n} from '../index';\r\nimport { mockBuildConfig } from './mockBuildConfig';\r\n\r\n/* tslint:disable:no-unused-expression */\r\n\r\n// disable the exit watching\r\nglobal['dontWatchExit'] = true; // tslint:disable-line:no-string-literal\r\n\r\ndescribe('serial', () => {\r\n  it('can run a set of tasks in serial', (done) => {\r\n    const execution: string[] = [];\r\n    const tasks: IExecutable[] = createTasks('task', 3, command => execution.push(command));\r\n\r\n    serial(tasks).execute(mockBuildConfig).then(() => {\r\n      expect(execution).to.deep.equal([\r\n        'executing task 0',\r\n        'complete task 0',\r\n        'executing task 1',\r\n        'complete task 1',\r\n        'executing task 2',\r\n        'complete task 2'\r\n      ]);\r\n      done();\r\n    }).catch(error => done(error));\r\n  });\r\n\r\n});\r\n\r\ndescribe('parallel', () => {\r\n  it('can run a set of tasks in parallel', (done) => {\r\n    const execution: string[] = [];\r\n    const tasks: IExecutable[] = createTasks('task', 3, command => execution.push(command));\r\n\r\n    parallel(tasks).execute(mockBuildConfig).then(() => {\r\n      expect(execution).to.deep.equal([\r\n        'executing task 0',\r\n        'executing task 1',\r\n        'executing task 2',\r\n        'complete task 0',\r\n        'complete task 1',\r\n        'complete task 2'\r\n      ]);\r\n      done();\r\n    }).catch(error => done(error));\r\n  });\r\n\r\n  it('can mix in serial sets of tasks', (done) => {\r\n    const execution: string[] = [];\r\n    const serial1Tasks: IExecutable = serial(createTasks('serial set 1 -', 2, command => execution.push(command)));\r\n    const parallelTasks: IExecutable = parallel(createTasks('parallel', 2, command => execution.push(command)));\r\n    const serial2Tasks: IExecutable = serial(createTasks('serial set 2 -', 2, command => execution.push(command)));\r\n\r\n    serial([\r\n      serial1Tasks,\r\n      parallelTasks,\r\n      serial2Tasks\r\n    ]).execute(mockBuildConfig)\r\n      .then(() => {\r\n        expect(execution).to.deep.equal([\r\n          'executing serial set 1 - 0',\r\n          'complete serial set 1 - 0',\r\n          'executing serial set 1 - 1',\r\n          'complete serial set 1 - 1',\r\n          'executing parallel 0',\r\n          'executing parallel 1',\r\n          'complete parallel 0',\r\n          'complete parallel 1',\r\n          'executing serial set 2 - 0',\r\n          'complete serial set 2 - 0',\r\n          'executing serial set 2 - 1',\r\n          'complete serial set 2 - 1'\r\n        ]);\r\n        done();\r\n      })\r\n      .catch(error => done(error));\r\n  });\r\n\r\n  it('stops running serial tasks on failure', (done) => {\r\n    const execution: string[] = [];\r\n    const tasks: IExecutable[] = createTasks('task', 1, command => execution.push(command));\r\n\r\n    tasks.push(createTask('fail task', command => execution.push(command), true));\r\n    tasks.push(createTask('should not run task', command => execution.push(command), false));\r\n\r\n    serial(tasks).execute(mockBuildConfig).then(\r\n      () => {\r\n        done('The task returned success unexpectedly.');\r\n      }).catch((error) => {\r\n        expect(error).to.equal('Failure', 'Make sure the proper error is propagate');\r\n        expect(execution).to.deep.equal([\r\n          'executing task 0',\r\n          'complete task 0',\r\n          'executing fail task',\r\n          'complete fail task'\r\n        ]);\r\n        done();\r\n      });\r\n\r\n  });\r\n\r\n  it('can read the current config', (done) => {\r\n    const config: IBuildConfig = getConfig();\r\n    expect(config).to.be.not.null;\r\n    done();\r\n  });\r\n\r\n  it('can set the config', (done) => {\r\n    const distFolder: string = 'testFolder';\r\n    const newConfig: Partial<IBuildConfig> = {\r\n      distFolder: distFolder\r\n    };\r\n\r\n    setConfig(newConfig);\r\n    expect(getConfig().distFolder).to.eq(distFolder);\r\n    done();\r\n  });\r\n});\r\n\r\nfunction createTasks(\r\n  name: string,\r\n  count: number,\r\n  executionCallback: (message: string) => void): IExecutable[] {\r\n  return Array.apply(undefined, Array(count))\r\n    .map((item, index) => createTask(name + ' ' + index, executionCallback));\r\n}\r\n\r\nfunction createTask(\r\n  name: string,\r\n  executionCallback: (message: string) => void,\r\n  shouldFail?: boolean): IExecutable {\r\n  return {\r\n    execute: (buildConfig): Promise<void> => new Promise<void>((done, error) => {\r\n      executionCallback(`executing ${name}`);\r\n\r\n      setTimeout(() => {\r\n        executionCallback(`complete ${name}`);\r\n\r\n        if (shouldFail) {\r\n          error('Failure');\r\n        } else {\r\n          done();\r\n        }\r\n      }, 10);\r\n    })\r\n  };\r\n}\r\n"],"sourceRoot":"..\\..\\src"}